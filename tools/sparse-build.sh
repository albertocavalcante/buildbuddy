####
# SPARSE BUILD
#
# This script is used to build a Bazel target, or target pattern, with git-sparse-checkout(1).
#
# This checkout manifest is generated by Bazel Query, and then fed to git-sparse-checkout(1)
# to create a working tree with only the files needed to build the target.
#
# This script is a useful Proof of Concept, showing how it's possible to generate a sparse checkout
# manifest using Bazel's dependency graph.  These manifests could be checked in to the repository,
# and used to create different "Checkout Profiles" for lightweight local development and/or CI/CD
# setups.
#
# In practice, each "Checkout Profile" would only need to be programmatically generated once, and
# then checked in to the repository.  Each profile should be validated independently via a
# dedicated Bazel CI Worker Pools.  Subsequent changes to the repository should update the
# affected profiles accordingly to ensure that CI Workers always have the needed files to build
# the target.  A helper script could be used to update the profiles automatically using the diff of
# the change.
####
#!/bin/bash -e

# We need the full-checkout to run Bazel Query accurately
git sparse-checkout disable

BUILD_TARGET=$1
MANIFEST=$(mktemp /tmp/manifest.XXXXXX)
if [[ -z "$KEEP_MANIFEST" ]]; then
  trap "rm -f $MANIFEST" EXIT
else
  echo "Keeping manifest at $MANIFEST"
fi

bazel 2>/dev/null query '
  let pkg = '"${BUILD_TARGET}"' in
  let internal_deps = filter("^//", deps($pkg)) in
  let buildfiles = filter("^//", buildfiles($internal_deps + $pkg)) in
  $buildfiles + $internal_deps + $pkg' |\
    # Remove trailing target and leading '//'
    sed 's/:.*//; s|//||' |\
    # Remove empty lines
    grep -v '^$' |\
    # Remove duplicates
    sort | uniq > $MANIFEST

## Must include
# For external repositories patches
echo 'buildpatches' >> $MANIFEST
# For workspace status script, sub-dirs are not included
echo 'tools' >> $MANIFEST

# Feed the manifest to git sparse-checkout
cat $MANIFEST | git sparse-checkout set --stdin --sparse-index

if [[ -z "$SKIP_BUILD_TARGET" ]]; then
  # Validate Checkout Profile by building the target
  bazel build $BUILD_TARGET
fi
