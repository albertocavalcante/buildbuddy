<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.buildbuddy.io/blog</id>
    <title>BuildBuddy Blog</title>
    <updated>2022-12-19T09:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.buildbuddy.io/blog"/>
    <subtitle>BuildBuddy Blog</subtitle>
    <icon>https://www.buildbuddy.io/img/favicon_black.svg</icon>
    <entry>
        <title type="html"><![CDATA[What's New in Bazel 6.0]]></title>
        <id>whats-new-in-bazel-6-0</id>
        <link href="https://www.buildbuddy.io/blog/whats-new-in-bazel-6-0"/>
        <updated>2022-12-19T09:00:00.000Z</updated>
        <summary type="html"><![CDATA[We reviewed over 3,100 commits and summarized them, again 😅, so you don't have to!]]></summary>
        <content type="html"><![CDATA[<p><a href="https://blog.bazel.build/2022/12/19/bazel-6.0.html">Bazel 6.0</a> includes <a href="https://github.com/bazelbuild/bazel/compare/5.4.0...6.0.0">over 3,100 changes</a> since 5.4.
It&#x27;s the latest major release,
following the release of 5.0 in January of this year,
and it&#x27;s Bazel&#x27;s <a href="https://bazel.build/versions/6.0.0/release/versioning#lts-releases">third LTS release</a>.
Since there were so many changes,
many of them quite impactful,
I felt I needed to review them all and provide a nice summary for y&#x27;all.</p><p>Similar to <a href="whats-new-in-bazel-5-0.md">Bazel 5.0&#x27;s changes</a>,
the end result was quite big,
so I&#x27;ve included a table of contents to allow easy navigation to the changes that interest you the most:</p><nav class="toc"><ul><li><a href="#command-line-flag-changes">Command-line flag changes</a><ul><li><a href="#renamed">Renamed</a></li><li><a href="#default-values-changed">Default values changed</a></li><li><a href="#deprecated">Deprecated</a></li><li><a href="#no-op">No-op</a></li><li><a href="#removed">Removed</a></li></ul></li><li><a href="#remote">Remote</a><ul><li><a href="#remote-caching-rbc">Remote caching (RBC)</a></li><li><a href="#remote-execution-rbe">Remote execution (RBE)</a></li><li><a href="#dynamic-execution">Dynamic execution</a></li><li><a href="#local-execution">Local execution</a></li><li><a href="#build-event-service-bes">Build Event Service (BES)</a></li></ul></li><li><a href="#logging">Logging</a><ul><li><a href="#build-event-protocol-bep">Build Event Protocol (BEP)</a></li><li><a href="#timing-profile">Timing profile</a></li><li><a href="#execution-log">Execution log</a></li></ul></li><li><a href="#query">Query</a><ul><li><a href="#cquery">cquery</a></li><li><a href="#aquery">aquery</a></li></ul></li><li><a href="#dependency-management">Dependency management</a></li><li><a href="#platforms-and-toolchains">Platforms and toolchains</a></li><li><a href="#execution-platforms">Execution platforms</a><ul><li><a href="#linux">Linux</a></li><li><a href="#macos">macOS</a></li></ul></li><li><a href="#target-platforms">Target platforms</a><ul><li><a href="#android">Android</a></li><li><a href="#apple">Apple</a></li></ul></li><li><a href="#languages">Languages</a><ul><li><a href="#c-and-c%2B%2B">C and C++</a></li><li><a href="#java">Java</a></li><li><a href="#objective-c">Objective-C</a></li><li><a href="#python">Python</a></li></ul></li><li><a href="#rules-authoring">Rules authoring</a><ul><li><a href="#aspects">Aspects</a></li><li><a href="#persistent-workers">Persistent workers</a></li><li><a href="#starlark">Starlark</a></li></ul></li><li><a href="#misc">Misc</a></li></ul></nav><h2>Command-Line Flag Changes</h2><p>Bazel&#x27;s <a href="https://bazel.build/versions/6.0.0/release/versioning#lts-releases">LTS strategy</a> allows for breaking changes between major versions.
In particular,
it allows for command-line flags to be removed,
renamed,
made to do nothing,
or have their default values changed.
In the following sections I collected all such flag changes I could find.</p><h3>Renamed</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/36afffa04151d9243051f83897c88257ab4d1026"><code>--experimental_build_transitive_python_runfiles</code> is now <code>--incompatible_build_transitive_python_runfiles</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e38c73f8ecc327d54e0409892468ad1bec6e4a49"><code>--experimental_debug_spawn_scheduler</code> is now <code>--debug_spawn_scheduler</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e38c73f8ecc327d54e0409892468ad1bec6e4a49"><code>--experimental_desugar_java8_libs</code> is now <code>--desugar_java8_libs</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f106d5c1dc4d84e119537dda3d68bc2dd83e2077"><code>--experimental_enable_bzlmod</code> is now <code>--enable_bzlmod</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e38c73f8ecc327d54e0409892468ad1bec6e4a49"><code>--experimental_local_execution_delay</code> is now <code>--dynamic_local_execution_delay</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e38c73f8ecc327d54e0409892468ad1bec6e4a49"><code>--experimental_worker_max_multiplex_instances</code> is now <code>--worker_max_multiplex_instances</code>.</a></li></ul><h3>Default Values Changed</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/21dfe4cdc35ed0b3536accdc91be042aa5c550aa"><code>--analysis_testing_deps_limit=1000</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3d5c5d746b286c840ba5cfd437d93d8d11995e02"><code>--experimental_allow_unresolved_symlinks=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/60523c7fecd4e72490c2dde547e1e36eab5a79ef"><code>--experimental_keep_config_nodes_on_analysis_discard=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/60523c7fecd4e72490c2dde547e1e36eab5a79ef"><code>--experimental_collect_local_sandbox_action_metrics=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ce55639c3ef2b9bd703d64026c40df0b7485b6a5"><code>--experimental_incremental_dexing_after_proguard=50</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ce55639c3ef2b9bd703d64026c40df0b7485b6a5"><code>--experimental_incremental_dexing_after_proguard_by_default=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d44f11be11f3ec12d644eb5f5245bf70c6a65bee"><code>--experimental_inmemory_dotd_files=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/822e049d2881a1c7bedc9182116f772a72e00227"><code>--experimental_inmemory_jdeps_files=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2f9f8429be9651d4bb94b425b6ae5f11e95bea16"><code>--experimental_keep_config_nodes_on_analysis_discard=false</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ce55639c3ef2b9bd703d64026c40df0b7485b6a5"><code>--experimental_use_dex_splitter_for_incremental_dexing=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0caf488a7492740425af88b32c622fdc33bc1593"><code>--incompatible_always_include_files_in_data=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/aad2db20b5"><code>--incompatible_enforce_config_setting_visibility=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/74b7dd55325d6588f1a8827dd3bdb30deea073a0"><code>--incompatible_existing_rules_immutable_view=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4c56431c271850f7536aae0a0719f811e3c35b5b"><code>--incompatible_remote_results_ignore_disk=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f137e640303486b52e39b4d4edee088f895b6b00"><code>--incompatible_use_platforms_repo_for_constraints=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6452024a0106ab901f38027db65e8ab831201288"><code>--use_top_level_targets_for_symlinks=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0c3f5280e0746b9cbf222b426d3885658e525b0b"><code>--use_workers_with_dexbuilder=true</code></a></li></ul><h3>Deprecated</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/16f2eecc3c2406d9de0cfc11f8187cb68df12b51"><code>--allowed_local_actions_regex</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/da6f8026967e2338973306c9d85ae6cf23244ecb"><code>--experimental_spawn_scheduler</code></a></li></ul><h3>No-op</h3><p>These flags now do nothing, but still exist to allow for migration off of them:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/78d0fc9ff1d2f22005ddfce43384e35fbac338cb"><code>--distinct_host_configuration</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/db64e7e54b7f17e86a3206b4834f0fd11c065155"><code>--dynamic_worker_strategy</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/bccbcbf9767ebd081df464db78c582d25173115b"><code>--experimental_allow_top_level_aspects_parameters</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/db64e7e54b7f17e86a3206b4834f0fd11c065155"><code>--experimental_dynamic_skip_first_build</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/75bb463ab73f5f7cc60e7cc445ba24b377f4963f"><code>--experimental_keep_config_nodes_on_analysis_discard</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/85bfefedeef20063fb6d17a73d9ee18a028414f7"><code>--experimental_multi_cpu</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f22e63deef43141f08b63cc0210fc9b9e2fded1d"><code>--experimental_skyframe_prepare_analysis</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/cbf8159ba6190ab447ad54df63cb4db25763d755"><code>--incompatible_disable_managed_directories</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0aa750b7252ef8c71e11ae2f6cf6849b6ff0e715"><code>--incompatible_disable_third_party_license_checking</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f068b31c94eef1ea10477a755d9173b4fadf6485"><code>--incompatible_disallow_legacy_py_provider</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2d5375c27a4ca43635183bbe0d12849c64a6176e"><code>--incompatible_override_toolchain_transition</code></a></li></ul><h3>Removed</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--all_incompatible_changes</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--analysis_warnings_as_errors</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ed7a0565f02b496bc4fc613157111638e8dd997f"><code>--default_android_platform</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c887c2a4fe4395f9663ce2f1cde9b656d216415c"><code>--experimental_delay_virtual_input_materialization</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--experimental_enable_cc_toolchain_config_info</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/361ce673ad2b959b73e859a121ff2e996feb561b"><code>--experimental_local_memory_estimate</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1f33504af3ebe3a43aa91e607e94edc07b1807f8"><code>--experimental_persistent_test_runner</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--experimental_profile_cpu_usage</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--experimental_required_aspects</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--experimental_shadowed_action</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--experimental_skyframe_eval_with_ordered_list</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/09df7c0a14b9bf13d4aa18f5a02b4651e626d5f4"><code>--experimental_worker_allow_json_protocol</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ab51d2e45378d6ec23bce8b5b40d632364d77dbb"><code>--extra_proguard_specs</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9cb551c0e540090679448460ee19b04b0f281f1d"><code>--forceJumbo</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/29e4aee112e8649c93577ec225c7ed9fdedd76a2"><code>--incompatible_applicable_licenses</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/bf30d81caf907e0fa58e71b63924d81a1271c40a"><code>--incompatible_disable_depset_items</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--incompatible_disable_late_bound_option_defaults</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--incompatible_disable_legacy_proto_provider</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--incompatible_disable_proto_source_root</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--incompatible_do_not_emit_buggy_external_repo_import</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/01a46f05dc79db2313c6c8e174a5d6eab474aefc"><code>--incompatible_enable_exports_provider</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/34ce6a23f5a2be58bb59661dd5fc9ab586ea1703"><code>--incompatible_linkopts_to_linklibs</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6b6c63ed9fb5d51a90b91dca4bed5a68955a6859"><code>--incompatible_proto_output_v2</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--incompatible_use_native_patch</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/684fb0a576827d4f5c7311f3ac13b59d0786ea04"><code>--ios_cpu</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--json_trace_compression</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/96c8a9073807c9e97635ddafe2ed0365a9318d6f"><code>--master_bazelrc</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e846207dc2495e39fd178218b29bab3b4a8cd1d1"><code>--max-bytes-wasted-per-file</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/63ddfc468d5b8a5c5f4ead28997dd4412fbfbb76"><code>--minimal-main-dex</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4f557e8af473d26a55265ada7c4c950b7bef9b35"><code>--remote_allow_symlink_upload</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e846207dc2495e39fd178218b29bab3b4a8cd1d1"><code>--set-max-idx-number</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2e48994ab8202796324df3c93ff9441a44b5ba4d"><code>--show_task_finish</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8e6c469106261c765e929532ee7d71fee71c7abc"><code>--ui</code></a></li></ul><h2>Remote</h2><p>One of Bazel&#x27;s most powerful features is its ability to use <a href="bazels-remote-caching-and-remote-execution-explained.md">remote caching and remote execution</a>.
Numerous improvements and fixes to Bazel&#x27;s remote capabilities are included in Bazel 6.0.</p><h3>Remote caching (RBC)</h3><p>Using a remote cache is one of the most popular ways of speeding up a Bazel build.
Thankfully these changes make using a remote cache both more performant and more reliable:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/7b141c1edf243acae5859f56cd0afff2d3eaba32">Added the <code>--experimental_remote_downloader_local_fallback</code> flag, which causes the remote downloader to fallback to normal fetching.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b750f8c0242d7fcb581d368d8b75e59c51c13a61">Added the <code>--incompatible_remote_downloader_send_all_headers</code> flag, which causes all values of a multi-value header to be sent with Remote Downloader.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e5f92a40338ffe0f50f817ee1b2b6e3557d380e2">The <code>--experimental_action_cache_store_output_metadata</code> flag is now enabled by default when using the <code>--remote_download_*</code> flags.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e01e7f51dd19f39ce3bc0718cec20ed6474de733">Outputs downloaded with <code>--experimental_remote_download_regex</code> no longer block spawn execution.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/bb8e6eca7a8698b2bb8216160038a36e55e69da7"><code>--experimental_remote_download_regex</code> now matches on execution root relative paths.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b6f3111d8e460de35a5e5570bd784919fc30c5f8">Top-level outputs are now always downloaded when using <code>--remote_download_toplevel</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/845077fff18432e6b2a1a089964e1afc9b9fec7f"><code>bazel run</code> now works with <code>--remote_download_minimal</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/21b0992eb26e91ad3e6d3046fa90f1f7ad8b9f08">When using Build without the Bytes, AC results in the disk cache are now validated to be complete.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b303cd128d9f1d913749927f4a1cd942b10b1ae2">Outputs and stdErr are now always downloaded.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/32b0f5a258ee83b040d6975a6bd0795670f5cd47">Symlinked targets are no longer unnecessarily downloaded.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/05b97393ff7604f237d9d31bd63714f27fbe83f2">Downloads now use a priority system to improve critical path performance.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/aaf65b97b7cd75160b4b4dcc9149fb9fc60e1759">HTTP remote caches now support client TLS authentication.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7aa69a968b9063cb080417426a11bb32954f7f6c">Headers are no longer included in <code>FetchBlobRequest</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f589512846c5762e89757b96835ee54da4bb2281">AC uploads will no longer error if <code>--remote_upload_local_results=true</code> and <code>GetCapabilities</code> returns <code>update_enabled=false</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8b61746cf18d3d8413b569e0b5fca639d28914ea">Fixed hanging when failing to upload action inputs.</a></li></ul><h3>Remote execution (RBE)</h3><p>For some projects,
using remote execution is the ultimate performance unlock for their Bazel builds.
In addition to the remote caching changes covered above,
which also apply to remote execution,
the following changes improve the remote execution experience:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/72b481a8e9c19de1acf323c69d2d822c954a6dbb">Added the <code>--experimental_remote_mark_tool_inputs</code> flag, which marks tool inputs for remote executors, which in turn allows them to implement remote persistent workers.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5b46a48db8b380ba9afe2df2cb7d564b0c927913">Added the <code>--incompatible_remote_dangling_symlinks</code> flag, which allows symlinks in action outputs to dangle.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8b57c5810f2cc58f71995be83604d47226cf9244">Added the <code>--remote_print_execution_messages</code> flag, which allows control over when to print remote execution messages.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8936828610db8106864e41860ad86c5c415fa0ed">Added the <code>exclusive-if-local</code> tag, for disabling parallel local test execution but allowing remote execution if requested.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ca95fecde07a28736ea815ec64bcd639a234d79c">Added support for remotely generating unresolved symlinks.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c55b01e3e4c535738f9aebbb4d1ba0623235aee0">Fixed formatting of non-ASCII text.</a></li></ul><h3>Dynamic execution</h3><p><a href="https://bazel.build/versions/6.0.0/remote/dynamic">Dynamic execution</a> allows for Bazel to race remote and local execution of actions,
potentially allowing you to get the benefit of both modes,
without the drawbacks of either.
Bazel 6.0 included a number of changes to dynamic execution,
almost all of them behind new experimental flags:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/9a52a270132250b11523db055e13e69791aecba1">Added the <code>--experimental_dynamic_exclude_tools</code> flag, which prevents dynamic execution for tools.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d5c4f551fa9f5981b36ab67c69386e3787d06f0c">Added the <code>--experimental_dynamic_local_load_factor</code> flag, which controls how much load from dynamic execution to put on the local machine.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/88f605c689881f50e8ec310f43878e411936f23c">Added the <code>--experimental_dynamic_slow_remote_time</code> flag, which starts locally scheduling actions above a certain age in dynamic scheduling.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8fa3ccbb072236a8d0a4937e9e4a0ced58268c25">Added the <code>--experimental_prioritize_local_actions</code> flag, which prioritizes local-only actions over dynamically executed actions for local resources.</a></li></ul><h3>Local execution</h3><p>In <code>buck2</code>,
<a href="https://github.com/facebookincubator/buck2/blob/2116ae1d48d63109d72cb7100cb99ad8d20bc873/docs/why.md#why-might-it-be-interesting">local execution is a specialization of remote execution</a>.
So I&#x27;m going to use that as the reason that this section is listed under the &quot;Remote&quot; section,
and not because I don&#x27;t want to reorganize this post just to fit in a couple neat local execution changes 😉:</p><ul><li><a href="https://youtu.be/IEJLHNNRP9U">Announced at BazelCon</a>, SkyMeld allows merging the analysis and execution phases with the the <a href="https://github.com/bazelbuild/bazel/issues/14057"><code>--experimental_merged_skyframe_analysis_execution</code> and <code>--experimental_skymeld_ui</code> flags</a>.</li><li><a href="https://github.com/bazelbuild/bazel/commit/17276d4fade793955a6f2491e3527c2be184867a">Local actions now fetch inputs before acquiring the resource lock.</a></li></ul><h3>Build Event Service (BES)</h3><p>Using a build event service can give you unparalleled insight into your Bazel builds at scale.
There were some nice changes to BES support,
though I think the improvements to how it interacts with the remote cache are especially noteworthy.</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/46104c6948dc4ca66797e413c62b58bd21981c51">Added the <code>--bep_maximum_open_remote_upload_files</code> flag, which allows control over the maximum number of open files allowed during BEP artifact upload.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/14b5c41c29423866cd3f2ee3f7b69ff48241bd34">Added the <code>--bes_check_preceding_lifecycle_events</code> flag, which tells BES to check whether it previously received <code>InvocationAttemptStarted</code> and <code>BuildEnqueued</code> events matching the current tool event.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e7218d556a2a265183a10a19fcaa21c0277820ad">Added the <code>--experimental_build_event_upload_max_retries</code> and <code>--experimental_build_event_upload_retry_minimum_delay</code> flags, which allow for configuring the behavior of BES uploader retires.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6b5277294bfcf032d1d2d009c102147af12ec896">Added the <code>--experimental_remote_build_event_upload</code> flag, which controls the way Bazel uploads files referenced in BEP to remote caches.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/dbcf260e0318ef553d606b0510832cfe8a5b14eb">BES RPC calls now include request metadata.</a></li></ul><h2>Logging</h2><p>Bazel offers various methods to gain insight into your build.
I cover some of the notable changes to those methods below.</p><h3>Build Event Protocol (BEP)</h3><p>The build event protocol is used by <a href="#build-event-service-(bes)">build event services</a>,
so all of these changes could have also been listed in that section as well.
The BEP can also be collected locally with <a href="https://bazel.build/versions/6.0.0/reference/command-line-reference#flag--build_event_json_file"><code>--build_event_json_file</code></a> and <a href="https://bazel.build/versions/6.0.0/reference/command-line-reference#flag--build_event_binary_file"><code>--build_event_binary_file</code></a>.</p><p>The vast majority of changes added additional information to the BEP,
though some are fixes and improvements:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/da6d9499d61ed4fb14a0bbbf456d5e9381c328ee">Added the <code>digest</code> and <code>length</code> fields to <code>File</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9bc9096241fb414303cafecd36a993f45117f3e1">Added the <code>BuildMetrics.network_metrics</code> field.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/a9ac2b6162234c4c1d0db37a6d7b783763d0f79f">Added the <code>MemoryMetrics.peak_post_gc_tenured_space_heap_size</code> field.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d233c896fd6eff93901f7dd8641936a76b544ccb">Added the <code>WorkerMetrics.last_action_start_time_in_ms</code> field.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d8c25fcced761cb139e560076d24d9f179055548">Changed the semantics of <code>build_event_stream.BuildMetrics.PackageMetrics.packages_loaded</code> to be the number of packages successfully loaded.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/286fb80081db0af43b1f86292ce417c6541d4ad4">Deprecated <code>AnomalyReport</code>.</a></li></ul><h3>Timing profile</h3><p>The action timing profile,
which is enabled by default with <a href="https://bazel.build/versions/6.0.0/reference/command-line-reference#flag--profile"><code>--profile</code></a>,
is viewable both <a href="https://bazel.build/versions/6.0.0/rules/performance#performance-profiling">locally in Chrome</a> and on <a href="#build-event-service-(bes)">build event services</a>.
These changes add more detail and clarity to the profile:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/e78fd2e5f4cfc4029d4725d764eca0b1abff164b">Added action mnemonics.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b4dbed0c599862cc3886fc644cda95d0a38b4f70">Added the <code>--experimental_collect_load_average_in_profiler</code> flag, which adds the system&#x27;s overall load average.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e382cb2fd7b02e557a513f93a58eafd42ab234b0">Added the <code>--experimental_collect_system_network_usage</code> flag, which adds system network usage.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/be5354b4b4a27d34badbce0c6540b879c84fd865">Added the <code>--experimental_collect_worker_data_in_profiler</code> flag, which adds worker memory usage.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3d2bb2a400c48bc51e43db11ac154d999a97881b">Improved reporting of critical path components.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/081f831e3c86b4a4c6d6107b29c4883581b94aee">Made the <code>sort_index</code> value always a string.</a></li></ul><h3>Execution log</h3><p>Bazel logs all of the <a href="bazels-remote-caching-and-remote-execution-explained.md#spawns">spawns</a> it executes in the execution log,
which is enabled with the <a href="https://bazel.build/versions/6.0.0/reference/command-line-reference#flag--execution_log_json_file"><code>--execution_log_json_file</code></a> or <a href="https://bazel.build/versions/6.0.0reference/command-line-reference#flag--execution_log_binary_file"><code>--execution_log_binary_file</code></a> flags.
This feature is relatively stable,
with just a few noticeable additions:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/b4b8b2614ae854651075506666f109d0fc508ad1">Added the <code>--experimental_execution_log_spawn_metrics</code> flag, which causes spawn metrics in be included in the execution log.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b2cbc9a17c90f9ddeb88eca4756cb2fc764abebe">Added the <code>SpawnExec.digest</code> field.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9f908cada13c9015f267f368f263c361df812983">Added the <code>SpawnExec.target_label</code> field.</a></li></ul><h2>Query</h2><p><code>bazel build</code> wasn&#x27;t the only command to get improvements in this release.
Here are some changes that were made to the <code>query</code> family of commands:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/1473988aa1e9b92c42fcbad4e155f247f1983d13">Added the <code>--incompatible_package_group_includes_double_slash</code> flag, which removes the leading <code>//</code> from <code>package_group.package</code> output.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/cc71db2a465716ba175d3defaa6032107bf1dd90">Added an optional second argument to the <code>some</code> operator, specifying number of nodes returned.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/47b1cad5a6026c220002d56ae3c25e5c20d0cef7">Labels are decanonicalized if possible.</a></li></ul><h3><code>cquery</code></h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/73b22b6485de339794bf623e592f2595692c10af">Added support for queries over incompatible targets.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d69346575a7a2f791e61d181ca59aae6354236f9">Added <code>struct</code>, <code>json</code>, <code>proto</code>, and <code>depset</code> to <code>--output=starlark</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9994c3277607a3b7bd452512e1ff6e5ba73bbc4a">Added <code>ConfiguredRuleInput</code> when using <code>--transitions</code>, which reports the configuration dependencies are configured in.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/29d46eb41a413430498ab033f84a8d960edfb6fb">Added more information about configurations to proto output.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fb92e2da3c75db0ac3c119d137119d38c4858009">Added the <code>Configuration.is_tool</code> attribute to proto output.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ac48e65f702d3e135bb0b6729392f9cb485da100">Complete configurations are now included in proto output.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ca8674cc4879ed1846bf015c33fe7d920a3f66ab"><code>--output=files</code> now also outputs source files.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5de9888f1f28837d0e801f7a4bbbf6f5d6481012">Starlark transitions now report source code location.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/46a36d683801604e92b8b38f74a1388a973fd543">Updated <code>AnalysisProtosV2</code>.</a></li></ul><h3><code>aquery</code></h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/6d73b9619026c536bb9e64f69b515d015b18bf67">Added the <code>--include_file_write_contents</code> flag, which includes file contents for the <code>FileWrite</code> action.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fb92e2da3c75db0ac3c119d137119d38c4858009">Added the <code>Configuration.is_tool</code> attribute to the proto output.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c55b01e3e4c535738f9aebbb4d1ba0623235aee0">Fixed formatting of non-ASCII text.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ec1ac2f272716a25f9909d61bddb5cfe82756a7b">Fixed non-deterministic sorting of execution requirements.</a></li></ul><h2>Dependency management</h2><p>A new dependency system named <a href="https://bazel.build/versions/6.0.0/build/bzlmod">Bzlmod</a> was added in Bazel 5.0,
and made non-experimental in Bazel 6.0.
Besides all of the changes needed to support Bzlmod,
these were some other notable dependency management related changes:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/123da96ef501457193f6ff52f42522249f5e3737">Added the <code>--experimental_check_external_repository_files</code> flag, which allows disabling checking for modifications to files in external repositories.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f5a899fbbeb34cbd13ec6293ef722344f20d6714">Added the <code>build_file</code> and <code>build_file_content</code> attributes to <code>git_repository</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/87c8b09061eb4d51271630353b1718c39dfd1ebe">Added the <code>add_prefix</code> attribute to <code>http_*</code> rules.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e51a15f4395d4223c9665e5cc8ae2c8dd29e8f20">Added the <code>integrity</code> attribute to <code>http_file</code> and <code>http_jar</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8edf6abec40c848a5df93647f948e31f32452ae6">Added the <code>workspace_root</code> attribute to <code>repository_ctx</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5af794bb9bb8f9a7f3667d53f31b132a3f51314e">Added the <code>success</code> parameter to <code>repository_ctx.download</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2b02416b6175bf0ac82cb5c8ecc9a80a2f397e88">Added the <code>rename_files</code> parameter to <code>repository_ctx.extract</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/16c89c12af1b703c605b35ec06ede881e77237de">Added host arch to repository rule markers.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/cc55400e614e4e301244cc7c338ee3ea89424ce0"><code>--override_repository</code> now accepts tildes.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/a15f342931c0ef6529c8f53cd7a8b8823de8979e"><code>http_*</code> rules now honour the <code>NETRC</code> environment variable.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/801e01c30005a562e4d056f2640e6f56cc096413">Download progress now displays human readable bytes.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/cbf8159ba6190ab447ad54df63cb4db25763d755">Removed support for managed directories.</a></li><li><a href="https://docs.google.com/document/d/1N81qfCa8oskCk5LqTW-LNthy6EBrDot7bdUsjz6JFC4">When Bzlmod is enabled, canonical label literals are used.</a></li></ul><h2>Platforms and toolchains</h2><p>The C++, Android, and Apple rules are being migrated to support <a href="https://bazel.build/versions/6.0.0/concepts/platforms">building with Platforms</a>.
While progress has been made,
they don&#x27;t fully support it yet in Bazel 6.0.
For C++ projects,
it&#x27;s recommended that the <code>--incompatible_enable_cc_toolchain_resolution</code> flag is used,
to help the Bazel team discover any issues in the wide variety of projects that exist.</p><p>Here are some of the platforms and toolchains related changes which weren&#x27;t tied to any of those migrations:</p><ul><li>The <code>host</code> configuration is deprecated, and <a href="https://github.com/bazelbuild/bazel/commit/6e6c4cf1bd6edaa15ecc4417cd0be70581181def">a</a> <a href="https://github.com/bazelbuild/bazel/commit/32fc7cac3c62dcf1721e9093a449561eb854f241">lot</a> <a href="https://github.com/bazelbuild/bazel/commit/790d7a75b34eb963c18f9165bd9608d7a8eb4f3d">of</a> <a href="https://github.com/bazelbuild/bazel/commit/48e88685105c906ae52865422da01c39c580bf21">changes</a> <a href="https://github.com/bazelbuild/bazel/commit/715c9faabba573501c9cb7604192759950633205">were</a> <a href="https://github.com/bazelbuild/bazel/commit/d988e8b3bace4b2bb2ec4adc17d9bf7b4f49a907">made</a> to migrate away from it and to the <code>exec</code> configuration.</li><li><a href="https://github.com/bazelbuild/bazel/commit/6464f1cbdf14f0b8e8f29f7b57990a40ea584062">Added the <code>--incompatible_disable_starlark_host_transitions</code> flag, which prevents rules from using the <code>host</code> configuration.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/51c90c7d7f749af99d66cbd21bbdda09b68f79ac">Added the <code>--experimental_exec_configuration_distinguisher</code> flag, which changes how the <code>platform_suffix</code> is calculated.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/423fb20c2bc7773f8c9567be8056566ce4633e5f">Added the <code>exec_group</code> argument to <code>testing.ExecutionInfo()</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/issues/14726">Toolchain dependencies can now be optional.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/eeb2e04e52cfad165a1bde33ce2d83a392f53d00"><code>sh</code> path is now selected based on execution platform instead of host platform, making it possible to execute <code>sh</code> actions in multi-platform builds.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2adf0033bb4e71171e96f95bbd54ab783c6bb6d1">The <code>exec</code> transition no longer resets any <code>TestConfiguration.TestOptions</code> options.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e4c1c434d49062449c7a83dd753fe01923766b1d"><code>platform.exec_properties</code> now become execution requirements.</a></li></ul><h2>Execution platforms</h2><p>Execution platforms are <a href="https://bazel.build/versions/6.0.0/extending/platforms">platforms</a> which build tools execute on.
These include the host platform on which Bazel runs.</p><p>In the following sections I collected notable changes for Linux and macOS.
I&#x27;m sure there were some for Windows as well,
but since I don&#x27;t use Bazel on Windows,
none of the changes stood out to me as pertaining only to it.</p><h3>Linux</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/ae6a90a143b1ef25ff5fd620c662ab5f81d0043d">Added the <code>--incompatible_sandbox_hermetic_tmp</code> flag, which causes the sandbox to have its own dedicated empty directory mounted as <code>/tmp</code> rather than sharing <code>/tmp</code> with the host filesystem.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9a13051fb73d68221dfd9849b52e0f3cd046c524">Added the <code>--sandbox-explicit-pseudoterminal</code> flag, which allow processes in the sandbox to open pseudoterminals.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/467f32d8087fed11bd480ec5112bf1228b63053d">Fixed handling of large UIDs.</a></li></ul><h3>macOS</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/2ff4124004355b0bf86e1228b4bb1d19bd55ec3d">Remote Xcode version is now matched more granuarly.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b8d0e26357065740d4007223cf20f488a120290e"><code>clean --async</code> is now available on macOS.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f99319f14fb1c92c98217bb9b2a85c75bd963368">The <code>@bazel_tools//tools/cpp:compiler</code> flag now has the value <code>clang</code> for the auto-configured Xcode toolchain rather than the generic value <code>compiler</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3451774a8a76b8ef9211e852ec3173498bbac1a7">Removed some aborts from <code>wrapped_clang</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d9f20dcf099d245a90c2d2965706076126ea574b">Fixed <code>lld</code> detection on macOS.</a></li></ul><h2>Target platforms</h2><p>Target platforms are <a href="https://bazel.build/versions/6.0.0/extending/platforms">platforms</a> which you are ultimately building for.
I cover the Android and Apple platforms in the following sections,
as they still have some functionality provided by Bazel core,
instead of being fully supported by standalone Starlark rules.</p><h3>Android</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/ff311f618a602c15f5848a317561934b0154132b">D8 is now the default desugarer.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/66d07f096cb697bdadb6f9d9fbc1c4fe33be6d59">D8 is now the default dexer.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ae247145b897d0f41cdf2b317f5c7b856845e303">The D8 jar from Maven is used instead of Android Studio&#x27;s.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4c3219ec5fc2f74b45f7b29b029caf56ed8a1b4d">Added the <code>android_binary.min_sdk_version</code> attribute.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f6dbd1e4a127b95276127afe64a095345678019b">Added the <code>ApkInfo.signing_min_v3_rotation_api_version</code> attribute.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/021665748680b415704d70698d13b4efb9e0e9dc">Added the <code>--mobile_install_run_deployer</code> flag to the <code>mobile-install</code> command, which allows skipping the deployer after building.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2b44482eb7645f738fddf48622ccc1cf05a179d7">Added the <code>--bytecode_optimization_pass_actions</code> flag, which allows splitting the optimization pass into N parts.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/63aace26c0e624c146840625e69051bace300ff2">Added the <code>--persistent_multiplex_android_tools</code>, <code>--persistent_multiplex_android_resource_processor</code>, <code>--persistent_android_dex_desugar</code>, and <code>--persistent_multiplex_android_dex_desugar</code> expansion flags, which allow for easy enabling of persistent and multiplexed Android tools (dexing, desugaring, resource, and processing)</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/563664e0e0a9083be554b4931654743d84b9cba4">Added the <code>--incompatible_android_platforms_transition_updates_affected</code> flag, which causes <code>AndroidPlatformsTransition</code> to also update <code>affected by Starlark transition</code> with the changed options.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4cfd32d419ca322894dea5cbd6e8ce61676ec476">Added the <code>--experimental_persistent_multiplex_busybox_tools</code> flag, which enables multiplex worker support in <code>ResourceProcessorBusyBox</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3df19e8e900c0f435923754fee36ca5d6eb8724d">Added worker support to <code>AndroidCompiledResourceMergingAction</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7ce1c578b1d9a28709b3949ddfaaebe5e32c989f">Added worker support to <code>CompatDexBuilder</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f32b99f452c08e4276c9c5efd564a246383f50bb">Added worker support to the D8 desugarer.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c60eb5d324da4d81f6be93f442ac6d7576741e8e">Added the merged manifest to the <code>android_deploy_info</code> output group.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/bb97b02fb8fd7c4a60d0e85f86acec12bd1af58c">Added <code>application_resources</code>&#x27;s output groups to <code>android_binary</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7de4fab0d8b507f3790533e1ae18e94dca916d04">Removed support for <code>android_binary.multidex=off</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b76cc3a2ec4991bb5772ce309fae288e147bcebe">Reduced <code>AndroidAssetMerger</code> intermediate outputs.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2c25f73880ed72dddb4bfa843388b15f02011158">Resources are now sorted to produce a consistent zip (which helps cache hit rates).</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1b2cf8d596a98abe3f02f711903435e060f76720">Incremental APKs are now zipaligned before they are installed.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6613f6fbbcf85aac0ee5865d7d5273aad2a5813a">Split APKs are now zipaligned before they are installed.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4829960c1626357f514ac16eb1a4005a360ee96d"><code>minsdk</code> is now added to dexing and desugaring artifacts paths.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2907d15985907f17fe53aa8c4e7953b5fa69977c">Certain Android actions now have their output paths stripped of config information.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/46e0be4ef67901cab7896348c89de06396f737b4">Fixed Android&#x27;s <code>armeabi-v7a</code> constraint.</a></li></ul><h3>Apple</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/ce611646969cfe72ae5e22083708684eae11e478">Added the <code>watchos_device_arm64</code> <code>cpu</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/531df65129f632a19ce0fd27422d55696af42511">Added the <code>watchos_device_arm64e</code> <code>cpu</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/877845584186301e53ed01eaecf3166db4ddcec7">Added the <code>apple_common.link_multi_arch_static_library</code> function.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/96084140804f552c0402de6223776757a66d0e5a">Added <code>-no_deduplicate</code> when linking with Darwin <code>dbg</code>/<code>fastbuild</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2cc3dc4130e3a2b11fbfb980609ca3f2532489b7">Added support for the <code>static_link_cpp_runtimes</code> feature in Apple linking.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/da8a327802187363636908f6c3bc16d9f5a18604"><code>cpu</code>s for tvOS and watchOS are now correctly inferred when running on an Apple Silicon host.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/01d46bbd54b1f3e75eda5876da4467b5bda33d01">32-bit watchOS architectures are no longer included in mulit-arch builds when targeting watchOS 9.0 or greater.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7866fd90d216d6bec7af3631ded5b2db56c5cde2">Moved <code>-framework</code> flags to be after the <code>-filelist</code> flag.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ccb2cc05ff72f9f10c741b0e1d44f9a1b1265ddb">Static frameworks are now linked into fully linked static libraries.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6e1b440a94214fdef0f6dd489c0aa3c4fdc6ef87">macOS dynamic libraries now have <code>.dylib</code> extensions instead of <code>.so</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9feeb1d928899e3b390241da6d6cfbc8dca1e4a6">Linking <code>cc_info</code> is now exposed from <code>AppleExecutableBinary</code> and <code>AppleDynamicFramework</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/092884b0118f1b8b14ba2277851baa6dcce5cac2">Removed the <code>AppleDylibBinary</code> and <code>AppleLoadableBundleBinary</code> providers.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3073f1b72fd6a9df758d059391b1f6791ea5eb1b">Removed the <code>should_lipo</code> argument from <code>apple_common.link_multi_arch_binary</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0535477eabfbafb9665cc5a191b677077496751c">Removed the native <code>apple_binary</code> rule.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/589354cdcc274edc01e5634c081739737c593f5e">Removed the native <code>apple_static_library</code> rule.</a></li></ul><h2>Languages</h2><p>While there are lots of programming languages that are supported through standalone Starlark rules,
some are still written as &quot;native&quot; rules in Bazel core,
or are bundled Starlark rules while <a href="#starlark">Starlarkification</a> is in progress.
In the following sections I summarize the notable changes in support of these languages.</p><h3>C and C++</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/6522472dc8a7efaa278b04fd27b3ebb3d467d4d3">Added the <code>--experimental_unsupported_and_brittle_include_scanning</code> flag, which enables C/C++ include scanning.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4919d4a61d8506d175b25a035500842b8bfe3d0d">Added the <code>--host_per_file_copt</code> flag.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/bff973031a65c139a4878c87e5f335a895964ab9">Added the <code>archive_param_file</code> feature, which allows turning off param file for archives.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5ebb0d6884c62150afaa8e1a402881fd5c4f6a37">Added the <code>default_link_libs</code> feature, which can be disabled to support pure C.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/a9e5a32b9c0de2ade15be67bd1b80c3ec8e6b472">Added the <code>gcc_quoting_for_param_files</code> feature, which enables gcc quoting for linker param files.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f802525ad37e4f4567103682244d65f6cc55ff57">Added the <code>treat_warnings_as_errors</code> feature, which treats warnings as errors.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/94f83f4c8c5feb0f879eb83d122808fa328837c6">Added the <code>separate_module_headers</code> parameter to <code>cc_common.compile</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d308c175aa53757746c65ab65c17f9dbd6267755">Added the <code>language</code> parameter to <code>cc_common.configure_features</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8ac29d796722cc7f8ad951e64fa18b4b4cd467a4">Added the <code>main_output</code> parameter to <code>cc_common.link</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/eb181661ff7e72781f46b7994a5e5c9bab45d5dd">Added the <code>BAZEL_CURRENT_REPOSITORY</code> local define to <code>cc_*</code> rules.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/aaba5be3d50b642ad3d9bccada8971a06c68c123">Added <code>Action.argv</code> support to <code>CppCompileAction</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/17ed57ac5ad9b52bfc43e52ca40512f7114c58aa">Added support for vendor&#x27;ed <code>clang</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/abe6667469363d543d8d0fe9108eacb9f96028ed">Reverted <code>cc_library.interface_deps</code> back to <code>implementation_deps</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/25d17f53bed60464ce74d1c1a1769787ab259cf2">Default flags features can now be disabled.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5f51d21e918a4c7286c5024c3c50f2d931662af9">The <code>per_object_debug_info</code> feature is now enabled by default.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ef3f05852b3bf542903f091184da96b96354a13d">The <code>@bazel_tools//tools/cpp:compiler</code> flag now has the value <code>gcc</code> if the configured compiler is detected to be <code>gcc</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1746a7958d8c332cae563333d9028b066373e547">The <code>malloc</code> attribute of <code>cc_*</code> rules now accepts any <code>CcInfo</code> providing target.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d519fec25245fcc5806360c671b2d242469515f6">The C++ archive action now has the <code>CppArchive</code> mnemonic.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/32e61b3235cf49b8764dd6b10622197fec6056ce">Coverage can now be collected for external targets.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/46a8e09334a03eeb8518a4913dcd98f19ddc9c62">Make variable substitution now accepts <code>data</code> dependencies.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/17998427da1438174fb41708d3afcaff7eedc4f4"><code>cc_common.link</code> no longer stamps actions for tool dependencies.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/af4a1506d8b5f68a3208e401ee5a9a7c1e0a10ad">Windows interface libraries can now use the <code>.lib</code> extension.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/06f9202e813d649b4ea48aa48cb0668fecb9cefa">Fixed <code>cc_test</code> to apply all compilation flags.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e3dcfa54baec45a6b247143106f7ab689df424cd">Fixed dynamic library lookup with remotely executed tools.</a></li></ul><h3>Java</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/8f3d99aa2e7c0742f7f89ddc3921350537feef77">Upgraded JDK11.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fbb0958f281e523db085849e87f56bd70f038b34">Upgraded JDK17.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/a7f1c7133a58ac721d176487ff8e82bccc55699b">Added JDK18.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1acda6be4ffc197f0a19a54556a4a3f8eb4b4906">Added the <code>--incompatible_disallow_java_import_empty_jars</code> flag, which disallows empty <code>java_import.jars</code> attributes.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7f75df2d299e383f58e7a0f82fd0822c88776b5e">Added the <code>--multi_release_deploy_jars</code> flag, which causes <code>_deploy.jar</code> outputs of <code>java_binary</code> to be Multi-Release jar files.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fbb68e9bcbe8401690a513f086afeadc57adfdd6">Added the <code>com.google.devtools.build.buildjar.javac.enable_boot_classpath_cache</code> property, which disables the bootstrap classpath cache.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0f95c8a8a74d18823c3117d8f3370bc7301081b4">Added the <code>@AutoBazelRepository</code> annotation processor.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2217b13cae4110b0e2b8fe6a283a9b6dfbf150e8">Added the <code>add_exports</code> and <code>add_opens</code> attributes to <code>java_*</code> rules.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/79badc0bf7937e8443bbe9171d92aefcf1e90e6f">Added the <code>hermetic_srcs</code> and <code>lib_modules</code> attributes to <code>java_runtime</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/37d08ed18b6830e0eea81d7cdb7866c3535f9e47">Added the <code>classpath_resources</code> argument to <code>java_common.compile</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/80ca10bddc68af318efeef37975de0bfec204a68">Added the <code>resource_jars</code> argument to <code>java_common.compile</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4ff441b13db6b6f5d5d317881c6383f510709b19">Added the <code>--add_exports</code> and <code>--add_opens</code> options to <code>singlejar</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/341d7f3366ac15b375eb3f9a750382e2a034c9e1">Added the <code>--hermetic_java_home</code> option to <code>singlejar</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/276fb093b83c37d9c4d2b6df01c04700e7aa3346">Added the <code>--jdk_lib_modules</code> option to <code>singlejar</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f33ce3d8192953e425f613024ec04541ceb80f1b">Added the <code>--multi_release</code> option to <code>singlejar</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8b5ed8aac2b25180fbfac0ff27ebe3998a61209a">Added the <code>--output_jar_creator</code> option to <code>singlejar</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2930dd3ac20810730f2263fa9e319379f5d22720">Added a tag-based suppression mechanism for <code>java_import.deps</code> checking.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/acbb9e1de6c9f2cc99be4ff849e456d316da9db1">Coverage can now be collected for external targets.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d5559c16ac008b86345fbbade5d600181a2fce6f">The Java runtimes now have <code>target_compatible_with</code> set instead of <code>exec_compatible_with</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/a32a0fd0d6bf75c2c8c6af6281875e90908b82f6"><code>ijar</code>/<code>java_import</code> now preserve classes with <code>@kotlin.Metadata</code> annotations.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/756be22f6445d6052a0a9cce66fdb7f7b3a8f300">Hermetic packaged JDK modules now record file size in deploy JAR manifest <code>JDK-Lib-Modules-Size</code> attribute.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b64f734ffea7fa5d53cb1f0e62247a3ff0b74e0d"><code>TurbineTransitiveJar</code> attributes are now recognized in <code>ijar</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/17cfa015d73195f6fda7705a57702e36609b3175">The stub template now defaults to a UTF-8 locale.</a></li></ul><h3>Objective-C</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/68f29c67098cedbfaa3ef011eef4df661860ac36">Added support for Objective-C specific features to <code>cc_common.configure_features</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/540892d788727f414cc0cd3ea2ae4d4445914366"><code>objc_library</code> now requires <code>CcInfo</code> in its deps.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8a2b711a2700740575904682066dbe1e5c9f6d02">Removed the <code>ObjcProvider.direct_headers</code> attribute.</a></li></ul><h3>Python</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/9d0163002ca63f4cdbaff9420380d72e2a6e38b3">Added the <code>coverage_tool</code> attribute to <code>py_runtime</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/32364dc9194b71e5759546a0fd0013c44bf7109e">Added the <code>requires-darwin</code> execution requirement to macOS <code>py_test</code> targets.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d60ce2c7c86393638c77698c00c2168a7a936a53">Added <code>CurrentRepository()</code> to Python runfiles library.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c3425feeb3bc204923979773ae985dd2f3e24b9f">The stub now also considers <code>RUNFILES_DIR</code> when no runfiles directory can be found.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c33e44c29e6c4fe35331d0c3f7aad1e76d6318da">Reduced the number of imports used in the stub.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ecd4c900b61416609d99c76a4e2190a4d6d7b97f"><code>py_*.srcs_version=&quot;PY2&quot;</code> is now the the same as <code>&quot;PY2ONLY&quot;</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/40b95c32317f1739f14899ee5e4605c58e4836b2">Removed UNC path prefix on Windows-10.1607 or later.</a></li></ul><h2>Rules authoring</h2><p>Bazel&#x27;s extensibility is powered by the ability to write custom <a href="https://bazel.build/versions/6.0.0/extending/rules">rules</a>.
Most rules used in a project will be provided by open source rule sets,
but projects may also define rules themselves.
Bazel 6.0 includes numerous changes that make custom rules more performant,
easier to write,
or even expand what is possible to do with them.</p><h3>Aspects</h3><p><a href="https://bazel.build/versions/6.0.0/extending/aspects">Aspects</a> allow augmenting build dependency graphs with additional information and actions.
These changes expanded their capabilities:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/37710728712e00e8bd7145662668d72591204146">Added the <code>--aspects_parameters</code> flag, which allows passing parameters to command-line aspects.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/30fd508bf68c8bb9cf32839b71f79a9aa4bd069a">Added support for using <code>attr.bool()</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/14292d176cb85d1cf6e20f79fde0249b0fe6ba24">Added support for using <code>attr.int()</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7e3755d3bf1443a0f2a780bc8efff658c464c3a5">Added support for setting exec_compatible_with and exec_group on aspects.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b3e12bad9852a068ed8687d39e278441b52c910d">Aspects now inherit fragments from required aspects and from targets they are attached to.</a></li></ul><h3>Persistent workers</h3><p><a href="https://bazel.build/versions/6.0.0/remote/persistent">Persistent workers</a> improve build performance by sending multiple requests to long-running processes.
Here are some notable changes to persistent worker support:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/8e674324d18b715fd09c7fcfedd97be28caa525c">Added the <code>--experimental_total_worker_memory_limit_mb</code> flag, which sets a limit on total worker memory usage.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fb19a28db30c6937f0df4e143b2256e7e4743bd4">Added the <code>--experimental_worker_multiplex_sandboxing</code> flag, which controls whether to sandbox multiplex workers that support it.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/cb2cd9fd2b65311da927777c35939701add5b879">Added the <code>--experimental_worker_strict_flagfiles</code> flag, which checks if the worker argument list conforms to the spec.</a></li></ul><h3>Starlark</h3><p><a href="https://youtu.be/6_RrNxuny6Y?t=232">As mentioned at Bazelcon</a>,
progress is being made on migrating natives rules out of Bazel and into standalone Starlark rules.
In the Bazel 6.0 release progress was made on the Android, C++, Java, Objective-C, Protobuf, and Python rules.</p><p>In addition to changes directly needed for Starlarkification,
for which there were many and I&#x27;m not going to list them here,
the Starlark language itself received performance and feature improvements:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/54f11fe4189edfed92c820b8feaeb8c046d23a2a">Added the <code>--incompatible_disallow_symlink_file_to_dir</code> flag, which disallows <code>ctx.actions.symlink</code> from symlinking a file into a directory.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/64491051223cdf28e7bf015baa131c7d30b2e2d8">Added the <code>--incompatible_remove_rule_name_parameter</code> flag, which disables the <code>rule.name</code> parameter.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b615d0df882d1564dc1d62d40cf50490a9bc3738">Added the <code>--experimental_debug_selects_always_succeed</code> flag, which causes <code>select</code> functions with no matching clause to return an empty value, instead of failing.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e82beda0257958892ff8a15f3eae5c8f2f509118">Added the <code>--experimental_get_fixed_configured_action_env</code> flag, which causes <code>action.env</code> to return fixed environment variables specified through features configuration.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/cc74b11bc1a0a0150abd37e82f913c4b95eb16bb">Added the <code>--experimental_lazy_template_expansion</code> flag, which adds support for lazily computed substitutions to <code>ctx.actions.expand_template()</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b1deea40aeb81f4c7e23594e0166a6a653a75b65">Added <code>dict</code> union operators (<code>|</code> and <code>|=</code>).</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0a13dd69aa27ec643dd44637712b70c24b924c49">Added the <code>coverage_support_files</code> and <code>coverage_environment</code> parameters to <code>coverage_common.instrumented_files_info</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fc13ba271f138c804869d0f99d751e25518b5326">Added the <code>init</code> parameter to <code>provider()</code>, which allows for performing pre-processing and validation of field values.</a></li><li><a href="https://bazel.build/versions/6.0.0/concepts/visibility#load-visibility">Added <code>load</code> visibility.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/dfa9c62abda21dcf187df9d2a2c00ecefda223e0"><code>dict()</code> and <code>dict.update()</code> now accept arbitrary maps, not just <code>dict</code>s.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/40a6cb093e9a9902a35943b97e2ae6b362a5f005"><code>testing.ExecutionInfo</code> can now be used as a provider key.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/aaf87f4ef3e19cbf1e5ab28f50cd8fb90dfd115e">The <code>symlinks</code> and <code>root_symlinks</code> parameters of the <code>ctx.runfiles</code> function now accept <code>depset</code>s.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f717d6a7484d1c7d624b0f39822e6fd61cfe7ce6">Starlark flags no longer warn for incompatible commands.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5e80514244fd855b986790f2d981c2ed614e6940">Moved <code>analysis_test</code> to <code>testing.analysis_test</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d0fde13454a71355b7695922c2179d8756b4632f">The <code>\a</code>, <code>\b</code>, <code>\f</code>, and <code>\v</code> escape sequences are now supported.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3bda5c945caff86475a3da9bd5875e8ff94eab71"><code>print()</code> statements are now emitted only if the line of code is executed.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/cf99f8476df4110ac749deda15340ebde74a2116"><code>native.existing_rule/s()</code> with <code>--incompatible_existing_rules_immutable_view</code> can now be encoded as json and passed as <code>**kwargs</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2f7d965287ddfa056b169cf16144d05f78d03c7d">Fixed incremental builds that transition on flags when the default value of those flags changed.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9f2542f91e99b40de65506c8f4768ec0003a4e5d">Fixed preserving the relative order of explicit and expanded Starlark flags.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d834905a158d253e837597175f4905e23266d0c7">Fixed <code>ctx.actions.symlink(target_path = ...)</code> incorrectly making paths absolute.</a></li></ul><h2>Misc</h2><p>There were a handful of changes that I couldn&#x27;t find a nice home for in the sections above,
but I still felt were important or interesting enough to call attention to:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/52d1d4ae9bfee7379093d46258fa3a56e4d69e61">Added the <code>--experimental_output_directory_naming_scheme</code> flag, which modifies the way the output directory is calculated.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/65388c330141736d505cec50b4cc02a5d65ed5de">Added the <code>--incompatible_check_testonly_for_output_files</code> flag, which checks <code>testonly</code> for prerequisite targets that are output files by looking up <code>testonly</code> of the generating rule.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1473988aa1e9b92c42fcbad4e155f247f1983d13">Added the <code>--incompatible_fix_package_group_reporoot_syntax</code> flag, which changes the meaning of <code>&quot;//...&quot;</code> to refer to all packages in the current repository instead of all packages in any repository.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1473988aa1e9b92c42fcbad4e155f247f1983d13">Added the <code>--incompatible_package_group_has_public_syntax</code> flag, which allows writing <code>&quot;public&quot;</code> or <code>&quot;private&quot;</code> in the <code>package_group.packages</code> attribute to refer to all packages or no packages respectively.</a></li><li><a href="https://github.com/bazelbuild/bazel/issues/16196">Added the <code>--incompatible_unambiguous_label_stringification</code> flag, which enables unambiguous stringification of <code>Label</code>s.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b82a8e9124a046f1a530ec4ba54e9c90383f82e9">Added the <code>bazel leaf</code> command.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/507d85fd6dcf276add3b46158eb5bf36a4179db5"><code>bazel config</code> now shows output path prefixes.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/830d4649b42451161adbdf907d9935e648f17d8c"><code>BAZEL_TEST=1</code> is now set as a test environment variable.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/60e9bf339f319d16b738619a05b1dd5d122ef852">Progress updates no longer have their delay increased when there is no cursor control.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7cc786ab51dacc7e2eade2ab9c2b440bf9d29972">Fixed native rules not merging default outputs into the transitive runfiles.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3badca3f7e539e4b56fd5c502233c03b9934b813">Fixed <code>--nobuild_runfiles_links</code> when used with <code>--run_under</code></a></li></ul><h2>Summary</h2><p>As you can see,
Bazel 6.0 was another <em>massive</em> release.
Thankfully,
through the <a href="https://bazel.build/versions/6.0.0/release/versioning#rolling-releases">rolling releases</a> process,
people were able to test,
or even actively depend on,
these changes well before the first 6.0 release candidate was cut.</p><p>I expect <a href="https://github.com/bazelbuild/bazel/milestone/46">Bazel 6.1</a> to be a fast follow with some changes that missed the final release candidate.
Work on Bazel 7.0 is well underway as well,
and I look forward to summarizing its changes next year.</p>]]></content>
        <author>
            <name>Brentley Jones</name>
            <uri>https://brentleyjones.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcoming Jim Hollenbach]]></title>
        <id>welcoming-jim-hollenbach</id>
        <link href="https://www.buildbuddy.io/blog/welcoming-jim-hollenbach"/>
        <updated>2022-12-06T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[To fulfill our mission of bringing the world's best developer tools to every company, the most imporant thing we can do is hire incredible Software Engineers with experience building and scaling great software. That's why we're excited to share that Jim Hollenbach is joining BuildBuddy's engineering team!]]></summary>
        <content type="html"><![CDATA[<p>To fulfill our mission of bringing the world&#x27;s best developer tools to every company, the most imporant thing we can do is hire incredible Software Engineers with experience building and scaling great software. That&#x27;s why we&#x27;re excited to share that <a href="https://www.linkedin.com/in/jim-hollenbach-5a49659/"><strong>Jim Hollenbach</strong></a> is joining BuildBuddy&#x27;s engineering team!</p><p>Jim joins us from Google, where he was a Staff Software Engineer. He spent over 10 years at Google working across Search, Maps, and more.</p><p><img src="../static/img/blog/welcome_jim.png"/></p><p>We look forward to working alongside Jim to build the future of developer tools.</p><p>Welcome to BuildBuddy, Jim!</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/jim-hollenbach-5a49659/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bazelcon 2022 Recap]]></title>
        <id>bazelcon</id>
        <link href="https://www.buildbuddy.io/blog/bazelcon"/>
        <updated>2022-11-29T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[Earlier this month we wrapped up the 2022 Bazelcon conference in New York City. The conference featured talks by many prominent Bazel users including Lyft, Spotify, Tesla, Slack, Stripe, Tinder, Tecton, Coinbase, Uber, more.]]></summary>
        <content type="html"><![CDATA[<p>Earlier this month we wrapped up the 2022 Bazelcon conference in New York City. The conference featured talks by many prominent Bazel users including <a href="https://youtu.be/e2ID05dpJzo">Lyft</a>, <a href="https://youtu.be/k4H20WxhbsA">Spotify</a>, <a href="https://youtu.be/ol5hwjr48Q4">Tesla</a>, <a href="https://youtu.be/wy3Q38VJ5uQ">Slack</a>, <a href="https://youtu.be/kaKpp10z5ws">Stripe</a>, <a href="https://youtu.be/IoEMMLjKFtM">Tinder</a>, <a href="https://youtu.be/Bjaiu8tZZhs">Tecton</a>, <a href="https://youtu.be/2BgRXmX1X-4">Coinbase</a>, <a href="https://youtu.be/a1jXzx3884g">Uber</a>, more.</p><p>Here&#x27;s are some of the highlights from the conference:</p><ul><li>We gave a <a href="https://youtu.be/MIXy4zGtniE">talk previewing</a> the upcoming <strong>BuildBuddy 3.0</strong> release</li><li><strong>Six companies</strong> that are <a href="https://buildbuddy.io/">BuildBuddy Enterprise</a> customers presented on the main stage</li><li>We co-hosted a <a href="https://twitter.com/bazelbuild/status/1592624463975448576">Bazelcon happy hour</a> with <strong>Google Cloud</strong> that had over <strong>200 attendees</strong></li><li>We <a href="https://youtu.be/B__SHnz3K3c">shared</a> what we&#x27;ve been working on over the past year with <a href="https://github.com/buildbuddy-io/rules_xcodeproj">rules_xcodeproj</a></li><li>We gave away <strong>370 BuildBuddy shirts</strong> and <strong>1600 BuildBuddy stickers</strong></li><li>We finally got to meet so many of incredible customers &amp; open source contributors in person!</li></ul><p>Tweets, talks, and pictures from the event below!</p><div tweetId="1593290390953955328" options="[object Object]"></div><div tweetId="1593052641310875648" options="[object Object]"></div><h2>Our talks</h2><h3>BuildBuddy 3.0</h3><p>By Siggi Simonarson</p><p><a href="https://www.youtube.com/watch?v=MIXy4zGtniE"><img src="../static/img/blog/buildbuddy-3-talk.jpg"/></a></p><h3>Integrating Bazel with Xcode using rules_xcodeproj</h3><p>By Brentley Jones</p><p><a href="https://www.youtube.com/watch?v=B__SHnz3K3c"><img src="../static/img/blog/xcodeproj-talk.jpg"/></a></p><h2>BuildBuddy shout-outs</h2><h3>Autopilot: Developing Software for Cars &amp; Robots</h3><p>By Gabe Gheorghian and Romi Phadte @ Tesla</p><p><a href="https://youtu.be/ol5hwjr48Q4?t=1023"><img src="../static/img/blog/tesla-talk.jpg"/></a></p><h3>Insights from Two iOS Bazel Migrations</h3><p>By Erik Kerber @ Slack</p><p><a href="https://youtu.be/wy3Q38VJ5uQ?t=1626"><img src="../static/img/blog/slack-talk.jpg"/></a></p><p>See you all next year!</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How We Use ClickHouse to Analyze Trends Across Millions of Builds]]></title>
        <id>clickhouse-build-trends</id>
        <link href="https://www.buildbuddy.io/blog/clickhouse-build-trends"/>
        <updated>2022-11-22T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[When you use Buildbuddy with Bazel to build and test software, Buildbuddy]]></summary>
        <content type="html"><![CDATA[<p>When you use Buildbuddy with Bazel to build and test software, Buildbuddy
captures information about each Bazel invocation, such as number of builds, build
duration, remote cache performance, and more. Buildbuddy has
a <a href="https://app.buildbuddy.io/trends/">Trends</a> page to visualize trends in this
data over time.</p><p><img src="/img/blog/trends-2.png"/></p><p>The trends page allows you to see how improvements you are making to your builds
affects your average build duration and other stats. It also exposes areas that
might need improving. For example, if you see the cache hit rate go down over
time, your build might have some non-deterministic build actions that could be
improved, or some newly introduced dependencies that result in more frequent
cache invalidations.</p><p>When we first created the Trends page, we used MySQL queries to aggregate
build stats and generate the data we wanted to display. For a time this worked
well, but we quickly ran into performance issues for customers that had very
large numbers of builds. We were able to temporarily improve performance by
adding various indices, and though this helped to reduce the number of rows
read, it was not sufficient. Some customers do millions of builds monthly, and the
Trends page (which can look back up to a year) for these customers was taking
more than 20 <em>minutes</em> to load.</p><p>The queries behind the trends page require aggregation of multiple columns, such
as cache hits and cache misses. A traditional row-based database like MySQL is
not always ideal for such a use case. In row-based databases, data is stored row
by row. When aggregating columns, more I/O seeks are required than
a column-based database, which stores the data of each column in contiguous
blocks. Moreover, column-based databases have a higher compression rate because
consecutive values of the same column are of the same type and may repeat.</p><p><img src="/img/blog/row-column-datastore.png"/></p><p>With a row-based store, we can see from this diagram that computing a sum of
cache hit count would require us to load both block 1 and block 2. With
a column-based store, all the cache hits data are stored in the same block.</p><p>Therefore, we felt that using ClickHouse, a column-based database, would improve
the performance of required queries for the trends page. We validated
ClickHouse’s performance against our use case: it took ClickHouse 0.317 seconds
to process 1.5 million rows and calculate the stats. The same query took MySQL
about 24 minutes.</p><p>One of our goals for data migration is to make sure the data is accurate. We
added monitoring and compared data between MySQL and ClickHouse after we enabled
double writing in production. One source of inconsistency was that data was
inserted into ClickHouse both by the backfill script and production servers.
Different to a traditional database, ClickHouse’s
<a href="https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/replacingmergetree/">ReplacingMergeTree</a>
engine only deduplicates data in the background at an indeterminate time. As
a result, we needed to manually run the
<a href="https://clickhouse.com/docs/en/sql-reference/statements/optimize/">OPTIMIZE</a>
operation to force ClickHouse to deduplicate data after the backfill was done.
After we were confident in the data consistency, we finally enabled the Trends
page to read from ClickHouse.</p><h2>What&#x27;s next</h2><p>We are excited how ClickHouse unlocks more possibilities for us to provide
analytical insights into builds, targets, tests and remote execution. For
example, we want to add graphs that show how remote actions are spending most of
their time. These insights can be used to guide remote execution performance
optimizations.</p><p>We would love to hear your feedback about what stats and graphs you are interested in seeing.
Join our <a href="https://slack.buildbuddy.io">Slack channel</a> or email us at
<a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Lulu Zhang</name>
            <uri>https://www.linkedin.com/in/luluzhang66</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcoming Iain Macdonald]]></title>
        <id>welcoming-iain-macdonald</id>
        <link href="https://www.buildbuddy.io/blog/welcoming-iain-macdonald"/>
        <updated>2022-10-26T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[To fulfill our mission of bringing the world's best developer tools to every company, we're intensely focused on hiring outstanding Software Engineers. That's why we're excited to share today that Iain Macdonald is joining BuildBuddy's engineering team!]]></summary>
        <content type="html"><![CDATA[<p>To fulfill our mission of bringing the world&#x27;s best developer tools to every company, we&#x27;re intensely focused on hiring outstanding Software Engineers. That&#x27;s why we&#x27;re excited to share today that <a href="https://www.linkedin.com/in/macdonaldi/"><strong>Iain Macdonald</strong></a> is joining BuildBuddy&#x27;s engineering team!</p><p>Iain joins us from Google, where he spent over 10 years as an engineer working across the company from Gmail to Google Maps.</p><p><img src="../static/img/blog/welcome_iain.png"/></p><p>We look forward to working alongside Iain to build the future of developer tools.</p><p>Welcome to BuildBuddy, Iain!</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcoming Maggie Lou]]></title>
        <id>welcoming-maggie-lou</id>
        <link href="https://www.buildbuddy.io/blog/welcoming-maggie-lou"/>
        <updated>2022-07-11T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[To fulfill our mission of bringing the world's best developer tools to every company, we're expanding our team to keep up with our evergrowing customer base. That's why we're excited to share today that Maggie Lou is joining BuildBuddy's engineering team!]]></summary>
        <content type="html"><![CDATA[<p>To fulfill our mission of bringing the world&#x27;s best developer tools to every company, we&#x27;re expanding our team to keep up with our evergrowing customer base. That&#x27;s why we&#x27;re excited to share today that <a href="https://www.linkedin.com/in/maggie-lou-4a3bb110a/"><strong>Maggie Lou</strong></a> is joining BuildBuddy&#x27;s engineering team!</p><p>Maggie joins us from Thumbtack.</p><p><img src="../static/img/blog/welcome_maggie.png"/></p><p>We look forward to working alongside Maggie to build the future of developer tools.</p><p>Welcome to BuildBuddy, Maggie!</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bazel Remote Cache Debugging]]></title>
        <id>bazel-remote-cache-debugging</id>
        <link href="https://www.buildbuddy.io/blog/bazel-remote-cache-debugging"/>
        <updated>2022-06-07T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[All about the new cache requests card and how to use it.]]></summary>
        <content type="html"><![CDATA[<p>Using a remote cache is a great way to speed up your Bazel builds! But by
default, Bazel uploads almost everything to the remote cache.</p><p>If your network is slow and your build artifacts are very large (like a
docker image) this can lead to poor performance.</p><p>To address this, and make it easier to fix, we built the new cache
requests card.</p><p>In this post we&#x27;ll explore what insights this card can give you into your
builds, as well as some fun details about how the card works under the
hood.</p><h2>New insights</h2><p>The cache requests card lets you answer some interesting questions about
your build which were not easily answerable before. Here are a few:</p><p><em><strong>My build seems to have uploaded a lot of data <!-- -->—<!-- --> which targets
uploaded the largest artifacts?</strong></em></p><p>To answer this question, select &quot;Sort by <strong>Size</strong>&quot; and &quot;Show <strong>All</strong>&quot;.
Then, select &quot;Group by <strong>None</strong>&quot;. This will show the largest artifacts
first, with target names displayed in the leftmost column.</p><p><img src="/img/blog/cache-requests-card.png"/></p><p>We can see in this screenshot that the largest cache transfer was a
download of an artifact from the external repository
<code>com_github_tuist_xcodeproj</code>. To see the full target and action name,
hover over the row.</p><p><em><strong>I see some file references in the build event stream which aren&#x27;t
associated with an action. What are these files?</strong></em></p><p>To answer this question, select &quot;Show <strong>All</strong>&quot; and search for
<strong>bes-upload</strong>. You&#x27;ll see all the files which were uploaded by Bazel
and not associated with an action, including the timing profile.</p><p><img src="/img/blog/cache-requests-card-bes-upload.png"/></p><p>The build in this screenshot shows that a large artifact (285.9 MB) was
uploaded at the very end of the build, so it most likely was blocking the
build&#x27;s completion. We can see the full artifact path by hovering over the
row.</p><p><em><strong>I expected my build to be fully-cached, but it was not. Was there a
single action whose inputs or environment variables changed unexpectedly,
thus triggering all its dependent targets to be rebuilt?</strong></em></p><p>To answer this question, make sure you are sorted by <strong>start time</strong> in
ascending order, and take a look at the actions with the earliest
timestamps. The earliest action is most likely the root cause of the
change from the previous build.</p><p><img src="/img/blog/cache-requests-card-incremental-rebuild.png"/></p><p>Before the build in this screenshot, a file in the
<code>priority_task_scheduler</code> target was edited, which we can see triggered a
cascade of action executions that transitively depended on
<code>priority_task_scheduler</code>.</p><h2>How it works</h2><p>Implementing the cache requests card required solving a few interesting
problems.</p><p>The total size of the request metadata stored for each build is not
extremely large <!-- -->—<!-- --> just tens of megabytes for builds with hundreds of
thousands of cache requests <!-- -->—<!-- --> but we serve a high volume of
requests, and we don&#x27;t want to negatively impact cache performance just to
store this metadata for each request.</p><p>The simplest solution to implement would be to do a blocking write to a
MySQL table for each cache request. This would also be pretty convenient
for querying the data however we like. However, this would place far too
much load on the database and add way too much latency to each cache
request.</p><p>So, instead of using MySQL, we used Redis as an intermediate storage
medium while the invocation is in progress. Redis can handle a much higher
volume of writes than MySQL because it only stores values in memory and it
has a much simpler key-value storage model.</p><p>We can&#x27;t just store this data in Redis and call it a day, though. Firstly,
Redis does not give us long-term persistence, and it would be nice to be
able to keep this data around even for older invocations. To get long-term
persistence, we read all of the data from Redis and then serialize it into
a <a href="https://developers.google.com/protocol-buffers">proto</a>. We store this
proto into a &quot;blobstore,&quot; which is just a generic storage interface backed
by a local disk, Google Cloud Storage, Amazon S3, etc.</p><p>Secondly, even with the amazing performance of Redis, we can&#x27;t just issue
a single write request for every cache request. Doing a separate Redis
write for every request places a large amount of CPU load on Redis, since
it needs to do a <code>read()</code> and <code>write()</code> system call for each write.
(We learned this the hard way.)</p><p>To address this, we used Redis
<a href="https://redis.io/docs/manual/pipelining/"><strong>pipelining</strong></a>. Instead of
issuing Redis commands directly, we add each command to a pipeline, and
have a separate background job that periodically flushes the pipeline.
Adding the command to the pipeline is just a matter of appending to an
in-memory buffer, which takes just nanoseconds, so it doesn&#x27;t impact cache
performance to a significant degree.</p><p><img src="/img/blog/cache-requests-design-1.png"/></p><p>Once an invocation is complete, we kick off a job to read all of the
requests from Redis and then store it as a single blob in blobstore.</p><p><img src="/img/blog/cache-requests-design-2.png"/></p><p>To read back this data for the UI, all we have to do is load this whole
blob into memory and then apply any client-side sorting and filtering.
These blobs are small enough that we easily load the full blob into memory
on the server <!-- -->—<!-- --> the blob is too big to be loaded in a browser,
though, so we do use a relatively small page size.</p><p><img src="/img/blog/cache-requests-design-3.png"/></p><h2>What&#x27;s next</h2><p>We hope that you find the new cache requests card useful and that you
enjoyed reading about how it works! We would love to hear your feedback,
which will help inform how we design the next iteration of our cache
debugging tools to help make your builds even faster and more scalable.
Join our <a href="https://slack.buildbuddy.io">Slack channel</a> or email us at
<a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Brandon Duffany</name>
            <uri>https://github.com/bduffany</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Distributed Scheduling for Faster Builds]]></title>
        <id>distributed-scheduling-for-faster-builds</id>
        <link href="https://www.buildbuddy.io/blog/distributed-scheduling-for-faster-builds"/>
        <updated>2022-04-07T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[The distributed scheduler that powers BuildBuddy remote execution]]></summary>
        <content type="html"><![CDATA[<p>Let&#x27;s start with &quot;what&#x27;s BuildBuddy&quot; for the kids in back. In short, we provide a UI, distributed cache, and remote execution platform for your Bazel builds. That means we securely compile your code, cache the artifacts, and help you visualize the results. We make it possible to build projects like Tensorflow from your laptop in under 5 minutes instead of 90 minutes.</p><p>Obviously to do all this, we have to handle some thorny engineering challenges, one of which is scheduling remote executions. For that, we have a scheduler. The scheduler just matches actions (basically jobs) received by our API to remote workers that actually do the work. If you think of a full build of something like Tensorflow as a 10 course meal, a single action is like a recipe for a tiny part of that meal. To make it easier to visualize, here&#x27;s a real action from building BuildBuddy:</p><pre><code class="language-bash"># this action just uses gcc to compile zlib/infback.c into an object file, zlib/infback.o
/usr/bin/gcc -U_FORTIFY_SOURCE -fstack-protector -Wall -Wunused-but-set-parameter \
  -Wno-free-nonheap-object -fno-omit-frame-pointer -g0 -O2 -D_FORTIFY_SOURCE=1 \
  -DNDEBUG -ffunction-sections -fdata-sections -MD -MF \
  bazel-out/k8-opt-exec-34F00540/bin/external/zlib/_objs/zlib/infback.d \
  -frandom-seed=bazel-out/k8-opt-exec-34F00540/bin/external/zlib/_objs/zlib/infback.o \
  -iquote external/zlib -iquote bazel-out/k8-opt-exec-34F00540/bin/external/zlib \
  -isystem external/zlib/zlib/include \
  -isystem bazel-out/k8-opt-exec-34F00540/bin/external/zlib/zlib/include -g0 \
  -Wno-unused-variable -Wno-implicit-function-declaration -fno-canonical-system-headers \
  -Wno-builtin-macro-redefined -D__DATE__=&quot;redacted&quot; -D__TIMESTAMP__=&quot;redacted&quot; \
  -D__TIME__=&quot;redacted&quot; -c external/zlib/infback.c -o \
  bazel-out/k8-opt-exec-34F00540/bin/external/zlib/_objs/zlib/infback.o
</code></pre><p>And here&#x27;s another:</p><pre><code class="language-bash"># this action uses protobufjs to generate typescript bindings for a protobuf file
bazel-out/host/bin/external/npm/protobufjs/bin/pbts.sh
--out=bazel-out/k8-fastbuild/bin/proto/buildbuddy_service_ts_proto.d.ts
bazel-out/k8-fastbuild/bin/proto/buildbuddy_service_ts_proto.js
--bazel_node_modules_manifest=bazel-out/k8-fastbuild/bin/proto/__buildbuddy_service_ts_proto_pbts.module_mappings.json
</code></pre><p>So you get the idea, building a binary involves compiling and linking many different libraries etc and a single action is usually one of those commands. Great.</p><p>So let&#x27;s say we have hundreds or thousands of these actions hitting our API at a time, and a pool of remote workers ready to run them. Let&#x27;s get to it. If you&#x27;re like me, your first thought here is <em>load balancer</em>. I mean, why not? These are just requests that need to get to a pool of machines, and load balancers are a really common, well understood way to do this.</p><p>In the very early days, this is what we did. We ran nginx in front of a pool of executors. And it kind of worked! But the results were... lumpy. In a typical web application, most requests served by load balancers are pretty homogeneous. They are static file lookups or simple page actions that all usually take under a second to serve. But our requests were very heterogenous: the fastest ones were simple gcc compile commands that generated a single object file and could finish in 10s of milliseconds. The slowest ones were gigantic slow link statements that required every single object file and took 30+ seconds to link. Or even worse, test actions that ran a unit test binary and took 30+ minutes to run.</p><p>What happened is that the load balancer would assign tasks in a round robin fashion and put two large tasks on the same worker, while other workers were sitting there idle, and the build would take much longer than it should.</p><p>I should mention that I really wanted this to work, because I didn&#x27;t want to write a scheduler. It seemed complex and risky. I would much rather use something simple and well tested than build a custom critical piece of infrastructure like a scheduler. In fact I went through all kinds of machinations to avoid doing this, from using different load balancing techniques like least loaded or exponential weighted moving average (EWMA) to trying to split the work into multiple load balancer targets, to using the Kubernetes scheduler.</p><p>And in the end, nothing worked well. The core reason a load balancer was such a poor fit here is that it didn&#x27;t know the size of the requests it was routing. It seemed possible to give the load balancer some hints about this, but it would have meant writing our own load balancing algorithm, or relying on a very complex routing configuration. Neither option sounded appealing, and both negated my whole rationale for using a load balancer in the first place, namely that they are fast and easy.</p><p>So I went and did some reading about schedulers, and found this really lovely paper <a href="https://cs.stanford.edu/~matei/papers/2013/sosp_sparrow.pdf">https://cs.stanford.edu/~matei/papers/2013/sosp_sparrow.pdf</a> about a distributed scheduler called Sparrow. This paper is great because it&#x27;s short and clearly written, and it talks about some cool ideas. The biggest idea is the power of two choices.</p><p>:::note</p><p><a href="https://www.eecs.harvard.edu/~michaelm/postscripts/mythesis.pdf">The Power of Two Choices in Randomized Load Balancing</a></p><p>In a typical load balancer, some metrics are kept about how loaded a worker is based on how long it takes to serve a request, and then the load balancer uses those metrics to decide where to assign new requests. The metrics are stale though, being based on past requests, which leads to some non-optimal behavior. A better way to assign requests is just to pick two random workers and assign to the least loaded of the two. This leads to an exponential improvement in the maximum load.</p><p>:::</p><p>Sparrow modifies two-choices slightly, and also introduces the idea of Late-Binding. In many schedulers, each worker maintains a queue and the scheduler tries to assign work to the worker with the shortest queue. The problem with this, and one of the core reasons it doesn&#x27;t give good performance on our workloads, is that queue length is not a good indicator of how long a task will take. Late-binding solves this by enqueuing a task on multiple workers, and then the first worker to get to the task takes it. This effectively avoids the problems of huge single tasks blocking other work.</p><p>Another reason this paper is so great is because the authors actually implemented Sparrow, ported Apache Spark to use it, and then analyzed the results. Side note: I wish more papers were like this! So fun to read.</p><p>Sparrow is a <em>distributed</em> scheduling algorithm, so no single node holds the entire state of the world. This is really important for us at BuildBuddy because we want our infrastructure to be resilient. When an API server or backend worker restarts or goes down, for whatever reason, we don&#x27;t want it to impact customer builds.</p><p>So with this paper as a basis, I went and implemented Sparrow in Go, which was not nearly as hard as I&#x27;d made it out to be. It maybe took a few days, which was far less time than I&#x27;d spent trying to find alternative solutions. The lead author of the paper was even happy to help clarify things over email. And when I replaced our load balancer with it, the results were pretty much instantly far better than anything we&#x27;d had before. No longer were builds timing out because of unequal load distribution. Even better, due to the distributed nature of the algorithm, we could run our workers on cheap preemptible compute machines that are often restarted and not worry about losing tasks. (These machines are less than half the cost!)</p><p>We still use this scheduler in production today, and it&#x27;s working well for us. We&#x27;ve made some modifications to the way requests are routed, but fundamentally this algorithm is the same one in the paper, the same one powering all remote execution on BuildBuddy today.</p><p>If you want to learn more about BuildBuddy or try it, check out <a href="https://www.buildbuddy.io/docs/introduction/">our docs</a>. And if you enjoy this kind of problem solving and engineering work, <a href="https://www.buildbuddy.io/careers/">we’re hiring</a>!</p>]]></content>
        <author>
            <name>Tyler Williams</name>
            <uri>https://www.linkedin.com/in/tyler-williams-80480519b/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Meet rules_xcodeproj]]></title>
        <id>meet-rules_xcodeproj</id>
        <link href="https://www.buildbuddy.io/blog/meet-rules_xcodeproj"/>
        <updated>2022-04-05T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are happy to announce that today we are releasing the first version of rules_xcodeproj, version 0.1.0.]]></summary>
        <content type="html"><![CDATA[<p><a href="https://github.com/buildbuddy-io/rules_xcodeproj">rules_xcodeproj</a> is a Bazel ruleset that can be used to
generate Xcode projects from targets in your workspace. We are happy to announce
that today we are releasing the first version of the ruleset,
<a href="https://github.com/buildbuddy-io/rules_xcodeproj/releases/tag/0.1.0">version 0.1.0</a>.</p><p align="center"><img src="/img/blog/rules_xcodeproj.png" height="256"/></p><p>There are already other tools out there that allow you to integrate Xcode with
Bazel. So you may be wondering why we decided to create another one. The core
reason is there wasn&#x27;t one tool that satisfied all of these requirements:</p><ul><li>Fully supports all of Xcode&#x27;s features<ul><li>Indexing (i.e. autocomplete, syntax highlighting, jump to definition)</li><li>Debugging</li><li>Inline warnings and errors</li><li>Fix-its</li><li>Tests</li><li>SwiftUI Previews</li></ul></li><li>Supports building with Xcode (<em>not</em> Bazel)<ul><li>Useful for testing new Xcode features before Bazel and/or
rules_apple/rules_swift supports it</li><li>An option if you don&#x27;t want developers to build with Bazel quite yet</li></ul></li><li>Supports building with Bazel, in Xcode<ul><li>While still fully supporting all of Xcode&#x27;s features</li><li>Without needing an XCBBuildService proxy</li></ul></li><li>Supports all of the Core C/C++/Obj-C, rules_apple, and rules_swift rules</li><li>Can be extended to support custom rules if needed</li><li>Supports target discovery and focused projects<ul><li>Target discovery means it can use a query system to find related targets,
such as tests, without having to manually list them all</li><li>Focused projects allow Xcode to have only a portion of your build graph
included in it, making Xcode perform better for large projects</li></ul></li><li>Produces Xcode projects that look and feel like normal Xcode projects</li></ul><p>We&#x27;ve been working on rules_xcodeproj for two months, and while it doesn&#x27;t
yet support all of the above, we have designs and a roadmap to cover all of
those requirements. Depending on the rules your project uses, or the attributes
of those rules, you should be able to generate an Xcode project that builds with
Xcode today, using version 0.1.0.</p><p>If you run into any problems with rules_xcodeproj, please check if
<a href="https://github.com/buildbuddy-io/rules_xcodeproj/issues">another issue already exists</a> and comment on it, and if not,
<a href="https://github.com/buildbuddy-io/rules_xcodeproj/issues/new/choose">file an issue</a>! You can also email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a>
with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Brentley Jones</name>
            <uri>https://brentleyjones.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Bazel's Remote Caching and Remote Execution Explained]]></title>
        <id>bazels-remote-caching-and-remote-execution-explained</id>
        <link href="https://www.buildbuddy.io/blog/bazels-remote-caching-and-remote-execution-explained"/>
        <updated>2022-03-16T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[A nuts and bolts (or rather actions and spawns 😄) overview of Bazel's remote caching and remote execution capabilities.]]></summary>
        <content type="html"><![CDATA[<p>Bazel&#x27;s famous remote caching and remote execution capabilities can be a game changer,
but if you&#x27;re not familiar with how they work,
they can be a bit of a mystery.</p><p>Well, don&#x27;t worry.
I&#x27;m here with to go over the fundamentals of remote caching and remote execution,
with a nuts and bolts
(or rather actions and spawns 😄)
overview of Bazel&#x27;s remote capabilities.</p><h2>Actions</h2><p>Each <a href="https://docs.bazel.build/versions/5.0.0/glossary.html#rule">rule target</a> in the <a href="https://docs.bazel.build/versions/5.0.0/glossary.html#build-graph">build graph</a> of a requested build produces zero or more <a href="https://docs.bazel.build/versions/5.0.0/glossary.html#action">actions</a> during the <a href="https://docs.bazel.build/versions/5.0.0/glossary.html#analysis-phase">analysis phase</a>.
These actions form an <a href="https://docs.bazel.build/versions/5.0.0/glossary.html#action-graph">action graph</a>,
representing all the actions that need to be performed during the <a href="https://docs.bazel.build/versions/5.0.0/glossary.html#execution-phase">execution phase</a>.</p><p><img src="../static/img/blog/action-graph.svg"/></p><p>During the execution phase the action graph is traversed.
For each action,
Bazel determines if it has to be executed,
either because the <a href="https://github.com/bazelbuild/bazel/blob/5.0.0/src/main/java/com/google/devtools/build/lib/actions/ActionResult.java#L26-L28">action result</a> doesn&#x27;t exist in the output base&#x27;s <a href="https://docs.bazel.build/versions/5.0.0/glossary.html#action-cache">action cache</a>,
or because the output in the <a href="https://docs.bazel.build/versions/5.0.0/glossary.html#output-base">output base</a> doesn&#x27;t match the output listed in the action result.</p><h2>Spawns</h2><p>If Bazel has to execute an action,
it creates a <a href="https://github.com/bazelbuild/bazel/blob/5.0.0/src/main/java/com/google/devtools/build/lib/actions/Spawn.java#L25-L30">spawn</a>,
which encodes all the information needed to be able to execute the action,
including the spawn&#x27;s <a href="https://github.com/bazelbuild/bazel/blob/5.0.0/src/main/java/com/google/devtools/build/lib/actions/SpawnStrategy.java#L18-L28">&quot;strategy&quot;</a><sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>,
which,
among other things,
determines if/how the spawn should utilize remote caching or remote execution.</p><p>A spawn&#x27;s strategy will dictate if Bazel has to do additional work
before,
after,
or instead of executing an action locally.
For example,
if a spawn with the <code>remote-cache</code> strategy is executed,
Bazel may check if the action result exists in the external cache&#x27;s action cache,
and if it does,
it might download the listed outputs instead of executing the action.
I go over this in greater detail <a href="#remote-caching">later</a>.</p><p>After an action&#x27;s outputs are available in the output base,
either because they were downloaded or created locally,
dependent actions in the action graph can spawn.</p><h3>Parallelism</h3><a id="local_cpu_resources-flag"></a><p>The number of actions that can be executed locally at once is limited by the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--local_cpu_resources"><code>--local_cpu_resources</code></a> flag.
The number of spawns that can be executed at once is limited by the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--jobs"><code>--jobs</code></a> flag.
Since a spawn&#x27;s execution can include more work,
or different work,
than an action&#x27;s local execution,
it can be beneficial to have a <code>--jobs</code> value that is larger than <code>--local_cpu_resources</code>.
When that is the case,
and a spawn tries to execute an action locally,
it might block waiting for CPU resources to free up.
This is where <a href="#remote-execution">remote execution</a> can be beneficial.</p><h2>Remote caching</h2><p>To prevent confusion over Bazel&#x27;s concept of a <a href="https://docs.bazel.build/versions/5.0.0/remote-caching.html">&quot;remote cache&quot;</a>,
which can mean either a disk cache which is local to the machine,
or a remote cache which uses networking protocols and is probably not local to the machine,
I&#x27;m going to instead refer to both of these cache types as an &quot;external cache&quot;,
as it&#x27;s external to the output base.</p><p>When using an external cache,
Bazel will augment it&#x27;s output base with the action cache (AC) and content-addressable storage (CAS) of the external cache.
This means if an action result for an action that Bazel wants to execute isn&#x27;t in the output base&#x27;s action cache,
Bazel can check if the AC has it.
The same is true for the action&#x27;s outputs;
if the output base doesn&#x27;t have the expected output,
then Bazel can check if the CAS has it.</p><h3><code>remote-cache</code></h3><p>Bazel achieves this behavior with the <code>remote-cache</code> spawn strategy,
which is used alongside a local strategy (e.g. <code>sandbox</code>, <code>worker</code>, <code>local</code>, etc.).</p><p>A <code>remote-cache</code> spawn has the following steps:</p><ul><li>If the action&#x27;s action result isn&#x27;t in the output base&#x27;s action cache,
try to retrieve it from the AC
(<a href="https://github.com/bazelbuild/remote-apis/blob/3e816456ee28f01ab2e0abf72306c1f340c7b229/build/bazel/remote/execution/v2/remote_execution.proto#L145-L159"><code>ActionCache.GetActionResult</code></a>)<sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup></li><li>If the action result was retrieved from either cache...<ul><li>And the action&#x27;s outputs are in the output base,
the spawn is done</li><li>Otherwise,
try to retrieve it from the CAS
(<a href="https://github.com/googleapis/googleapis/blob/885183fcec1a9b3a812055c209fa61f391c9042c/google/bytestream/bytestream.proto#L50-L53"><code>ByteStream.Read</code></a>)</li></ul></li><li>If the outputs were retrieved,
the spawn is done</li><li>Otherwise,
the action is executed locally</li><li>If the action completes successfully,
the action&#x27;s outputs are uploaded to the CAS
(<a href="https://github.com/googleapis/googleapis/blob/885183fcec1a9b3a812055c209fa61f391c9042c/google/bytestream/bytestream.proto#L55-L77"><code>ByteStream.Write</code></a>),
and its action result is uploaded to the AC
(<a href="https://github.com/bazelbuild/remote-apis/blob/3e816456ee28f01ab2e0abf72306c1f340c7b229/build/bazel/remote/execution/v2/remote_execution.proto#L161-L182"><code>ActionCache.UpdateActionResult</code></a>)<sup id="fnref-3"><a href="#fn-3" class="footnote-ref">3</a></sup><ul><li>If <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--experimental_remote_cache_async"><code>--experimental_remote_cache_async</code></a><sup id="fnref-4"><a href="#fn-4" class="footnote-ref">4</a></sup> is used,
then the spawn is done,
and dependent actions are able to spawn
while uploads continue in the background</li><li>Otherwise,
uploads have to finish before dependent actions are able to spawn</li></ul></li></ul><h3>Flags</h3><a id="disk_cache-flag"></a><a id="remote_cache-flag"></a><p>Setting the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--disk_cache"><code>--disk_cache</code></a> flag causes Bazel to use that directory on the filesystem as an external cache.
Setting the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_cache"><code>--remote_cache</code></a> flag causes Bazel to connect via HTTP(S), gRPC(S), or UNIX sockets to an external cache.
Setting both flags causes Bazel to use both the disk cache and the remote cache at the same time,
forming a &quot;combined cache&quot;.</p><p>A combined cache reads from and writes to both the disk and remote caches,
and is treated like a remote cache overall,
unless the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--incompatible_remote_results_ignore_disk"><code>--incompatible_remote_results_ignore_disk</code></a> flag is used.
If that flag is used,
the disk cache instead continues to behave like a local cache,
allowing it to return results even if <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_accept_cached"><code>--noremote_accept_cached</code></a> is set,
store results even if <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_upload_local_results"><code>--noremote_upload_local_results</code></a> is set,
and return/store results for <a href="https://docs.bazel.build/versions/5.0.0/be/common-definitions.html#common.tags"><code>no-remote-cache</code>/<code>no-remote</code></a> actions.<sup id="fnref-5"><a href="#fn-5" class="footnote-ref">5</a></sup></p><a id="experimental_guard_against_concurrent_changes-flag"></a><p>Setting the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--experimental_guard_against_concurrent_changes"><code>--experimental_guard_against_concurrent_changes</code></a> flag helps protect the external cache from being poisoned by changes to input files that happen during a build.
I highly recommend setting this flag if developers have an external cache enabled,
even if it&#x27;s only the disk cache.</p><a id="remote_instance_name-flag"></a><p>Most remote cache implementations will separate the AC,
and some will separate the CAS,
based on the value of the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_instance_name"><code>--remote_instance_name</code></a> flag.
This can used for numerous reasons,
such as project separation,
or a bandage for non-hermetic toolchains.</p><a id="remote_cache_header-flag"></a><p>The <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_cache_header"><code>--remote_cache_header</code></a> flag causes Bazel to send extra headers in requests to the external cache.
Multiple headers can be passed by specifying the flag multiple times.
Multiple values for the same name will be converted to a comma-separated list.
The <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_header"><code>--remote_header</code></a> flag can be used instead of setting both <code>--remote_cache_header</code> and <code>--remote_exec_header</code> to the same value.</p><h2>Remote execution</h2><p>Bazel is able to execute actions on a remote executor,
instead of executing them locally,
using a concept called <a href="https://docs.bazel.build/versions/5.0.0/remote-execution.html">&quot;remote execution&quot;</a>.
Since these actions don&#x27;t use local resources,
the number of actions that can be executed remotely in parallel is limited only by <code>--jobs</code> and the available remote resources,
not <code>--local_cpu_resources</code>.
If your builds are sufficiently parallel,
this can result in them completing faster.
The <a href="#parallelism">parallelism section</a> goes into more detail.</p><h3><code>remote</code></h3><p>Bazel achieves the behavior of executing actions remotely with the <code>remote</code> spawn strategy,
which includes most of the behavior of the <a href="#remote-cache"><code>remote-cache</code></a> strategy,
and is used instead of a local strategy (e.g. <code>sandbox</code>, <code>worker</code>, <code>local</code>, etc.).</p><p>A <code>remote</code> spawn has the following steps:</p><ul><li>If the action&#x27;s action result isn&#x27;t in the output base&#x27;s action cache,
try to retrieve it from the AC
(<a href="https://github.com/bazelbuild/remote-apis/blob/3e816456ee28f01ab2e0abf72306c1f340c7b229/build/bazel/remote/execution/v2/remote_execution.proto#L145-L159"><code>ActionCache.GetActionResult</code></a>)<sup id="fnref-6"><a href="#fn-6" class="footnote-ref">6</a></sup></li><li>If the action result was retrieved from either cache...<ul><li>And the action&#x27;s outputs are in the output base,
the spawn is done</li><li>Otherwise,
try to retrieve it from the CAS
(<a href="https://github.com/googleapis/googleapis/blob/885183fcec1a9b3a812055c209fa61f391c9042c/google/bytestream/bytestream.proto#L50-L53"><code>ByteStream.Read</code></a>)</li></ul></li><li>If the outputs were retrieved,
the spawn is done</li><li>Otherwise,
determine if any inputs to the action need to be uploaded
(<a href="https://github.com/bazelbuild/remote-apis/blob/3e816456ee28f01ab2e0abf72306c1f340c7b229/build/bazel/remote/execution/v2/remote_execution.proto#L318-L329"><code>ContentAddressableStorage.FindMissingBlobs</code></a>),
and upload them
(<a href="https://github.com/googleapis/googleapis/blob/885183fcec1a9b3a812055c209fa61f391c9042c/google/bytestream/bytestream.proto#L55-L77"><code>ByteStream.Write</code></a>)</li><li>Then execute the action remotely (<a href="https://github.com/bazelbuild/remote-apis/blob/3e816456ee28f01ab2e0abf72306c1f340c7b229/build/bazel/remote/execution/v2/remote_execution.proto#L45-L115"><code>Execution.Execute</code></a>)</li><li>If the action completes successfully,
download the action&#x27;s outputs from the CAS
(<a href="https://github.com/googleapis/googleapis/blob/885183fcec1a9b3a812055c209fa61f391c9042c/google/bytestream/bytestream.proto#L50-L53"><code>ByteStream.Read</code></a>)</li></ul><h3>Disk cache</h3><p><a href="https://github.com/bazelbuild/bazel/commit/cf57d036c2e1b608ca902267fbbdfeb7ee5aa166">Starting in Bazel 5.0</a>,
the disk cache
(or more specifically,
the combined cache)
can be used with remote execution.
Prior to Bazel 5.0,
if you also wanted to cache things locally,
you would have to setup a remote cache proxy sidecar.</p><h3>Dynamic execution</h3><p>Bazel supports a mode of remote execution called <a href="https://docs.bazel.build/versions/5.0.0/dynamic-execution.html">&quot;dynamic execution&quot;</a>,
in which local and remote execution of the same action are started in parallel,
using the output from the first branch that finishes,
and cancelling the other branch.</p><p>I wanted to mention it for completeness,
because when tuned properly it can result in faster builds than using either local execution or remote execution alone.
However,
it might not play well with <a href="#remote-build-without-the-bytes">Remote Build without the Bytes</a>,
as the local execution branches might need to download the outputs of previous remotely completed actions,
and if tuned improperly,
it can result in slower builds.</p><h3>Flags</h3><a id="remote_executor-flag"></a><p>Setting the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_executor"><code>--remote_executor</code></a> flag causes Bazel to connect via gRPC(S) or UNIX sockets to a remote executor.
If <code>--remote_cache</code> isn&#x27;t set,
it defaults to the value set for <code>--remote_executor</code>.
Most remote execution setups will have the remote cache and remote executor at the same endpoint.</p><p>In addition to how it <a href="#flags">affects the remote cache</a>,
the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_instance_name"><code>--remote_instance_name</code></a> flag might determine which remote execution cluster a build runs on.
Some actions might need to target a specific subset of executors,
possibly because they need certain hardware or software,
and they can do that with <a href="https://docs.bazel.build/versions/5.0.0/platforms-intro.html#common-platform-properties">platform properties</a>.</p><a id="remote_default_exec_properties-flag"></a><p>Platform properties can be set globally with the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_default_exec_properties"><code>--remote_default_exec_properties</code></a> flag,
but only if they aren&#x27;t set at the <a href="https://docs.bazel.build/versions/5.0.0/be/platform.html#platform.exec_properties">platform</a> or <a href="https://docs.bazel.build/versions/5.0.0/be/common-definitions.html#common.exec_properties">target</a> level.
The action result that is stored in an action cache includes the platform properties.
This is important to note, as it can affect action cache hit rates.
If you conditionally use remote execution,
and you use set platform properties,
you might want to have them set non-conditionally,
in order to be able to reuse the cached action results.
Some remote execution implementations allow setting global platform properties with <a href="#remote_exec_header-flag"><code>--remote_exec_header</code></a> flags,
as a way to prevent these cache misses.</p><a id="remote_timeout-flag"></a><p>The <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_timeout"><code>--remote_timeout</code></a> flag controls how long Bazel will wait for a remote cache operation to complete.
While the timeout doesn&#x27;t apply to the <code>Execution.Execute</code> call<sup id="fnref-7"><a href="#fn-7" class="footnote-ref">7</a></sup>,
using remote execution might involve uploading or downloading artifacts that a local build doesn&#x27;t,
and the default value for this flag
(60 seconds)
might not be long enough.</p><a id="remote_retires-flag"></a><p>The <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_retries"><code>--remote_retries</code></a> flag controls how many times Bazel will retry a remote operation on a transient error,
such as a timeout.
The flag defaults to <code>5</code>,
and depending on how you plan to use remote execution,
you might want to increase it to a much larger value.
Bazel uses an exponential backoff for retries,
but currently caps the delay at 5 seconds between calls.</p><a id="remote_exec_header-flag"></a><p>The <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_exec_header"><code>--remote_exec_header</code></a> flag causes Bazel to send extra headers in requests to the remote executor.
Multiple headers can be passed by specifying the flag multiple times.
Multiple values for the same name will be converted to a comma-separated list.
The <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_header"><code>--remote_header</code></a> flag can be used instead of setting both <code>--remote_cache_header</code> and <code>--remote_exec_header</code> to the same value.</p><h2>Remote Build without the Bytes</h2><p>For both remote caching and remote execution,
Bazel supports a feature called <a href="https://github.com/bazelbuild/bazel/issues/6862">&quot;Remote Build without the Bytes&quot;</a> (BwtB).
If enabled,
Bazel will only download the direct outputs of the targets specified
(<a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_download_toplevel"><code>--remote_download_toplevel</code></a>),
or the minimum needed to complete the build
(<a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_download_minimal"><code>--remote_download_minimal</code></a>).
This can result in greatly reduced network traffic,
which can also result in faster builds.</p><p>The feature isn&#x27;t without its flaws though.
Currently,
BwtB requires remote caches to <a href="https://github.com/bazelbuild/bazel/issues/8250">never evict outputs</a>,
can result in slower builds due to clumping of downloads,
doesn&#x27;t allow specifying that other outputs should be downloaded,
etc.
Though,
similar to <a href="#dynamic-scheduling">dynamic scheduling</a>,
if used properly BwtB can result in faster builds.
Just don&#x27;t apply it blindly.</p><h2>Bonus topic: Build Event Service</h2><p>Bazel can stream build results,
specifically the <a href="https://docs.bazel.build/versions/5.0.0/build-event-protocol.html">build event protocol</a> (BEP),
to a <a href="https://docs.bazel.build/versions/5.0.0/build-event-protocol.html#build-event-service">build event service</a> (BES).
Depending on the capabilities of the service,
this can have numerous benefits.</p><p>Here is a list of some benefits that various BES products (including BuildBuddy!) offer:</p><ul><li>Easily share build logs</li><li>See historical build data, including aggregations and trends</li><li>See details not exposed via the terminal
(e.g. all command-line flags used without having to use <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--announce_rc"><code>--announce_rc</code></a>,
or all environment variables set)</li><li>View action timing data (same as <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--experimental_generate_json_trace_profile"><code>--experimental_generate_json_trace_profile</code></a>)</li><li>Visualize queries</li><li>View error and test logs</li><li>Download action outputs</li><li>View remote cache stats</li><li>View related remote execution data<ul><li>List of actions executed</li><li>Individual action details
(e.g. command-line arguments,
environment variables,
platform properties,
timing data,
and downloading inputs and outputs)</li></ul></li></ul><h3>Flags</h3><a id="bes_backend-flag"></a><p>Setting the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--bes_backend"><code>--bes_backend</code></a> flag causes Bazel to connect via gRPC(S) to a BES backend and stream build results to it.
Setting the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--bes_results_url"><code>--bes_results_url</code></a> flag causes Bazel to output to the terminal a URL to the BES UI for the build underway.</p><p>When using BES,
Bazel will upload all files referenced in the BEP,
unless <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--experimental_build_event_upload_strategy"><code>--experimental_build_event_upload_strategy=local</code></a><sup id="fnref-8"><a href="#fn-8" class="footnote-ref">8</a></sup> is set.
Alternatively,
if you set <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--incompatible_remote_build_event_upload_respect_no_cache"><code>--incompatible_remote_build_event_upload_respect_no_cache</code></a><sup id="fnref-9"><a href="#fn-9" class="footnote-ref">9</a></sup>,
and have actions that are tagged with <a href="https://docs.bazel.build/versions/5.0.0/be/common-definitions.html#common.tags"><code>no-cache</code>/<code>no-remote-cache-upload</code>/<code>no-remote-cache</code>/<code>no-remote</code></a>,
then the output of those actions will still be excluded from upload.</p><a id="bes_timeout-flag"></a><p>The <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--bes_timeout"><code>--bes_timeout</code></a> flag controls how long Bazel will wait to finish uploading to BES after the build and tests have finished.
By default there is no timeout,
which might not be what you want.
If you leave the default,
you should consider changing the <a href="https://github.com/bazelbuild/bazel/blob/5.0.0/src/main/java/com/google/devtools/build/lib/buildeventservice/BuildEventServiceOptions.java#L145-L154"><code>--bes_upload_mode</code></a> flag,
which controls if Bazel should block the build for BES uploads
(the default),
or if it should finish the uploads in the background.</p><a id="bes_header-flag"></a><p>The <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--bes_header"><code>--bes_header</code></a><sup id="fnref-10"><a href="#fn-10" class="footnote-ref">10</a></sup> flag causes Bazel to send extra headers in requests to the BES backend.
It behaves the same way as <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_header"><code>--remote_header</code></a>.</p><h2>That&#x27;s it, for now</h2><p>Hopefully with this information at hand,
Bazel&#x27;s remote caching and remote execution capabilities are less of a mystery.</p><div class="footnotes"><hr/><ol><li id="fn-1">Julio wrote a great <a href="https://jmmv.dev/2019/12/bazel-strategies.html">summary on spawn strategies</a> that I highly recommend reading.<a href="#fnref-1" class="footnote-backref">↩</a></li><li id="fn-2">Except possibly if <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_accept_cached"><code>--noremote_accept_cached</code></a> is set.
See the <a href="#flags">flags section</a>.<a href="#fnref-2" class="footnote-backref">↩</a></li><li id="fn-3">Except if the action is tagged with <code>no-remote-cache-upload</code>,
or possibly if <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_upload_local_results"><code>--noremote_upload_local_results</code></a> is set.
See the <a href="#flags">flags section</a>.<a href="#fnref-3" class="footnote-backref">↩</a></li><li id="fn-4">Available in <a href="https://github.com/bazelbuild/bazel/commit/7f08b7841fcf4c7d7d09b69f9ec1f24969aba8a1">Bazel 5.0</a>.<a href="#fnref-4" class="footnote-backref">↩</a></li><li id="fn-5">Available in <a href="https://github.com/bazelbuild/bazel/commit/46c3f1711b90c648baf3d15d6df2890c8a12f67c">Bazel 5.0</a>.<a href="#fnref-5" class="footnote-backref">↩</a></li><li id="fn-6">Except if <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--remote_accept_cached"><code>--noremote_accept_cached</code></a> is set.<a href="#fnref-6" class="footnote-backref">↩</a></li><li id="fn-7">If the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--experimental_remote_execution_keepalive"><code>--experimental_remote_execution_keepalive</code></a> flag is set,
the <code>Execution.Execute</code> and <code>Execution.WaitExecute</code> calls take into account the values of <code>--remote_timeout</code> and <code>--remote_retries</code>,
but in a <a href="https://docs.google.com/document/d/1NgDPsCIwprDdqC1zj0qQrh5KGK2hQTSTux1DAvi4rSc">more complicated way</a>.
Even with that flag, the goal is for execution time to be unbounded,
as it can vary greatly depending on the action being executed.<a href="#fnref-7" class="footnote-backref">↩</a></li><li id="fn-8">A warning though:
setting <code>--experimental_build_event_upload_strategy=local</code> will prevent the uploading of some nice things,
such as the timing profile,
or test logs.<a href="#fnref-8" class="footnote-backref">↩</a></li><li id="fn-9">Available in <a href="https://github.com/bazelbuild/bazel/commit/bfc24139d93f8643686d91596ba347df2e01966a">Bazel 5.0</a>.<a href="#fnref-9" class="footnote-backref">↩</a></li><li id="fn-10">Available in <a href="https://github.com/bazelbuild/bazel/commit/ef42d1365d0f508d3d817997b5049639a72100ab">Bazel 5.0</a>.<a href="#fnref-10" class="footnote-backref">↩</a></li></ol></div>]]></content>
        <author>
            <name>Brentley Jones</name>
            <uri>https://brentleyjones.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How Bazel 5.0 Makes Your Builds Faster]]></title>
        <id>how-bazel-5-0-makes-your-builds-faster</id>
        <link href="https://www.buildbuddy.io/blog/how-bazel-5-0-makes-your-builds-faster"/>
        <updated>2022-01-25T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[Highlighting changes in Bazel 5.0 that help BuildBuddy users build even faster!]]></summary>
        <content type="html"><![CDATA[<p>In our <a href="whats-new-in-bazel-5-0.md">last post</a>,
we summarized the changes that were in the Bazel 5.0 release.
There were a lot of changes though,
so it can be hard to determine which ones are impactful to you and why.</p><p>Don&#x27;t worry, we&#x27;ve got your back.
In this post we highlight the changes that help BuildBuddy users build even faster!</p><h2>Build Event Service (BES) improvements</h2><p>Bazel 5.0 includes many changes that make uploading BES events and artifacts to the BuildBuddy UI more reliable and performant.</p><p>Before Bazel 5.0,
if you wanted to upload a timing profile to BuildBuddy,
you had to be fine with Bazel uploading all outputs referenced in the BEP,
even if they were set to not be cached
(e.g. the <code>--noremote_upload_local_results</code> flag or the <code>no-remote-cache</code> tag).
Now you can set the <code>--incompatible_remote_build_event_upload_respect_no_cache</code> flag,
which causes Bazel to respect your wishes in regards to output caching.</p><p>Also,
if you&#x27;ve had <a href="https://github.com/bazelbuild/bazel/issues/11392">warnings</a> or <a href="https://github.com/bazelbuild/bazel/issues/11408">crashes</a> when using <code>--bes_upload_mode=fully_async</code> in the past,
those should now be fixed as well.</p><h2>Deduplicated cache calls and uploads</h2><p>Before Bazel 5.0,
when using Remote Build Execution (RBE),
Bazel would ask the cache which blobs it needed to upload for every input to an action that was going to be executed remotely.<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>
It did this even if it had previously uploaded a specific input for a previous action.
Similarly,
if two actions with similar inputs were executed concurrently,
then Bazel didn&#x27;t deduplicate the input existence checking or uploading.</p><p>For projects with a large number of shared inputs,
which is common in C-family programming languages and Node.js,
this can cause a significant amount of network traffic,
resulting in long build times on low-bandwidth, high-latency connections.</p><p>On the output side of things,
if multiple actions produced the same output,
then Bazel would upload the output multiple times.
If these outputs were large,
then this caused significant network overhead.</p><p>Bazel 5.0 addresses these issues.
If you have a project that shares a lot of inputs between actions
(e.g. C, C++, Objective-C, and Node.js),
and you use BuildBuddy&#x27;s Remote Execution,
then Bazel 5.0 should improve your build times.</p><h2>Faster action cache checking</h2><p>In a similar vein as the above mentioned issues,
Bazel can be unnecessarily slow when checking if an action with a large number of inputs is cached.
This is because Bazel needs to build a <a href="https://en.wikipedia.org/wiki/Merkle_tree">Merkle tree</a> from an action&#x27;s inputs,
which can be expensive if there are many.</p><p>Starting in Bazel 5.0,
you can use the <code>--experimental_remote_merkle_tree_cache</code> and <code>--experimental_remote_merkle_tree_cache_size</code> flags to cache the nodes of these merkle trees.
If you have a project that shares a lot of it&#x27;s inputs between actions
(e.g. C, C++, Objective-C, and Node.js),
and you use BuildBuddy&#x27;s Remote Cache or Remote Execution,
then these flags should improve your build times.</p><h2>Asynchronous cache uploading</h2><p>When an action is run locally,
and Bazel uploads the action&#x27;s outputs to a remote build cache,
it waits for that upload to complete before it executes dependent actions.
This is needed for dependent actions that are executed remotely,
but it&#x27;s unnecessary if they are executed locally.
These delays can cause builds that use BuildBuddy&#x27;s Remote Cache to sometimes be slower than if they didn&#x27;t use the cache.</p><p>Starting in Bazel 5.0,
you can use the <code>--experimental_remote_cache_async</code> flag to have Bazel perform these uploads asynchronously.
Uploads still need to complete before a build finishes,
but now Bazel can speed ahead with local execution regardless of upload speed.
Network utilization is also improved,
as uploads can queue up quicker.
If you have a project that uploads to BuildBuddy&#x27;s Remote Cache,
then this flag should improve your build times.</p><h2>Compressed uploads and downloads</h2><p>Bazel 5.0 added the <code>--experimental_remote_cache_compression</code> flag,
which causes Bazel to compresses and decompress artifact uploads and downloads with the <a href="https://en.wikipedia.org/wiki/Zstandard">zstd algorithm</a>.
In our testing this reduces the average number of bytes transferred by 60-70%.</p><p>There is some overhead involved in this,
both on the Bazel side and the cache side,
so it won&#x27;t make every build for every project faster.<sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup>
That said,
if network bandwidth is a bottleneck in your build times,
this flag could make those builds significantly faster.</p><h2>And more...</h2><p>Bazel 5.0 includes many additional changes that improve it&#x27;s reliability and performance.
To dig a little deeper,
be sure to check out our <a href="whats-new-in-bazel-5-0.md">What&#x27;s New in Bazel 5.0</a> post.</p><div class="footnotes"><hr/><ol><li id="fn-1">Specifically,
Bazel would make a <code>FindMissingBlobs</code> that contained every input for an action,
every time.
Now Bazel will only include the unique inputs it hasn&#x27;t already uploaded before.<a href="#fnref-1" class="footnote-backref">↩</a></li><li id="fn-2">Eventually we might store artifacts in their compressed state,
removing most overhead on the cache side.<a href="#fnref-2" class="footnote-backref">↩</a></li></ol></div>]]></content>
        <author>
            <name>Brentley Jones</name>
            <uri>https://brentleyjones.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What's New in Bazel 5.0]]></title>
        <id>whats-new-in-bazel-5-0</id>
        <link href="https://www.buildbuddy.io/blog/whats-new-in-bazel-5-0"/>
        <updated>2022-01-19T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[We reviewed nearly 3,000 commits and summarized them, so you don’t have to!]]></summary>
        <content type="html"><![CDATA[<p><a href="https://blog.bazel.build/2022/01/19/bazel-5.0.html">Bazel 5.0</a> includes <a href="https://github.com/bazelbuild/bazel/compare/4.2.2...5.0.0">nearly 3,000 changes</a> since 4.2.2.
It&#x27;s the first major release since 4.0 was release in January of last year,
and it&#x27;s Bazel&#x27;s <a href="https://docs.bazel.build/versions/5.0.0/versioning.html#lts-releases">second LTS release</a>.
Since there were so many changes,
many of them quite impactful,
I felt I needed to review them all and provide a nice summary for y&#x27;all.
So that&#x27;s what I did 😄.</p><p>The end result was quite big though,
so I&#x27;ve included a table of contents to allow easy navigation to the changes that interest you the most:</p><nav class="toc"><ul><li><a href="#command-line-flag-changes">Command-line flag changes</a><ul><li><a href="#renamed">Renamed</a></li><li><a href="#default-values-changed">Default values changed</a></li><li><a href="#deprecated">Deprecated</a></li><li><a href="#no-op">No-op</a></li><li><a href="#removed">Removed</a></li></ul></li><li><a href="#remote">Remote</a><ul><li><a href="#grpc">gRPC</a></li><li><a href="#remote-caching-rbc">Remote caching (RBC)</a></li><li><a href="#remote-execution-rbe">Remote execution (RBE)</a></li><li><a href="#build-event-service-bes">Build Event Service (BES)</a></li></ul></li><li><a href="#logging">Logging</a><ul><li><a href="#build-event-protocol-bep">Build Event Protocol (BEP)</a></li><li><a href="#timing-profile">Timing Profile</a></li><li><a href="#execution-log">Execution Log</a></li></ul></li><li><a href="#query">Query</a></li><li><a href="#dependency-management">Dependency management</a></li><li><a href="#platforms-and-toolchains">Platforms and toolchains</a></li><li><a href="#execution-platforms">Execution platforms</a><ul><li><a href="#linux">Linux</a></li><li><a href="#macos">macOS</a></li></ul></li><li><a href="#target-platforms">Target Platforms</a><ul><li><a href="#android">Android</a></li><li><a href="#apple">Apple</a></li></ul></li><li><a href="#languages">Languages</a><ul><li><a href="#c-and-c">C and C++</a></li><li><a href="#java">Java</a></li><li><a href="#objective-c">Objective-C</a></li></ul></li><li><a href="#rules-authoring">Rules Authoring</a><ul><li><a href="#aspects">Aspects</a></li><li><a href="#persistent-workers">Persistent workers</a></li><li><a href="#starlark">Starlark</a></li></ul></li><li><a href="#misc">Misc</a></li></ul></nav><h2>Command-line flag changes</h2><p>Bazel&#x27;s <a href="https://docs.bazel.build/versions/5.0.0/versioning.html#lts-releases">LTS strategy</a> allows for breaking changes between major versions.
In particular,
it allows for command-line flags to be removed,
renamed,
made to do nothing,
or have their default values changed.
In the following sections I collected all such flag changes I could find.</p><h3>Renamed</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/2ee3c2b3b60462b81a56fa396d5935ce02052f6d"><code>--incompatible_use_lexicographical_unordered_output</code> is now <code>--incompatible_lexicographical_output</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/374cb1f925430c5c75c690ba225f135a6095eb89"><code>--experimental_run_validations</code> is now <code>--run_validations</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/35182000bfc5303254008896481b1350c91c3256"><code>--experimental_existing_rules_immutable_view</code> is now <code>--incompatible_existing_rules_immutable_view</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2b48c6b9a447756fcb3295b8a75899b96efa7fd4"><code>--project_id</code> is now <code>--bes_instance_name</code>.</a></li></ul><h3>Default values changed</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/de3b3caed60d47da7e6464478ec9eb814bc794db"><code>--analysis_testing_deps_limit=800</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/64d5bae3b805fad68e9f80512595702472f086f1"><code>--experimental_enable_aggregating_middleman=false</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fa4e14b2aef03b93eef4de3239c57adcfdc7db99"><code>--experimental_exec_groups=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5b216b27435aeb9eb9c3bd3c552d6498e1050cc7"><code>--experimental_forward_instrumented_files_info_by_default=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0c1257ed4e1b83f8d0f6c79d641f6bfcf4d1cfc4"><code>--experimental_jlpl_enforce_strict_deps=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/06bd3e8c0cd390f077303be682e9dec7baf17af2"><code>--experimental_no_product_name_out_symlink=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f56b1349c84ea691b04e0fd40f28ef2373e2c855"><code>--experimental_profile_cpu_usage=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/38dd8aaa50fb2e4767c9388446a723c4ba231d86"><code>--experimental_skyframe_cpu_heavy_skykeys_thread_pool_size=HOST_CPUS</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/44e46b836a580c2fe3e96f39f4c6e02516ca4a0b"><code>--include_aspect=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ef967be1718dd7662ed83ea7ef2899fc09576a8e"><code>--incompatible_disable_depset_items=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fec2fdb1a4c39d1ac313a3b9d1286d9ff3db9e8e"><code>--incompatible_disallow_resource_jars=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/10b3479eacb692e5561cf6175fdf6138731178e3"><code>--incompatible_disallow_strict_deps_for_jlpl=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/32721fb6a1bba90e2d164e79dcec92f2a90d5cc0"><code>--incompatible_display_source_file_location=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/cfaa88b520a6a14b9d6fd5c1cb06ec8c2ce608db"><code>--incompatible_java_common_parameters=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4b47d6f849bb2eca669f48cfdb5d1796100920f3"><code>--incompatible_override_toolchain_transition</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1c062e26226d71c8e4d1fa9a72369880e867d5df"><code>--incompatible_require_javaplugininfo_in_javacommon=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9a765c8b498a72e20af6c391bef01e794913c317"><code>--incompatible_top_level_aspects_dependency=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c2485f67601cf7c79c5a49b29fb23194f7a7e9ab"><code>--incompatible_use_toolchain_resolution_for_java_rules=true</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ebac27ec5a6063556482841da98d63d1abcf1e44"><code>--trim_test_configuration=true</code></a></li></ul><h3>Deprecated</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/a5127917b3aa0a4f64214d2203d5f0f396facb38"><code>--bep_publish_used_heap_size_post_build</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ae2a6a2dc909e468a284913c410fde995cf51095"><code>--experimental_force_gc_after_build</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/88a02cdda6f854913ba01e5b2666eb27da828cd6"><code>--experimental_required_aspects</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/37115a5312fec952c4051e036ed1d1d08b053f09"><code>--{,no}experimental_send_archived_tree_artifact_inputs</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b41576b2f5bb87f3817dfb1ee09493b8220a9634"><code>--experimental_spawn_scheduler</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/03bd0eb6ecd80f824ee8d5b028db96c43721a3b6"><code>--watchfs</code></a></li></ul><h3>No-op</h3><p>These flags now do nothing, but still exist to allow for migration off of them:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/7300231553b04828174f14e5840ed4e2d11dea72"><code>--all_incompatible_changes</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d9a523ef5bc704c1aaf7e692f1f8ba9c449a8d86"><code>--bep_publish_used_heap_size_post_build</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d623892380fdfd43f42bbbfce6b338624cbb3de4"><code>--check_constraint</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ba258e8296ff7a110b32586a83ef9534f8e83d0e"><code>--experimental_cc_skylark_api_enabled_packages</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/cdeb49fd6a12b0d8e2ac1cbb228eaabbf2114554"><code>--experimental_force_gc_after_build</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8d391642f2607e55931c4ec9abbd27376a07653b"><code>--{experimental_,}json_trace_compression</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3e8cda19b7b82290d0e339731121279a41b393ea"><code>--experimental_shadowed_action</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/35ef799700e354231d7f589d19d0b5b5e4767fa9"><code>--experimental_skyframe_eval_with_ordered_list</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6619d77d10415b3a65c434dfd16698634cdf5108"><code>--experimental_starlark_config_transitions</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6ac6954224b2b74c18d3218dfa299424cbc944fb"><code>--experimental_multi_threaded_digest</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3c5e531a30127b43a63e6bfa202de5e027def84a"><code>--experimental_profile_cpu_usage</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/af3add80ac6f243b6653dea093d9d083a9e575f9"><code>--incompatible_applicable_licenses</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/144a62a16e9dee54391d3ed8bb1a5597651d3223"><code>--incompatible_dont_collect_so_artifacts</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/253933f3adda134494a4f55838b3e16e54652f23"><code>--incompatible_load_python_rules</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5b8f054dd20f506e2526ae3b7f89066a5aaca47e"><code>--incompatible_use_toolchain_resolution_for_java_rules</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5b04895ec224b00f7924e15ad6a1b4f3a6e89539"><code>--legacy_dynamic_scheduler</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b213637d406acfcef8f8ed926bff3ad15ba8c15f"><code>--use_singlejar_apkbuilder</code></a></li></ul><h3>Removed</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/166771ed928a6688d954a968c9343994fc83419d"><code>--apple_sdk</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6555d957c68b0b9437217b5665e996ebc0f98e3b"><code>--bep_publish_used_heap_size_post_build</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3135f49fbb7584b9487161401493edd98473f544"><code>--enable_apple_binary_native_protos</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5a91c25ca43547870bcf73cf4b427277c7f62d8d"><code>--enable_runfiles</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e68a7d01c7ed77ac1a8400216468eddf899a4af3"><code>--experimental_dynamic_configs</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e95646972603d9f630ff69cca0b6cf75cd3373ee"><code>--experimental_enable_aggregating_middleman</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3973b5f3573e223f259556938aa4adc8a9fd21cf"><code>--experimental_exec_groups</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c411d9ac0714a669f8970b19a6086185fc2a1290"><code>--experimental_forward_instrumented_files_info_by_default</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/544b51da6d15f7446b4855a422b1d1924420f1ab"><code>--experimental_interleave_loading_and_analysis</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/359ceb4135ac69e7f861d16b8658c5768d720a2c"><code>--experimental_nested_set_as_skykey_threshold</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b621b1b1866868a1dcb060fe7b6833df0c729761"><code>--experimental_no_product_name_out_symlink</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/427b4dd6b065b9b9c62add633413af897c01e612"><code>--experimental_objc_enable_module_maps</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c1695ef7ecd5ca26721a97463d2f159234711da9"><code>--experimental_query_failure_exit_code_behavior</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/28a1e6e5fdc5567fa23ab2c7bf87eec5b9b78766"><code>--experimental_starlark_config_transitions</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5752762930d69a57ec1c734b83e5d56ab9006704"><code>--experimental_ui_mode</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f0c6eab2582cefdb37b363c7f37c0b1b12bed76a"><code>--incompatible_enable_execution_transition</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ed251187b078c4262bbbc1da72015ce12f9964f4"><code>--incompatible_ignore_duplicate_top_level_aspects</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/bcdd55d8956e22758fe3d866427e2dc3ebc4e31b"><code>--incompatible_objc_compile_info_migration</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/952c0d7615d931bd912ebf2c6ab5d3f43462891a"><code>--incompatible_objc_provider_remove_compile_info</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e7202e3eef51f2dea5cd93f504c89060de6c9bb3"><code>--incompatible_prefer_unordered_output</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/aefd107e163087d7dbc822b3342455d91669a58e"><code>--incompatible_prohibit_aapt1</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f9db4fb91bf62a831e73bf09431619a361f0fcc5"><code>--incompatible_require_java_toolchain_header_compiler_direct</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4d9c6f9eed87aa19798a445f37a270c571766c96"><code>--is_stderr_atty</code></a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e1c404e1c87c4a5dec227b160c8c4e81686a3f9f"><code>--javabase</code> and <code>--java_toolchain</code></a></li></ul><h2>Remote</h2><p>One of Bazel&#x27;s most powerful features is its ability to use <a href="bazels-remote-caching-and-remote-execution-explained.md">remote caching and remote execution</a>.
Numerous improvements and fixes to Bazel&#x27;s remote capabilities are included in Bazel 5.0.</p><h3>gRPC</h3><p>Bazel uses gRPC as a protocol for most of its remote capabilities.
There were a couple changes that applied at this foundational level:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/a750a56f8f4061516ec3056ae8a8295ea8279903">Added mnemonic and label to remote cache and remote execution requests.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b0ae0afd451bbe374be24c905579cece793b90c7">Bazel no longer crashes on errors returned while creating a gRPC connection.</a></li></ul><h3>Remote caching (RBC)</h3><p>Using a remote cache is one of the most popular ways of speeding up a Bazel build.
Thankfully these changes make using a remote cache both more performant and more reliable:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/50274a9f714616d4735a560db7f617e53fb8d01b">Added the <code>--experimental_remote_cache_compression</code> flag, which compresses gRPC uploads/downloads.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7f08b7841fcf4c7d7d09b69f9ec1f24969aba8a1">Added the <code>--experimental_remote_cache_async</code> flag, which makes uploads happen in the background.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3947c836cf0c966882a1524e40fa8c3721ac5b07">Added the <code>--experimental_remote_merkle_tree_cache</code> flag, which can speed up action cache hit checking.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4e29042fd77eae565a711655df6150500cb6e915">Added the <code>--experimental_action_cache_store_output_metadata</code> flag, which can speed up Remote Build without the Bytes after a Bazel server restart.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/bfc24139d93f8643686d91596ba347df2e01966a">Added the <code>no-remote-cache-upload</code> tag, which allows downloading, but not uploading, outputs from the remote cache.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/dc32f0b6a5d93e4c4426815cecddbc26c1f5d7ac">Reduced <code>FindMissingBlobs</code> calls when using a combined cache.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/db15e47d0391d904c29e6e5c632089e2479e62c2"><code>FindMissingBlobs</code> calls and file uploads are now deduplicated.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f94898915268be5670fb1e93a16c03e9b14d2a58">Fixed &quot;file not found&quot; errors when remote cache is changed from enabled to disabled.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/11066c7731b5a16f2f11db93f6716a1595650aad"><code>chmod 0555</code> is now consistently set on outputs.</a></li></ul><h3>Remote execution (RBE)</h3><p>For some projects,
using remote execution is the ultimate performance unlock for their Bazel builds.
In addition to the remote caching changes covered above,
which also apply to remote execution,
the following changes improve the remote execution experience:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/1e42b94b1c35eca37f45c58c048b38e20bd812bc">Added the <code>--experimental_dynamic_skip_first_build</code> flag, which skips dynamic execution until there has been a successful build.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/060d5966adf2c8035276cd1159601567bea57757">Improved debug output when using the <code>--experimental_debug_spawn_scheduler</code> flag.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6080c1e07f4229ea72eacd04faa9302e44955a84">Improved performance of workers when using dynamic execution.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/04754efc1868df499b63cba341f7c90ad18aa425">Improved dynamic execution&#x27;s local execution delay logic.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/cf57d036c2e1b608ca902267fbbdfeb7ee5aa166">The disk cache can now be used with remote execution.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/713abde2576d7e3c3b584eed80097cd53c9cf082">Target-level <code>exec_properties</code> now merge with values from <code>--remote_default_exec_properties</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/399a5beb37a2620c9494f7eef774b99dc7ccab6d">Failure messages from remote execution are now propagated.</a></li></ul><h3>Build Event Service (BES)</h3><p>Using a build event service can give you unparalleled insight into your Bazel builds at scale.
There were some nice changes to BES support,
though I think the improvements to how it interacts with the remote cache are especially noteworthy.</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/bfc24139d93f8643686d91596ba347df2e01966a">Added the <code>--incompatible_remote_build_event_upload_respect_no_cache</code> flag, which prevents the BES uploader from uploading the outputs of actions that shouldn&#x27;t be cached remotely.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ef42d1365d0f508d3d817997b5049639a72100ab">Added the <code>--bes_header</code> flag, which allows passing extra headers to the BES server.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/71b50f6b4c6e462863c8433a163c9eb23b0c5730">Added logging when a blob upload isn&#x27;t uploaded in time.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/62060babcc26f3cac3db020e423daec8755fd426">The <code>--build_event_binary_file</code> flag now implies <code>--bes_upload_mode=wait_for_upload_complete</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/dc59d9e8f7937f2e317c042e8da8f97ba6b1237e">BES referenced blobs are no longer stored in the disk cache.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e855a26691daeac81c1e823ad65c7707062e0bd2">The BES uploader now uses the same code as the remote cache uploader and is now more robust to errors.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c51eb5730745017d008af9a49dcfcc975d7c0283">Fixed the BES uploader to handle errors in more edge cases.</a></li></ul><h2>Logging</h2><p>Bazel offers various ways to gain insight into your build.
It&#x27;s not too surprising then that there were over 30 changes to these capabilities in Bazel 5.0.</p><h3>Build Event Protocol (BEP)</h3><p>The build event protocol is used by <a href="#build-event-service-bes">build event services</a>,
so all of these changes could have also been listed in that section as well.
The BEP can also be collected locally with <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--build_event_json_file"><code>--build_event_json_file</code></a> and <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--build_event_binary_file"><code>--build_event_binary_file</code></a>.</p><p>The vast majority of changes added additional information to the BEP,
though some are fixes and improvements:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/77a980f3ec2496d3f952987e3eaf9df8560a114d">Added <code>cumulative_metrics</code> field to <code>BuildMetrics</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c674101d004eccd795a06e19674e317b04b1b36a">Added <code>worker_metrics</code> field to <code>BuildMetrics</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f572d3ba1e6c977bace5c638da1628724f7b3e1f">Added <code>action_data</code> field to <code>BuildMetrics.ActionSummary</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0a23a5e7867101f8c16fc4778802ed433ef107d3">Added <code>source_artifact_bytes_read</code> field to <code>BuildMetrics.ActionSummary</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/34b2947415eab54382921f917c8ffad5feedccb7">Added <code>analysis_phase_time_in_ms</code> field to <code>BuildMetrics.TimingMetrics</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8965d25af90ba975cd207c84fa461b499d8d51c9">Added <code>garbage_metrics</code> field to <code>BuildMetrics.MemoryMetrics</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/dd8afa0fc79a7ff0fc0633eed6d592e0efd3bbfc">Added count and size of output files and top-level files seen during a build to <code>BuildMetrics.ArtifactMetrics</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3e1ba0c3b8ef8588b0424291b498a555fe510d44">Added <code>incomplete</code> field to <code>TargetComplete.OutputGroup</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8d481542111cff64ec28034bd71c83e54f2da28d">Added the <code>--experimental_bep_target_summary</code> flag, which adds the <code>TargetSummary event</code>, which is intended to summarize all <code>TargetComplete</code> (including for aspects) and <code>TestSummary</code> messages for a given configured target.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/766cd0ed2906546b3d2c75771d65b15aeb07bb4e">Added <code>attempt_count</code> field to <code>TestSummary</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7fb0c168f79658a5422607c67f31bcabb66158c6">Added test suite expansions.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/248792062f283866d9b93bf47b135309fd65c8c3">Added conflicting action output reporting.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f880948ec24efd08b2fde8213304192561c9ad61">Replaced <code>remote_cache_hits</code> field with a more detailed <code>runner_count</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e5c832a16e475f636c845b0247731f65df5e258c">Timestamps and durations now use Well Known Types.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/bf31feb7b8a1428c2ad0e3a4e73c655e7582aa08">Improved reporting of Starlark build settings.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3d585234f6b1861d174b21242cdfa48022464e82">The <code>used_heap_size_post_build</code> field is now populated when the <code>--memory_profile</code> flag is set.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1c3bc902c5c93568f8f86125fe57580ba8186d04">Made <code>--bep_publish_used_heap_size_post_build</code> work for <code>query</code> and other non-<code>build</code> commands.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fcf9dd50e27a1f77e1c30dfedaabc6118319e5e1">You can now assume the <code>named_set_of_files</code> event will appear before any event referencing that <code>named_set</code> by ID; this allows consumers to process the files for such events (eg. <code>TargetCompleted</code>) immediately.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d2f93fd969f5eca042d029a1b8016d83ce8ce165">The BEP now includes all files from successful actions in requested output groups; previously, an output group&#x27;s files were excluded if any file in the output group was not produced due to a failing action.</a></li></ul><h3>Timing profile</h3><p>The action timing profile,
which is enabled by default with <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--profile"><code>--profile</code></a>,
is viewable both <a href="https://docs.bazel.build/versions/5.0.0/skylark/performance.html#performance-profiling">locally in Chrome</a> and on <a href="#build-event-service-bes">build event services</a>.
These changes add more detail and clarity to the profile:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/f4fbbd653822ef7306f60144515e7ef551b2d39b">Added server heap usage.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ec2eda1b56a5197ee2d019f58d89a68b17974b13">Added system CPU and memory metrics.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/45d82cadb52f9fa0ee23cf2c45eb1cd149587852">Added file system traversal tracing.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/559db4e9c35e5c0f840a26a80b171129044329c8">Added <code>mobile-install</code> tracing.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/786b418d1fcd1ad1df66237be45682624007ed2e">Added worker execution tracing.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c5f87ea56a8b1f90525b8a6407dba8778524ca60">Renamed action count field from <code>cpu</code> to <code>action</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/a03674e6297ed5f6f740889cba8780d7c4ffe05c">Renamed &quot;grpc-command&quot; and &quot;Service Thread&quot; threads to &quot;Main Thread&quot; and &quot;Garbage Collector&quot;.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fa9fabb3f699f1e8e8ebbe22228fc4acbc9df2ba">The profile now mentions when an action is acquiring resources.</a></li></ul><h3>Execution log</h3><p>Bazel logs all of the <a href="bazels-remote-caching-and-remote-execution-explained.md#spawns">spawns</a> it executes in the execution log,
which is enabled with the <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--execution_log_json_file"><code>--execution_log_json_file</code></a> or <a href="https://docs.bazel.build/versions/5.0.0/command-line-reference.html#flag--execution_log_binary_file"><code>--execution_log_binary_file</code></a> flags.
This feature is relatively stable,
with just a single noticeable change:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/f92d80ce649a9abcb3e674a6e7c7eaf3b4f08ecd">Added wall time duration.</a></li></ul><h2>Query</h2><p><code>bazel build</code> wasn&#x27;t the only command to get improvements in this release.
Here are some changes that were made to the <code>query</code> family of commands:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/acbceddd97fb86dca96d0cd1ec45807335d7f7fc">Added the <code>--incompatible_lexicographical_output</code> flag (on by default), which lexicographically sorts the output of <code>query --order_output=auto</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/28ffaa259e1df63b64940344bb3b72999a8a1de6">Added the <code>--deduplicate_depsets</code> flag (on by default) to <code>aquery</code>, which removes duplicate subsets in <code>dep_set_of_files</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/a01371abaae4b2329877e25ff13d1a99e35034f1">Added <code>--keep_going</code> functionality to graphless <code>query</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/11c09c5254e6dc5e17016a17c345fe374b3d799d">Added execution platform information to <code>aquery</code> output.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5dfffefef58da0c426cfa0b3d70132dde77950b0">Fixed output of <code>config_setting</code> visibility.</a></li></ul><h2>Dependency management</h2><p>A new
(currently experimental)
external dependency system,
codenamed <a href="https://docs.bazel.build/versions/5.0.0/bzlmod.html">Bzlmod</a>,
was added in Bazel 5.0.
Besides for all of the changes needed to support Bzlmod,
there was one more notable dependency management related change:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/a1137ec1338d9549fd34a9a74502ffa58c286a8e">Added the <code>--experimental_repository_downloader_retries</code> flag, which allows Bazel to retry certain repository download errors.</a></li></ul><h2>Platforms and toolchains</h2><p>The C++, Android, and Apple rules are being migrated to support <a href="https://docs.bazel.build/versions/5.0.0/platforms-intro.html">building with Platforms</a>.
While <a href="https://github.com/bazelbuild/bazel/issues/6431#issuecomment-978329014">progress has been made</a>,
they don&#x27;t fully support it yet in Bazel 5.0.
For C++ projects,
it&#x27;s recommended that the <code>--incompatible_enable_cc_toolchain_resolution</code> flag is used,
to help the Bazel team discover any issues in the wide variety of projects that exist.</p><p>Here are some of the platforms and toolchains related changes which weren&#x27;t tied to any of those migrations:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/daecf427ec0bf0e963c324783062c4f5b61ff679">Added the <code>--experimental_platform_in_output_dir</code> flag, which causes the output dir name to use a non-default platform name instead of the CPU.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d052ececddf54587c576f876ce13d4b8f4aacb0b"><code>target_compatible_with</code> can now be used with all non-workspace rules.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/545befb13a64468377e3792a8f56c67cac245fa1">The <code>--toolchain_resolution_debug</code> flag now accepts regexes matching targets, as well as toolchain types, when choosing what debug messages to print.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4b47d6f849bb2eca669f48cfdb5d1796100920f3">The toolchain transition is now enabled for all toolchains.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8d66a4171baddcbe1569972f019e54130111202c">Progress is being made on changing all <code>host</code> configurations to <code>exec</code>.</a></li></ul><h2>Execution platforms</h2><p>Execution platforms are <a href="https://docs.bazel.build/versions/5.0.0/platforms.html">platforms</a> which build tools execute on.
These include the host platform on which Bazel runs.</p><p>In the following sections I collected notable changes for Linux and macOS.
I&#x27;m sure there were some for Windows as well,
but since I don&#x27;t use Bazel on Windows,
none of the changes stood out to me as pertaining only to it.</p><h3>Linux</h3><p>I only noticed a single change that was directly related to Linux execution:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/11f7d8040fadc595589ee264561606dc2a83685d">Added the <code>--experimental_use_hermetic_linux_sandbox</code> flag, which configures <code>linux-sandbox</code> to use a <code>chroot</code> environment.</a></li></ul><h3>macOS</h3><p>On the other hand,
macOS had a lot of changes related to it:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/7484c98e871ab3fa3408be53873b8848861d26be">Added the <code>xcode_version_flag.precision</code> attribute to allow matching a subset of the version components.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/762f9e28f90b863064d81bdf61d3ad0e31084bc4">Added progress reporting in <code>xcode_configure</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/de5fc19b0956c900f2648b68a881fd3456c10e7e">Toolchain tools now compile as universal binaries if possible.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6916fc1c4c49134ee76b9a725deddd1e6bcab24a"><code>xcode-locator</code> is now built as a universal binary.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/652d1cc233a49593767c01725974eb17b90dca4b">Sandboxed actions can now run <code>/bin/ps</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4bef502e027238b56e30b787013a525dba0cde3d">If <code>--experimental_prefer_mutual_xcode</code> is passed, Bazel chooses the local default (instead of the newest mutually available version) if it&#x27;s available both locally and remotely.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f52e218d99e26298b69c838793bd80f9ae7a226d">Generated <code>xcode_version</code> targets now include product version aliases.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/aeec9a876b9c4f7cb54548f8855a2e938387b91e"><code>osx_archs.bzl</code> is now explicitly exported from the crosstool.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b5bbe28ce207375009babc142fd3e8ce915d3dc9">Fixed typo in the cache directory name.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/48dd159808c5a874c4aabcd27d6e66610d41bb5a">Fixed <code>libtool</code> with params files.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/bb41ebc210989ca6aeaf4f776f4175c4b952e9fe">Fixed the <code>--experimental_prefer_mutual_xcode</code> flag not being used correctly for all parts of the build.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1811e82ca4e68c2dd52eed7907c3d1926237e18a">Fixed a crash when a custom crosstool specifies a <code>DEVELOPER_DIR</code> environment variable.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1bae172b8af8cd60dafada4be45e1cdffe9a763d">Fixed JSON output for <code>xcode-locator</code>.</a></li></ul><h2>Target platforms</h2><p>Target platforms are <a href="https://docs.bazel.build/versions/5.0.0/platforms.html">platforms</a> which you are ultimately building for.
I cover the Android and Apple platforms in the following sections,
as they still have some functionality provided by Bazel core,
instead of being fully supported by standalone Starlark rules.</p><h3>Android</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/909bec5afeec111a38d49d331ae24e7b8f041b5b">Added the <code>--experimental_run_android_lint_on_java_rules</code> flag, which causes Java rules to invoke Android Lint.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0ccbbde12e62773a69249372b9bcaa30ab223317">Added the <code>android_sdk.legacy_main_dex_list_generator</code> attribute.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1c0194cc994d29b938d638e8625deaa19ffaf636">Added support for location expansion in the <code>java_toolchain.android_lint_opts</code> attribute.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e41440e97c46a7f76a92e4b147eff02f1343451b">Added support for symlinks in Android SDK repositories.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0e652737988e3c115e98e1552f6fada52bc2b9a2">The minimum Android build tools version for the Android rules is now 30.0.0.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f9df9d7318f51c1998c76bc50a5d48deacac5963"><code>--apk_signing_method</code> now accepts the value <code>v4</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8f927d2e612263c78f6f4122f634434c29c71c85">Tags are now propagated to <code>AndroidBinary</code> actions.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8465c173b97370704b277f12c6f827746c4abf4e"><code>aapt2 convert</code> is now used instead of relinking final APK as static lib.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/705b419f95060305de93e7861544bd73bb663f19">The <code>--no-proguard-location-reference</code> flag is now passed to <code>aapt2</code> when linking and generating proguard configurations.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/65dc407929eeb2372da65d3d4043dac9881f3235">Made Android Lint worker compatible.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/64ffc098a23a4d72726e2efbf590cb8002abeec2">Made <code>AarGeneratorAction</code> worker compatible.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c6c63890460546c2d605812ad7e7baef19eb7100">Android Lint validations are now correctly propagated through <code>android_binary</code>&#x27;s split transition.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c381a2745107a444c2b99888b7e91beee3c50993"><code>android_binary</code> now always uses the bytecode optimizer&#x27;s mnemonic.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b4c637c5e3af145295ad3f4ca732c228ab6a88cf">Fixed Android API level support in NDK crosstools.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/85ab374bafbf4f8f4dff1700e477b5dc4e20ccc5">Fixed <code>AarResourcesExtractor</code> action to produce consistent zips.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/a38eb75865a0cb90b50fbcab65436be4fe830483">Fixed <code>--fat_apk_hwasan</code> when using <code>--{,android_}cpu</code> instead of <code>--fat_apk_cpu</code>.</a></li></ul><h3>Apple</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/c1ea2d4b9cb6afa33eabba285f7c962c2f954e23">Added support for the Apple Silicon iOS simulator.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9c1c622fed219cb6b9c0656ebe4a4f3c117029b9">Added support for the Apple Silicon watchOS simulator.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6345c806ad81f29b390d67ce6e1510b47bf82ddd">Added the <code>--host_macos_minimum_os</code> flag.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f53c389dbd4b0ae66307e9bd4a72b36b3d284ec3">Added support for LLVM BC files.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/65e9732c7d2a791ed2d6f9e90c8279acdbf1096f">Added the <code>--incompatible_disable_native_apple_binary_rule</code> flag, which disables the native <code>apple_binary</code> rule.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ca5f67f9a73d3be20539c923a655997680328fc3">When building an iOS target it now defaults to the Apple Silicon iOS simulator when building on an Apple Silicon host.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3114e806c33df3f1a9555f463dd17f028eef80c6">Made <code>-c opt</code> strip dead code by default.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/073ae810e4f61f56f68a31d5ee95f18633d176cc">Timestamps are now disabled in linking actions.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3439a52cd6cc92420fa8f21c5910e750b01c18c7"><code>--apple_bitcode=embedded</code> now applies to <code>cc_library</code> targets.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ec5553352f2f661d39ac4cf665dd9b3c779e614c">Removed support for &quot;nodeps&quot; dynamic libraries.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/066fba3486d8d395cb67720888bd8258a5ffc83a">Lipo operations are now conditional with the <code>linkMultiArchBinary</code> Apple binary Starlark API.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3ece10a9d6ea2236d8780f5ffe623d6374d4dc4a"><code>--apple_crostool_top</code> is now preserved in host/exec transitions.</a></li></ul><h2>Languages</h2><p>While there are lots of programming languages that are supported through standalone Starlark rules,
some are still written as &quot;native&quot; rules in Bazel core,
or are bundled Starlark rules while <a href="#starlark">Starlarkification</a> is in progress.
In the following sections I summarize the notable changes in support of these languages.</p><h3>C and C++</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/c750c529ab0646e40c60f645f51d468155418269">Added support for CUDA header file type (.cuh).</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ad0382340ab4ffb4832c11cb92ec68755ef0eec2">Added <code>.rlib</code> as an allowed extension for static libraries.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/28fc8a1f7f7524d1b730da2a41341ce4aa1fea35">Added support for location expansion in <code>cc_*.defines</code> attributes.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/26abd97974554887e9a4d140bf9f4800e23f1da8">Added the <code>cc_toolchain.target_transition_for_inputs</code> attribute.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/96afa0f01b49f8dfb4db02c1b2a6a60f3a846a01">Added native options for <code>cc_shared_library</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fa69b78ff2ab4138b5ec3fcdeb23ba406f7f8227">Added <code>-g</code> in <code>per_object_debug_info</code> for Clang 12 and GCC 11.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f1531dc2ebfb2db721a94f6f19081fa89af536da">Added support for clang&#x27;s <code>libc++</code> to the Unix toolchain.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/00e30ca5968d42b4a1e42327fa683debc1063b89">Added support for LLD to the Unix toolchain.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/08936aecb96f2937c61bdedfebcf1c5a41a0786d">Added the <code>external_include_paths</code> feature, which disables warnings from external headers.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c74ae11562c44a49accc33dfae85e74036344f38">Added the <code>--incompatible_enable_cc_test_feature</code> flag, which switches from the use of build variables to the feature of the same name.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f5196e2ce4e8e45ca49c271053dad8dd32be5080">Added the <code>--experimental_cpp_compile_resource_estimation</code> flag, which estimates precise resource usage for local execution of <code>CppCompileAction</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/dc914c6822a785ce139e8fc8bdf12594835f5674">Added the <code>--experimental_use_cpp_compile_action_args_params_file</code> flag, which causes <code>CppCompileAction</code> to write exposed <code>action.args</code> to a parameters file.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/c4357cf248612b2451b4337e44757c934de22d5c">Added support for Starlark transitions on <code>--incompatible_enable_cc_toolchain_resolution</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e2915a8fe56b1917510a922b71238c1b51a8972f">Added the <code>dynamic_mode</code> attribute to the <code>cpp</code> fragment.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/09cba3b5c80b28ac1fe2a5a312f8d3b41bf3eecd">C++ modules are no longer created if there are no modular headers.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9a5bef9983848535c8a48f783700b580ec44df3f">Made the <code>abi_version</code> and <code>abi_glibc_version</code> attributes optional for cc toolchains.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e8a95ca927fb49b81787df77ffd775340fe715f2">Made <code>gcov</code> optional in cc toolchains.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5448c7c5460d7928013a438bd2b88bb811362df9">Renamed <code>target_transition_for_inputs</code> to <code>exec_transition_for_inputs</code> to better reflect the mechanism at play.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9b4844a0ca3ee031c8b930c23d551da6a9050a85">The <code>oso_prefix_is_pwd</code> feature now applies to C++ link actions.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/03493609e8559aa3aab28d55b521a5bdb6e30b68">Fixed <code>CppCompileActionTemplate</code>&#x27;s handling of PIC.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b571f2c1b9272a14710e15f719dff8af86b79f06">Fixed build failures when the same shared lib is depended on multiple times.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ab1da7beb367147d7d2df17f53bbf0ed78118b69">Fixed C++ code coverage when using remote execution.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/503d56eda25b7e2a12431411bfb7ff286d028405">Fixed a performance issue when <code>cc_binary</code> depended on <code>cc_shared_library</code> targets.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d3b3425be23917e5b126d54a2e224be3c3af55e9">Fixed a crash when feature configuration or cc toolchain were <code>None</code>.</a></li></ul><h3>Java</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/698c17ab7ea6f4617f1f35a6b3e3085e88c1693a">Upgraded JDK11.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/06f7340819f9eaf643d13400a1e279650caf6c56">Removed JDK14.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/e2ed2fd5cad34f0e97f117df391e255b59d96b63">Added JDK16.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/eb7bf8cd9b6e0eccc7eddcfd2f5d1fb10242c30f">Added JDK17.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2a3e194ff5efa4b73b59bcb87ce894f46d95b882">Added support for Java versions with a single component.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/05d04464b1ceca115ceba4410195b0a967e39aeb">Added support for worker cancellation.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/26229fe7a04791a512cc1320ce84130e97afe565">Added support for record attributes to <code>ijar</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/70ae39015e25acec226835201b6dd70f55716280">Added support for sealed class attributes to <code>ijar</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/570f01968093d943b1f878f2cf57da4c20ba5355">Added the <code>--host_jvmopt</code> flag.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/a1b19dfa09abe6d7d3b62f2253e4bfa718aec089">Added the <code>javabuilder_data</code> and <code>turbine_data</code> attributes to <code>java_toolchain</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/15b1840a5f45584bab82eaf141dae082cc3ce780">Added the <code>http_jar.downloaded_file_path</code> attribute.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/120ea6cbd8da0865a1d8fc7c251c9072a346baab">Added mnenomic tags for java toolchain actions.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f73e28cd44d439e6bcecd73f45813ca13c352a93">Added <code>java_outputs</code> to <code>JavaPluginInfo</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/issues/7849">Java rules now use toolchain resolution.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/065e2e8e76c5bf21bd797f3c8baebe909e85a6cf">Java branch coverage now applies Jacoco’s coverage filters.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7e48642db90977d37531053775be5ac9083078b7">The local JDK is now attached to <code>JVM8_TOOLCHAIN_CONFIGURATION</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/903c2720792574321d3e3591ca14a9d287819cb7">Only JDK repositories that are needed are downloaded now.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ca39c05b05527f83480852d26cd08be9bf0cba09"><code>java_test</code> now has the <code>requires-darwin</code> execution requirement on macOS.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2a07fedf87eae77ce53bc6f0807cc41d1ac743ab">Removed <code>ABSOLUTE_JAVABASE</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/34cfab54485de9b1fc424bbc2dee19ed46942f2c">Removed the <code>jarFiles</code>, <code>resources</code> and <code>sourceJarsForJarFiles</code> attributes from <code>JavaSourceInfoProvider</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/4d54234df2711d52a80be053808a18852f6ff4ef">Removed the <code>JavaInfo.add_compile_time_jdeps</code> and <code>compile_time_jdeps</code> attributes.</a></li></ul><h3>Objective-C</h3><ul><li><a href="https://github.com/bazelbuild/bazel/commit/d966a0d6eaab557065cf06b5a7b23299f01142a8">Added support for location expansion in the <code>objc_library.copts</code> attribute.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/31bec271b148a826f6d1a527e6c087e5b2d9333f">Swift module maps are no longer generated in <code>objc_library</code> and <code>objc_import</code> targets.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1bf58436a8fca8c704c8738520cc6d33d4f73da0">Removed the <code>generate_dsym</code> method from the <code>objc</code> fragment.</a></li></ul><h2>Rules authoring</h2><p>Bazel&#x27;s extensibility is powered by the ability to write custom <a href="https://docs.bazel.build/versions/5.0.0/skylark/rules.html">rules</a>.
Most rules used in a project will be provided by open source rule sets,
but projects may also define rules themselves.
Bazel 5.0 includes numerous changes that make custom rules more performant,
easier to write,
or even expand what is possible to do with them.</p><h3>Aspects</h3><p><a href="https://docs.bazel.build/versions/5.0.0/skylark/aspects.html">Aspects</a> allow augmenting build dependency graphs with additional information and actions.
These changes expanded their capabilities:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/60ebb105dbf34f0b267ea7573157246b4c9bfcaf">Added the <code>--experimental_enable_aspect_hints</code> flag,</a> <a href="https://github.com/bazelbuild/bazel/commit/a2856bf66f4b4c519861a994c6e09bd263f2a31e">which adds the <code>aspect_hints</code> attribute to rules.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f8c34080de1f9b935e3f6abf23b2a319e62c9052">Added the <code>--experimental_required_aspects</code> flag, which allows aspects to depend on other aspects.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/ed251187b078c4262bbbc1da72015ce12f9964f4">Added the <code>--incompatible_top_level_aspects_dependency</code> flag, which allows top-level aspect dependencies.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/020dd5f1ee9c2c388644dbcd45cda4ebf6b42876">When using the <code>--allow_analysis_failures</code> flag (for example, via <code>bazel-skylib</code>&#x27;s <code>analysistest</code> with <code>expect_failure = True</code>), analysis-time failures in aspect implementation functions will now be propagated and saved in <code>AnalysisFailureInfo</code>, just like analysis-time failures in rules.</a></li></ul><h3>Persistent workers</h3><p><a href="https://docs.bazel.build/versions/5.0.0/persistent-workers.html">Persistent workers</a> improve build performance by sending multiple requests to long-running processes.
Here are some notable changes to persistent worker support:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/e0d6f8b00490a5e7973e74680e9e0ca3f19dc6e1">Added support for worker cancellation.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/40d33638c4abd0860006253b922e362bae05a238">Added the <code>verbosity</code> field to the worker protocol, primarily controlled by the <code>--worker_verbose</code> flag.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/299e50aae9d8c0b7f0d47aa2ce3d2658a3a80a94">JSON based workers now have their requests formatted according to the ndjson spec.</a></li></ul><h3>Starlark</h3><p><a href="https://youtu.be/7M9c6x3WgIQ?t=282">As mentioned at Bazelcon</a>,
progress is being made on migrating natives rules out of Bazel and into standalone Starlark rules.
In the Bazel 5.0 release progress was made on the Android, C++, Java, and Objective-C rules.</p><p>In addition to changes directly needed for Starlarkification,
for which there were many and I&#x27;m not going to list them here,
the Starlark language itself received performance and feature improvements:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/5ca20643e54e5cff1eb2939d044f86f96861176a">Added support for nested <code>def</code> statements.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/50ce3f973cbc96a0326560a31b736a4f0ca8dc62">Added support for lambda expressions.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/6e0050d81444cc09fca091cad4b105341c9e0e37">Added support for <code>allow_closure</code> in the <code>args.add_all</code> and <code>args.add_joined</code> methods.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fbbac6b295b9ef0ea1999dc3ae9df29eceffbe88">Added support for augmented field assignment (<code>y.f += x</code>).</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/99b72266903d409c4eb9ebc852a4941cce7b0995">Added support for <code>%x</code>, <code>%X</code>, and <code>%o</code> conversions in <code>string % number</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3e459679f158afca39286d8a37179e4e5030ca43">Added 64-bit integer support to <code>StarlarkInt.{floordiv,mod}</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/bfa364346890eb7950edb002877d569695544d48">Added support for some subsitutions in action progress messages.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/a13f590b69bcbcaa10b1a49bfd9a4607dfbd8f47">Added support for string build settings which accept multiple values.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d1619b7833461b3e4faf1a9585c0ab6950432a35">Starlark rules can now use native transitions in the <code>cfg</code> parameter.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/8f97db114c7a60cc53db0d5bf1555bc580d554a0">Optimized <code>str(int)</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0ebb269454722f715dbdaba9ef14c21c11c6fd5f">Optimized <code>() + tuple</code> and <code>tuple + ()</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9d3f2257ba5a97a21c9b3cc0680494c0816c793f">Optimized long integer multiplication.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fa421b82ceccc54004efd31071dc8c4350245be7">Optimized <code>&amp;</code>, <code>|</code>, <code>^</code>, and <code>~</code> for 64-bit integers.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d7d7f82729dd62c5c39154140bf1c6a54abdfe84">Optimized <code>list(list)</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/5b4fb0219b289eb3bbd423748f5400aaab2ec1cb">Optimized Starlark transitions.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/dec8b5a8a0235fe726a4324ff5d02e3abe75a185">Optimized <code>--experimental_existing_rules_immutable_view</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/463e8c80cd11d36777ddf80543aea7c53293f298">Fixed <code>Label()</code> behavior when called with <code>@repo</code> parts.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/62582bd74d2a154e94a9e1e64fcbeeae22fbf88c">Propagated <code>DefaultInfo</code> no longer loses runfiles.</a></li></ul><h2>Misc</h2><p>There were a handful of changes that I couldn&#x27;t find a nice home for in the sections above,
but I still felt were important or interesting enough to call attention to:</p><ul><li><a href="https://github.com/bazelbuild/bazel/commit/79989f9becc2edefe8b35f7db687bf8de03e3580">Added the the <code>--incompatible_enforce_config_setting_visibility</code> flag, which makes <code>config_setting</code> honor the <code>visibility</code> attribute (defaulting to <code>//visibility:public</code>).</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f3513c16018be07255ee51c88bfdf2f77efa920f">Added the <code>--remove_all_convenience_symlinks</code> flag to the <code>clean</code> command, which deletes all symlinks in the workspace that have the <code>symlink_prefix</code> prefix and point into the output directory.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/d4390f81b306f3ae0b2f85c722965142e14dd356">Added the <code>--no-log-init</code> flag to docker sandbox.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2f4ed67b2539762a36c4e0a28018d62ef8811477">Added the <code>--experimental_keep_config_nodes_on_analysis_discard</code> flag (default on), which reduces long-running memory usage.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/1adb51287f5826ac1a8b469c417780c84ea4b467">Added the <code>--experimental_reuse_sandbox_directories</code> flag, which causes reuse of already-created non-worker sandboxes with cleanup.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/16c040854db04fed900a1d3abb5ff6a4337a2028">Added the <code>--experimental_skyframe_cpu_heavy_skykeys_thread_pool_size</code> flag, which causes the loading/analysis phase of Skyframe to use 2 independent thread pools.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/b5bfcc1ed0388fb5f0e3924d8fd33ea1bb3db0e1">Added the <code>--experimental_oom_sensitive_skyfunctions_semaphore_size</code> flag, which configures the semaphore in <code>ConfiguredTagetFunction</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/309f4e1475efc08b20e406038d10eb30090fca82">Added the <code>--experimental_retain_test_configuration_across_testonly</code> flag, which skips configuration trimming when when <code>testonly</code> is <code>true</code> on non-test targets.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0b51d431bd43010ed4dc56f30b83da20fdb21bc6">Test configurations are no longer trimmed when <code>--nodistinct_host_configuration</code> is on.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/3e6e97585dd41e31b6ca3bfe3bed10abc3614fe4">The <code>canonicalize-flags</code> command now inherits from the <code>build</code> command in order to pick up build-specified <code>--flag_alias</code> settings from rc files.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/06bd3e8c0cd390f077303be682e9dec7baf17af2">Bazel will no longer create a <code>bazel-out</code> symlink if <code>--symlink_prefix</code> is specified: the directory pointed to via the <code>bazel-out</code> symlink is accessible via <code>${symlink_prefix}-out</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9e4216e0c8c6974f79c9fbea71bd9129b9439066">Set <code>TEST_RUN_NUMBER</code> when the test runs multiple times.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/f38e293317088396163115cec07099026d63533e">All (instead of just C++) source files are now filtered for coverage output according to <code>--instrumentation_filter</code> and <code>--instrument_test_targets</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/fa118ae4b5d58648db574a08a60d5595d6b645dd"><code>genrule.srcs</code> is now considered a source attribute for coverage.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/9015f383220892b638d47257ddbd407b2ea07055"><code>label_keyed_string_dict</code> attributes are now considered when gathering instrumented files for coverage.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/2945ef5072f659878dfd88b421c7b80aa4fb6c80">Changed <code>DEFAULT_STUB_SHEBANG</code> to use python3 instead of python.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/20061f8fb7ed95924c6cdbaaaf3d06a64edf974e">Added the default <code>solib</code> dir to the <code>rpath</code> for shared libs with transitions.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/0803ce4cbeb209689bb97f1b5107383ca201e2b6">Removed <code>//visibility:legacy_public</code>.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/7cf0c349b2e1675deea9519be4a805d8daff732e">Removed <code>--action_graph</code> from the dump command.</a></li><li><a href="https://github.com/bazelbuild/bazel/commit/557a7e71eeb5396f2c87c909ddc025fde2678780">Added some fixes for the Starlark transition hash computation.</a></li></ul><h2>Summary</h2><p>As you can see,
Bazel 5.0 was a <em>massive</em> release.
Thankfully,
through the <a href="https://docs.bazel.build/versions/5.0.0/versioning.html#rolling-releases">rolling releases</a> process,
people were able to test,
or even actively depend on,
these changes well before the first 5.0 release candidate was cut.</p><p>I expect Bazel 5.1 to be a fast follow with some changes that missed the final release candidate.
Work on Bazel 6.0 is well underway as well,
and I look forward to summarizing its changes later this year.</p>]]></content>
        <author>
            <name>Brentley Jones</name>
            <uri>https://brentleyjones.com</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcoming Brentley Jones]]></title>
        <id>welcoming-brentley-jones</id>
        <link href="https://www.buildbuddy.io/blog/welcoming-brentley-jones"/>
        <updated>2021-12-13T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[At BuildBuddy, our mission is to bring the world's best developer tools to every company. A big part of that mission involves connecting engineers across different companies, sharing knowledge, and keeping an open dialog on best practices.]]></summary>
        <content type="html"><![CDATA[<p>At BuildBuddy, our mission is to bring the world&#x27;s best developer tools to every company. A big part of that mission involves connecting engineers across different companies, sharing knowledge, and keeping an open dialog on best practices.</p><p>That&#x27;s why we&#x27;re so excited to share that <a href="https://brentleyjones.com"><strong>Brentley Jones</strong></a> has joined BuildBuddy as a Staff Developer Evangelist. His deep experience with Bazel at scale will directly benefit BuildBuddy users and customers.</p><p>Brentley is a maintainer of Bazel&#x27;s <a href="https://github.com/bazelbuild/rules_apple/blob/master/MAINTENANCE.md#maintainers">rules_apple</a> and <a href="https://github.com/bazelbuild/rules_swift/">rules_swift</a> which contain Bazel&#x27;s support for iOS, macOS, Swift, and more. He&#x27;s also a regular contributor to the <a href="https://slack.bazel.build/">Bazel Slack</a>, and the <a href="https://github.com/bazelbuild/bazel/issues?q=author%3Abrentleyjones">Bazel GitHub repo</a>.</p><p>Brentley joins us from Lyft, where he was a Staff Software Engineer on their Client Tooling team. Prior to Lyft, Brentley was an engineer at Target, where he led their migration to Bazel.</p><p><img src="../static/img/blog/welcome_brentley.png"/></p><p>We look forward to working alongside Brentley to build the future of developer tools.</p><p>Welcome to BuildBuddy, Brentley!</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcoming Lulu Zhang]]></title>
        <id>welcoming-lulu-zhang</id>
        <link href="https://www.buildbuddy.io/blog/welcoming-lulu-zhang"/>
        <updated>2021-12-01T01:12:00.000Z</updated>
        <summary type="html"><![CDATA[To fulfill our mission of bringing the world's best developer tools to every company, we're continually expanding our team to keep up with demand we're seeing from customers. That's why we're excited to share today that Lulu Zhang is joining BuildBuddy's engineering team.]]></summary>
        <content type="html"><![CDATA[<p>To fulfill our mission of bringing the world&#x27;s best developer tools to every company, we&#x27;re continually expanding our team to keep up with demand we&#x27;re seeing from customers. That&#x27;s why we&#x27;re excited to share today that <a href="https://www.linkedin.com/in/luluzhang66/"><strong>Lulu Zhang</strong></a> is joining BuildBuddy&#x27;s engineering team.</p><p>Lulu joins us from Thumbtack. Prior to Thumbtack, Lulu spent 5 years at Google where she worked on Google Play, Project Fi, and Area 120.</p><p><img src="../static/img/blog/welcome_lulu.png"/></p><p>We look forward to working alongside Lulu to build the future of developer tools.</p><p>Welcome to BuildBuddy, Lulu!</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy v2.7.0 Release Notes]]></title>
        <id>buildbuddy-v2-7-0-release-notes</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-v2-7-0-release-notes"/>
        <updated>2021-11-18T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[To celebrate Bazelcon 2021 (and our Bazelcon talk), we've got a lot in store for you in this release! We're excited to share that v2.7.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open-source via Github, Docker, and our Helm Charts!]]></summary>
        <content type="html"><![CDATA[<p>To celebrate Bazelcon 2021 (and <a href="https://opensourcelive.withgoogle.com/events/bazelcon2021?talk=bazel-in-the-cloud">our Bazelcon talk</a>), we&#x27;ve got a lot in store for you in this release! We&#x27;re excited to share that <strong>v2.7.0</strong> of BuildBuddy is live on both <a href="https://app.buildbuddy.io/">Cloud Hosted BuildBuddy</a> and open-source via <a href="https://github.com/buildbuddy-io/buildbuddy">Github</a>, <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image">Docker</a>, and <a href="https://github.com/buildbuddy-io/buildbuddy-helm">our Helm Charts</a>!</p><p>We&#x27;ve also updated <a href="https://www.buildbuddy.io/open-source-repos">the list of open source repositories that use BuildBuddy</a>. If you have an open source repo that&#x27;s using BuildBuddy, and would like to be included on the list - please fill out the quick form at the bottom of that page!</p><p>Thanks to everyone using open source, cloud-hosted, and enterprise BuildBuddy. We&#x27;ve made lots of improvements in this release based on your feedback.</p><h2>New in v2.7.0</h2><ul><li><p><strong>M1 Mac support</strong> - we now <a href="https://github.com/buildbuddy-io/buildbuddy/releases/tag/v2.7.0">publish</a> BuildBuddy executor binaries built for M1 Macs. These can be used with BuildBuddy Cloud&#x27;s <strong>Bring Your Own Executors</strong> feature, BuildBuddy managed Mac executors, or in a self-hosted RBE cluster.</p></li><li><p><strong>Build log improvements</strong> - the build log viewer is core to the BuildBuddy experience. We&#x27;ve made a ton of improvements in this release to make this log viewing experience even better. Build logs are now <strong>live</strong> and update much more frequently. You can also now <strong>search</strong> build logs with a built-in search bar, <strong>download</strong> the raw build log text, and even <strong>wrap</strong> long lines.</p></li></ul><p><img src="../static/img/blog/build_logs.png"/></p><ul><li><strong>Cache miss debugging UI</strong> - one of the requests we get most frequently is for help debugging remote cache misses. There&#x27;s a <a href="https://docs.bazel.build/versions/main/remote-execution-caching-debug.html">guide</a> in the Bazel documentation, but it can be cumbersome to follow. We&#x27;ve made this process easier by surfacing individual action cache misses directly on the BuildBuddy cache tab. This allows you to quickly dive into which targets and actions missed cache and compare them against previous builds. You can click on any of these action hashes to explore the action&#x27;s input files, environment variables, and command arguments. This is just the first step in making cache misses easier to debug - we&#x27;re working on making this process even easier.</li></ul><p><img src="../static/img/blog/cache_misses.png"/></p><ul><li><strong>Member management &amp; roles</strong> - we&#x27;ve heard from many of the large organizations that we work with that they&#x27;d like to be able to limit which members of their organization are able to access certain BuildBuddy functionality - like editing organization settings. In order to support this, we&#x27;ve added a new member management UI on the BuildBuddy organization settings page. Here you can assign either <code>Admin</code> or <code>Developer</code> roles to members of your BuildBuddy organization.</li></ul><p><img src="../static/img/blog/members.png"/></p><ul><li><p><strong>Usage page</strong> - while our Trends page gives users great insight into how their build metrics are trending over time, it&#x27;s less useful for getting a sense of your total BuildBuddy usage for the current month (and previous months). We&#x27;ve introduced a new Usage page that allows you to get a quick glance of the metrics that are important for billing.
<img src="../static/img/blog/usage.png"/></p></li><li><p><strong>And much much more</strong> - Every release comes packed with so many new features, performance improvements and bug fixes that we can&#x27;t get to them all. Here are some more highlights:</p><ul><li>Mac support for remote persistent workers</li><li>API improvements, including a build log download endpoint and target filtering by tag</li><li>Fixes for issues that can cause unnecessary BEP disconnects</li><li>Improvements to autoscaling scale-downs</li><li>Reduced memory footprint</li><li>New BEP live data export functionality</li><li>Flag overrides for platform properties for switching between pools without invalidating the cache</li><li>SAML quality of life improvements</li><li>Configurable executor docker image warm up</li><li>Support for Azure Storage as a storage backend</li><li>AWS WebIdentity authentication support</li><li>Private container registry support</li><li>A built-in Xcode locator in executors for discovering available Xcode versions</li></ul></li></ul><h2>Coming soon!</h2><p>In addition to all of these great new features, we&#x27;ve also been laying the groundwork for some big new features that we&#x27;re working on:</p><ul><li>A new caching infrastructure that will enable far more flexibility in where and how cache artifacts are stored.</li><li>Mac support for <a href="https://blog.buildbuddy.io/blog/meet-buildbuddy-workflows/">BuildBuddy Workflows</a>.</li><li>A managed cloud Bazel service that uses <a href="https://firecracker-microvm.github.io/">Firecracker microVMs</a> to give you warm, incremental Bazel instances in the cloud (right next to your RBE cluster) that spin up in milliseconds.</li><li>A web-based code editor built on top of VSCode (similar to <a href="https://vscode.dev/">vscode.dev</a>) built entirely for Bazel that can kick off fully incremental RBE-enabled cloud Bazel builds &amp; tests. If you&#x27;re an ex-Googler who misses Cider <!-- -->—<!-- --> get excited!</li></ul><p>If you&#x27;re interested in any of these upcoming features and would like to try them out <!-- -->—<!-- --> <a href="https://buildbuddy.typeform.com/to/BZikT3Eu">sign up here for early access</a>!</p><p>That&#x27;s it for this release. Stay tuned for more updates!</p><p>As always, we love your feedback - join our <a href="https://slack.buildbuddy.io">Slack channel</a> or email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy v2.5.0 Release Notes]]></title>
        <id>buildbuddy-v2-5-0-release-notes</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-v2-5-0-release-notes"/>
        <updated>2021-08-30T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[We're excited to share that v2.5.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open-source via Github, Docker, and our Helm Charts!]]></summary>
        <content type="html"><![CDATA[<p>We&#x27;re excited to share that v2.5.0 of BuildBuddy is live on both <a href="https://app.buildbuddy.io/">Cloud Hosted BuildBuddy</a> and open-source via <a href="https://github.com/buildbuddy-io/buildbuddy">Github</a>, <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image">Docker</a>, and <a href="https://github.com/buildbuddy-io/buildbuddy-helm">our Helm Charts</a>!</p><p>Thanks to everyone using open source, cloud-hosted, and enterprise BuildBuddy. We&#x27;ve made lots of improvements in this release based on your feedback.</p><h2>New in v2.5.0</h2><ul><li><strong>The new global filter</strong> - BuildBuddy collects lots of build information across CI and local builds. In order to make navigating these builds easier, we&#x27;ve introduced a new global filter. The global filter allows you to filter by status and role on any page - with more options including user, repo, and branch coming soon.</li></ul><p><img src="../static/img/blog/global_filter.png"/></p><ul><li><strong>Date picker</strong> - To complement the new global filter, we&#x27;ve also added a date picker. The date picker allows you to select a time range and see builds, trends, etc. for exactly the time period you&#x27;re interested in.</li></ul><p><img src="../static/img/blog/date_picker.png"/></p><ul><li><strong>Clickable trends</strong> - Now that you can filter any view by date, we&#x27;ve added a feature to the Trends page that allows you to click on a data point and be taken to a filtered view of builds from just that time period. As part of this change, the trends page now also respects your local time zone.</li></ul><p><img src="../static/img/blog/trends.png"/></p><ul><li><strong>Branch information</strong> - BuildBuddy now collects information about a build&#x27;s git branch in addition to the repo and commit info already collected. This makes it even easier to navigate your builds.</li></ul><p><img src="../static/img/blog/branch.png"/></p><ul><li><strong>Light terminal theme</strong> - For those of you who suffer from eye strain when reading light text on dark backgrounds: we&#x27;ve heard your feedback. We&#x27;ve added a new light terminal theme that can be enabled in your personal settings.</li></ul><p><img src="../static/img/blog/light_terminal.png"/></p><ul><li><strong>Improved flaky test support</strong> - Flaky tests can destroy developer productivity. To make them easier to deal with, we&#x27;ve added a new feature that calls out flaky tests &amp; timeouts more explicitly. We&#x27;ve also improved the behavior of our RBE to reduce flakes due to timeouts when caused by external factors like Docker image pulls.</li></ul><p><img src="../static/img/blog/flaky_test.png"/></p><ul><li><strong>Remote executions tab</strong> - We&#x27;ve had a hidden feature for a while that allowed you to click on the <code>Remote execution on</code> label to see an overview of remotely executed actions for RBE builds. We&#x27;ve now promoted this feature to its own <code>Executions</code> tab. With this change come new features like search and filtering.</li></ul><p><img src="../static/img/blog/executions_tab.png"/></p><ul><li><strong>Action input &amp; output files</strong> - When clicking on an individual remotely executed actions, we now have a new file viewer that allows you to navigate the input files of the action. You can click on any of these files (as well as any output files the action has) to download them from the remote cache.</li></ul><p><img src="../static/img/blog/file_tree.png"/></p><ul><li><strong>Action timing</strong> - The timing tab gives you a breakdown of execution timing from Bazel&#x27;s point of view, but there&#x27;s another story to tell from the remote executor&#x27;s point of view. Action pages now show a visual breakdown of time spent in queue, downloading inputs, executing, and uploading outputs for each remotely executed action.</li></ul><p><img src="../static/img/blog/action_timeline.png"/></p><ul><li><strong>Revamped settings page</strong> - We&#x27;ve revamped the settings page to make it easier to manage your BuildBuddy account.</li></ul><p><img src="../static/img/blog/settings.png"/></p><ul><li><strong>And much much more</strong> - Every release comes packed with so many new features, performance improvements and bug fixes that we can&#x27;t get to them all. Here are some more highlights:<ul><li>Support for serving static files from a CDN</li><li>Support for MinIO as a storage backend</li><li>Buildkite links now link to the specific Buildkite job that spawned the invocation</li><li>Support for distributed tracing backends like Jaeger, Google Cloud Trace, and others</li></ul></li></ul><p>That&#x27;s it for this release. Stay tuned for more updates coming soon!</p><p>As always, we love your feedback - join our <a href="https://slack.buildbuddy.io">Slack channel</a> or email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Meet BuildBuddy Workflows]]></title>
        <id>meet-buildbuddy-workflows</id>
        <link href="https://www.buildbuddy.io/blog/meet-buildbuddy-workflows"/>
        <updated>2021-06-30T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[In today's BuildBuddy v2.3 release, which is now live on BuildBuddy Cloud, we're launching BuildBuddy Workflows. BuildBuddy Workflows is a Continuous Integration (CI) solution for Bazel repositories hosted on GitHub (with support for other providers coming soon).]]></summary>
        <content type="html"><![CDATA[<p>In today&#x27;s <a href="https://github.com/buildbuddy-io/buildbuddy/releases/tag/v2.3.0">BuildBuddy v2.3 release</a>, which is now live on BuildBuddy Cloud, we&#x27;re launching <strong>BuildBuddy Workflows</strong>. BuildBuddy Workflows is a Continuous Integration (CI) solution for Bazel repositories hosted on GitHub (with support for other providers coming soon).</p><p>Like other CI solutions, Workflows give you the confidence that your code
builds successfully and passes all tests before you merge pull requests or
deploy a new release.</p><p>But because BuildBuddy Workflows were built for Bazel repos and tightly
integrated with BuildBuddy RBE and Remote Caching, they are <strong><em>really fast</em></strong>.</p><h1>Why a Bazel-focused CI solution?</h1><p>Traditional <a href="https://en.wikipedia.org/wiki/Continuous_integration">CI systems</a>, like Jenkins, Travis, CircleCI, and BuildKite, are built around the concept of a pipeline. Pipelines allow you to specify a list of build/test steps to run for each commit or pull request to your repo. Pipelines are great because you can run many in parallel across multiple machines. Unfortunately, there are often dependencies between these pipelines, for example a build step that must be completed before a test step can begin.</p><p>Some tools, like <a href="https://docs.gitlab.com/ee/ci/pipelines/">GitLab Pipelines</a>, attempt to solve this problem by allowing you to specify dependencies between pipelines. This approach is better, but forces you to manually maintain the relationships between pipelines in a pile of YAML configuration files. As the number of dependencies grow, any sufficiently complex CI system <a href="https://gregoryszorc.com/blog/2021/04/07/modern-ci-is-too-complex-and-misdirected/">starts to resemble a build system</a>.</p><p>None of these pipeline-based approaches are well suited for Bazel&#x27;s approach to dependency management and remote build execution, which involves generating a <a href="https://en.wikipedia.org/wiki/Directed_acyclic_graph">Directed Acyclic Graph</a> of all build and test actions. Bazel&#x27;s approach allows for optimal parallelization and caching of these actions. It also enables rebuilding and retesting only affected targets, saving both engineering time and compute resources.</p><h2>How fast are BuildBuddy Workflows?</h2><p>We&#x27;ve used BuildBuddy Workflows on our own repos for the past few
months, comparing them side-by-side with our existing CI solution built on GitHub Actions with BuildBuddy RBE and Remote Caching enabled.</p><p>By leveraging warm, hosted, Bazel processes, as well as BuildBuddy&#x27;s
remote caching and execution, Workflows dramatically sped up our CI runs.
Compared to our previous solution (which used BuildBuddy RBE and Remote Caching on GitHub Runners), we reduced the median duration by nearly <strong>8X</strong> <!-- -->—<!-- --> with most CI runs completing in just a few seconds.</p><p>This overlapping histogram chart shows the complete picture. Note that
the majority of BuildBuddy workflow runs took 30 seconds or less, while
nearly all runs on GitHub Actions took at least 2 minutes and 15 seconds:</p><p><img src="../static/img/blog/workflows.png" alt="overlapping histogram comparing BuildBuddy and GitHub actions"/></p><h2>How did we make BuildBuddy Workflows so fast?</h2><p>In addition to convenience and security, one of our main goals for Workflows
was to maximize performance, even for very large source repositories.</p><p>We did this in two main ways:</p><ol><li>Ensuring a <strong>fast network connection between Bazel and BuildBuddy&#x27;s RBE &amp; caching servers</strong>.</li><li>Running workflows against <strong>hosted, warm, Bazel instances</strong>.</li></ol><h3>Fast connection to BuildBuddy RBE</h3><p>In our experience, network latency is often the biggest bottleneck in many Bazel Remote Build Execution and Remote Caching setups.</p><p>The solution here was simple: run Workflows on executors in the same datacenters where BuildBuddy RBE and Cache nodes are deployed.</p><p>With GitHub actions or other CI solutions, the network connection might
be fast (particularly after the recent network optimizations we made in
<a href="/blog/introducing-buildbuddy-v2">BuildBuddy v2</a>) <!-- -->—<!-- --> but not nearly as fast
as having workflow runners on the same local network as BuildBuddy
itself.</p><h3>Hosted, Warm, Bazel instances</h3><p>Once you have a sufficiently fast RBE and Remote Caching setup, and have removed network bottlenecks <!-- -->—<!-- --> the CI bottleneck often becomes Bazel&#x27;s <a href="https://docs.bazel.build/versions/main/glossary.html#analysis-phase">analysis phase</a>.</p><p>By re-using warm Bazel processes when possible, we&#x27;re able to re-use Bazel&#x27;s analysis cache across CI runs of the same repo. This can save several minutes per build, depending on the size of your repository and the number of external dependencies being pulled in.</p><p>This is similar to how <a href="https://dl.acm.org/doi/pdf/10.1145/3395363.3397371">Google&#x27;s Build Dequeuing Service</a> performs workspace selection:</p><blockquote><p>A well-chosen workspace can increase the build speed by an
order of magnitude by reusing the various cached results from the
previous execution. <!-- -->[...]<!-- --> We have observed that builds that execute the same targets as a previous
build are effectively no-ops using this technique</p></blockquote><h2>How do I use BuildBuddy Workflows?</h2><p>BuildBuddy Workflows are launching today, in Beta, for all GitHub users. You can get started with BuildBuddy Workflows by checking out our <a href="https://docs.buildbuddy.io/docs/workflows-setup/">setup guide</a>.
If you&#x27;ve already linked your GitHub account to BuildBuddy, it&#x27;ll only take
about 30 seconds to enable Workflows for your repo <!-- -->—<!-- --> just select a repo
to link, and we&#x27;ll take care of the rest!</p><h2>Other changes in BuildBuddy v2.3</h2><p>While the main focus of BuildBuddy v2.3 has been on launching BuildBuddy Workflows, the release also contains several other features, in addition to lots of bug fixes and performance improvements.</p><h3>Dependency graph visualization</h3><p>We added dependency graph visualizations for <code>bazel query</code> commands that use the <code>--output graph</code> parameter. This visualization is zoom-able and pan-able, and can render graphs with thousands of edges.</p><p>Here&#x27;s an example of a command you can run to generate a graph:</p><pre><code class="language-shell">bazel query &#x27;//...&#x27; --output graph --bes_backend=remote.buildbuddy.io --bes_results_url=https://app.buildbuddy.io/invocation/
</code></pre><p>And the resulting output:</p><p><img src="../static/img/blog/query_graph.png" alt="Bazel query dependency graph visualization"/></p><h3>Clickable RBE Actions</h3><p>For actions executed with BuildBuddy Remote Build Execution, you can now click on individual actions to get the full set of command arguments, environment variables, execution metadata, output files, and more:</p><p><img src="../static/img/blog/clickable_rbe_actions.png" alt="RBE actions view"/></p><p>That&#x27;s it for this release! As always, message us on <a href="https://buildbuddy.slack.com">Slack</a> or
<a href="https://github.com/buildbuddy-io/buildbuddy/issues/new">file an issue</a>
if you need help, run into any issues, or have feature requests!</p>]]></content>
        <author>
            <name>Brandon Duffany</name>
            <uri>https://www.linkedin.com/in/brandon-duffany-39b7217a</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing BuildBuddy v2]]></title>
        <id>introducing-buildbuddy-v2</id>
        <link href="https://www.buildbuddy.io/blog/introducing-buildbuddy-v2"/>
        <updated>2021-05-27T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[Our mission at BuildBuddy is to make developers more productive. When we released the first version of BuildBuddy a little over a year ago, we were blown away by the demand for tools and techniques for speeding up common developer workflows like building, testing, and debugging code. We've been working hard ever since - using our own tools to build the next generation of developer tooling for all.]]></summary>
        <content type="html"><![CDATA[<p>Our mission at BuildBuddy is to make developers more productive. When we released the <a href="https://blog.buildbuddy.io/blog/meet-buildbuddy">first version</a> of BuildBuddy a little over a year ago, we were blown away by the demand for tools and techniques for speeding up common developer workflows like building, testing, and debugging code. We&#x27;ve been working hard ever since - using our own tools to build the next generation of developer tooling for all.</p><p>Today we&#x27;re excited to announce v2 of BuildBuddy! We&#x27;ve completely revamped our caching and remote build execution infrastructure to give our users and customers the one thing they care about above all else: <strong>speed</strong>.</p><p><img src="../static/img/blog/tensorflow.svg"/></p><p>When optimizing the performance of a remote build execution system, there are 3 critical bottlenecks: Caching, Sandboxing, and Execution. We&#x27;ve made order of magnitude improvements in each of these areas, bringing clean, uncached build times for <a href="https://github.com/tensorflow/tensorflow">TensorFlow</a> (7,000+ actions) on BuildBuddy RBE down from 28 minutes last August to just <strong>3.47 minutes</strong> with BuildBuddy v2. This build takes over <strong>4 hours</strong> (250 min) on a 3.3GHz i7 Macbook Pro.</p><h2>Caching</h2><p>The biggest remote build execution bottleneck is right in the name: <strong>remote</strong>. This means we have to ship source files, tools, and other inputs needed to execute the build from the host machine to a remote cluster of build servers over the network.</p><p>In BuildBuddy v2, some of the many improvements in this area include:</p><ul><li>Completely revamped caching infrastructure for microsecond read/write latencies</li><li>Improved batch performance for quickly moving 100k+ small files</li><li>Load balancer optimizations to improve large file throughput</li></ul><p>For a more in-depth look at optimizing for high throughput and low latency, we highly recommend <a href="https://dropbox.tech/infrastructure/optimizing-web-servers-for-high-throughput-and-low-latency">this great article from the Dropbox Engineering team</a> which was incredibly helpful in identifying and fixing bottlenecks.</p><p>All of these improvements, when taken together, have driven a colossal improvement in both upload and download throughput across file sizes. We have more work to do in this area, but we&#x27;re really pleased with the results in this release.</p><p><img src="../static/img/blog/upload_throughput.svg"/></p><h2>Sandboxing</h2><p>Once we&#x27;ve got all of the inputs we need to execute an action on a remote executor, the next step is to set up the execution root. One of Bazel&#x27;s core features is the ability to perform <a href="https://georgi.hristozov.net/2020/11/01/the-power-of-hermetic-builds">hermetic builds</a>. In order to achieve this, we spin up a clean Docker container for each action to execute in. This is similar to Bazel&#x27;s <code>docker</code> <a href="https://docs.bazel.build/versions/master/remote-execution-sandbox.html">spawn strategy</a>.</p><p>While this helps ensure that remotely executed actions are hermetic, there is often a trade-off between hermeticity and performance. You can make this trade-off locally using Bazel&#x27;s different spawn strategies: <code>sandboxed</code>, <code>local</code>, and <code>worker</code>.</p><p>When using remote build execution, you typically don&#x27;t have the ability to make these trade-offs. That&#x27;s why we&#x27;ve introduced 3 new features that give users back some of that control. By default, actions will still be executed in clean Docker images - but if you specify one of the following execution properties, you can alter that behavior:</p><ul><li><code>recycle-runner</code>: actions will still be executed in a clean execution root - but the executor will re-use an existing docker image from a pool of re-usable containers. This is similar in behavior to Bazel&#x27;s <code>sandboxed</code> execution strategy.</li><li><code>preserve-workspace</code>: actions will re-use an execution root from a pool of re-usable workspaces and only download inputs that have been added or changed since the previously executed action, while cleaning up any outputs. This is similar in behavior to Bazel&#x27;s <code>local</code> execution strategy.</li><li><code>persistent-workers</code>: the executor will use the <a href="https://docs.bazel.build/versions/master/persistent-workers.html">persistent-worker</a> protocol to communicate with actions that support them. This can help speed up certain build actions that support persist workers (like Java, Scala, Typescript, and others) by 2-4x. This execution property can be applied at the <a href="https://docs.buildbuddy.io/docs/rbe-pools#target-level">target level</a> for actions that support them. We&#x27;ve also added support for the proposed <code>persistentWorkerKey</code> execution property which removes the need for target-level specification. This is similar in behavior to Bazel&#x27;s <code>worker</code> execution strategy.</li></ul><h2>Execution</h2><p>Now that we&#x27;ve got our inputs on the executor, and our execution root set up, our final step is the actual execution.</p><p>We&#x27;ve made significant improvements here as well:</p><ul><li>We&#x27;ve upgraded our default executor cluster to run on compute-optimized Intel Cascade Lake machines with up to 3.8 GHz sustained all-core turbo.</li><li>Our Mac executors now run on bare-metal Mac minis, which show huge improvements over the previous <a href="https://www.macstadium.com/orka">Orka</a> machines we used for I/O intensive workloads.</li><li>Our new caching and auto-scaling infrastructure supports scaling up and down from just a few executors to hundreds of machines depending on load while still supporting the <code>--remote_download_minimal</code> flag.</li><li>The groundwork has been laid for what we call <strong>Bring Your Own Executors</strong>. This will allow users to take advantage of BuildBuddy&#x27;s UI and global caching infrastructure while running their own executor pools.</li></ul><p><img src="../static/img/blog/autoscaling.png"/></p><h2>Other improvements</h2><p>While our focus for v2 has been on RBE performance, we&#x27;ve made plenty of other improvements in this release:</p><ul><li>Improved query performance for large customers with 1 million+ invocations</li><li>Added hinted handoff for write failures</li><li>Fetches are now displayed in the results UI</li><li>Timing tab improvements</li><li>Right click to copy downloadable artifact URLs</li><li>Lots and lots of reliability improvements</li><li>Default Xcode version configuration options</li></ul><p>We have several big announcements coming in the next few weeks, so stay tuned for more!</p><p>As always, we love your feedback - join our <a href="https://slack.buildbuddy.io">Slack channel</a> or email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p><p>Happy Building!</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy Achieves SOC 2 Certification]]></title>
        <id>buildbuddy-achieves-soc-2-certification</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-achieves-soc-2-certification"/>
        <updated>2021-04-28T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[Our mission at BuildBuddy is to help developers be more productive. It's our highest priority to make sure that your data is safe so that you can focus on what matters: building your product.]]></summary>
        <content type="html"><![CDATA[<p>Our mission at BuildBuddy is to help developers be more productive. It&#x27;s our highest priority to make sure that your data is safe so that you can focus on what matters: building your product.</p><p>Today, we’re excited to share that BuildBuddy has achieved SOC 2 certification.</p><p align="center"><img src="/img/soc2.jpg"/></p><p>The audit was conducted by <a href="https://thecadencegroup.com/">The Cadence Group</a>, compliance specialists who have performed SOC reporting examinations for some of the largest software companies in the world. Our certification means that we adhere to the highest standards of security, processing integrity, and risk management.</p><p>Our SOC 2 Report outlines how we encrypt our customer’s data, control access to our systems, scan for vulnerabilities, respond to incidents, and more.</p><p>In addition to completing our SOC 2 audit, we&#x27;ve partnered with <a href="https://www.vanta.com/products/soc-2">Vanta</a> to continuously monitor our SOC 2 compliance and ensure that the security practices we&#x27;ve put in place are being followed.</p><p>We’re happy to discuss our security policies in more detail or send over a copy of our SOC 2 report. Please feel free to reach out to us at <a href="mailto:security@buildbuddy.io">security@buildbuddy.io</a> for more information!</p>]]></content>
        <author>
            <name>George Li</name>
            <uri>https://www.linkedin.com/in/gli/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy v1.8.0 Release Notes]]></title>
        <id>buildbuddy-v1-8-0-release-notes</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-v1-8-0-release-notes"/>
        <updated>2021-03-18T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[We're excited to share that v1.8.0 of BuildBuddy is live on Cloud Hosted BuildBuddy, Enterprise, and Open Source via GitHub, Docker, and our Helm Charts!]]></summary>
        <content type="html"><![CDATA[<p>We&#x27;re excited to share that v1.8.0 of BuildBuddy is live on <a href="https://app.buildbuddy.io/">Cloud Hosted BuildBuddy</a>, Enterprise, and Open Source via <a href="https://github.com/buildbuddy-io/buildbuddy">GitHub</a>, <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image">Docker</a>, and <a href="https://github.com/buildbuddy-io/buildbuddy-helm">our Helm Charts</a>!</p><p>Thanks to everyone using open source, cloud-hosted, and enterprise BuildBuddy. We&#x27;ve made lots of improvements in this release based on your feedback.</p><p><strong>A special thank you to our new open-source contributor:</strong></p><ul><li><a href="https://github.com/ashleydavies"><strong>Ashley Davies</strong></a> who contributed several pull requests to our <a href="https://github.com/buildbuddy-io/buildbuddy-helm/">Helm charts</a> in order to make them easier to use in clusters that already have an Nginx controller deployed.</li></ul><p><strong>And a warm welcome to our three new team members!</strong></p><ul><li><a href="https://www.linkedin.com/in/pari-parajuli/"><strong>Pari Parajuli</strong></a> who joins our engineering team as an intern who&#x27;s currently studying at University of California, Berkeley.</li><li><a href="https://www.linkedin.com/in/vadimberezniker/"><strong>Vadim Berezniker</strong></a> who joins our engineering team after 7 years at Google on the Google Cloud team.</li><li><a href="https://www.linkedin.com/in/zoey-greer/"><strong>Zoey Greer</strong></a> who joins us as a software engineer from the Google Search team.</li></ul><p>We&#x27;re excited to continue growing BuildBuddy and fulfill our mission of making developers more productive!</p><p>Our focus for this release was on reliability, performance, improved documentation, and making BuildBuddy easier to release and monitor.</p><h2>New in v1.8.0</h2><ul><li><strong>Read-only API keys</strong> - when using Bazel remote caching, teams often need to configure which machines have write access to the cache. While Bazel has some flags to control cache writes, using these can be error prone and insecure. BuildBuddy now makes this easy by introducing the ability to create both read-only and read+write api keys on your organization settings page. You can create as many API keys (and certificates) as you&#x27;d like and distribute them to your CI machines, workstations, and other endpoints.</li></ul><p><img src="../static/img/blog/read-only.png"/></p><ul><li><strong>Improved docs</strong> - we&#x27;ve completely revamped <a href="https://docs.buildbuddy.io/">our documentation</a> and added support for tables of contents, syntax highlighting, better navigation, dark mode (!!), interactive widgets, and an &quot;Edit this page&quot; button that links directly to the correct file in our <a href="https://github.com/buildbuddy-io/buildbuddy/tree/master/docs">GitHub docs directory</a> for submitting pull requests. With these great new features, we&#x27;ll be ramping up documentation on both new and existing BuildBuddy features to make the lives of BuildBuddy users easier.</li></ul><p><img src="../static/img/blog/docsv2.png"/></p><ul><li><p><strong>Testing improvements</strong> - we&#x27;ve invested heavily in our testing infrastructure, adding new integration tests and test fixtures that make testing BuildBuddy&#x27;s interactions with Bazel easier. This will lead to more stable releases and faster iteration cycles going forward.</p></li><li><p><strong>Remote execution improvements</strong> - we&#x27;ve made more speed and reliability improvements to our remote build execution platform, including faster cache hit checking, faster auth checks, and better support for iOS builds.</p></li><li><p><strong>Buildkite integration -</strong> invocations that are kicked off from Buildkite now link back to the Buildkite job that triggered them.</p></li></ul><p><img src="../static/img/blog/buildkite.png"/></p><ul><li><strong>Grafana</strong> - our <a href="https://github.com/buildbuddy-io/buildbuddy-helm">Helm charts</a> make deploying BuildBuddy to Kubernetess cluster a breeze. One thing that&#x27;s been tricky for many users has been accessing the Prometheus data that BuildBuddy exports in an easily digestible format. To fix this, we made it easy to <a href="https://github.com/buildbuddy-io/buildbuddy-helm/tree/master/charts/buildbuddy-enterprise#example-with-prometheus--grafana">deploy Grafana and Prometheus</a> via our Helm charts with just a couple lines of configuration. It comes out of the box with a default dashboard that shows popular BuildBuddy metrics and can be easily extended to add more graphs.</li></ul><p><img src="../static/img/blog/grafana.png"/></p><ul><li><strong>More to come</strong> - we&#x27;ve been laying the groundwork for two major projects that will go live in the coming weeks to make building and testing your Bazel projects even faster.</li></ul><p>That&#x27;s it for this release. Stay tuned for more updates coming soon!</p><p>As always, we love your feedback - join our <a href="https://slack.buildbuddy.io">Slack channel</a> or email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy v1.5.0 Release Notes]]></title>
        <id>buildbuddy-v1-5-0-release-notes</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-v1-5-0-release-notes"/>
        <updated>2021-01-08T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[We're excited to share that v1.5.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open-source via Github, Docker, and our Helm Charts!]]></summary>
        <content type="html"><![CDATA[<p>We&#x27;re excited to share that v1.5.0 of BuildBuddy is live on both <a href="https://app.buildbuddy.io/">Cloud Hosted BuildBuddy</a> and open-source via <a href="https://github.com/buildbuddy-io/buildbuddy">Github</a>, <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image">Docker</a>, and <a href="https://github.com/buildbuddy-io/buildbuddy-helm">our Helm Charts</a>!</p><p>Thanks to everyone using open source, cloud-hosted, and enterprise BuildBuddy. We&#x27;ve made lots of improvements in this release based on your feedback.</p><p>A special thank you to our new open-source contributor:</p><ul><li><a href="https://github.com/restingbull"><strong>Corbin McNeely-Smith</strong></a> who contributed to making our auth flow more resilient to error cases, and made our health-check handlers more flexible to support different load-balancers.</li></ul><p>Our focus for this release was on giving users more visibility into test flakiness, monitoring &amp; scaling improvements, and security hardening.</p><h2>New in v1.5.0</h2><ul><li><strong>Test flakiness dashboard</strong> - one of the feature requests we get most frequently from BuildBuddy users is the ability to collect target-level data and analyze it across invocations. Today we&#x27;re taking the first step in the direction with our new test dashboard. The test dashboard allows you to monitor per-target test statuses by commit - so you can quickly identify and fix flaky test targets that slow down developer velocity. It also has a timing view that gives you a heat-map to quickly identify slow targets. This is just the first step we&#x27;re taking in exposing more target-level data and are excited to build additional features based on your feedback!</li></ul><p><img src="../static/img/blog/test-grid.png"/></p><ul><li><strong>Prometheus metrics</strong> - we&#x27;ve added a ton of new Prometheus metrics to BuildBuddy that allow open-source and Enterprise users to monitor not only BuildBuddy&#x27;s performance, but the overall health of their developer productivity efforts. This allows you to hook into existing monitoring and alerting tools like Grafana to analyze and get notified when your developers are experiencing issues. Metrics include build duration, cache hit &amp; miss rates, remote execution queue length, and more. For a full list of the new metrics we now expose, see our <a href="https://www.buildbuddy.io/docs/prometheus-metrics">Prometheus metric documentation</a>. Interested in some metrics that aren&#x27;t on this list? Let us know!</li></ul><p><img src="../static/img/blog/prometheus.png"/></p><ul><li><strong>Auto-scaling</strong> - with the addition of our new Prometheus metrics, we&#x27;ve also made improvements to the autoscaling capabilities of BuildBuddy executors. Now in addition to scaling off of raw compute metrics like CPU and RAM, BuildBuddy executors can also be configured to scale based on executor queue length and other custom metrics. This allows you to achieve better performance under heavy load while also managing your compute resources more efficiently and cost-effectively.</li></ul><p><img src="../static/img/blog/autoscaling-prometheus.png"/></p><ul><li><p><strong>Security hardening</strong> - as part of our SOC 2 compliance controls, BuildBuddy undergoes regularly scheduled penetration tests by paid security professionals. This release contains fixes for all three non-critical findings from our January 2021 pen-test.</p></li><li><p><strong>Memory leak fixes</strong> - we found and fixed 2 memory leaks in our BuildBuddy app (using our new Prometheus metrics!) that would occasionally cause BuildBuddy app servers to restart due to memory pressure.</p></li><li><p><strong>Mac executor bug fix</strong> - we fixed a tricky bug caused by quirks in the way macOS handles hard-linking that significantly improves the reliability of our Mac RBE executors.</p></li><li><p><strong>More bug fixes</strong> - there are lots of other bug fixes in this release including improved deadline and timeout handling, executor task scheduling improvements, and more!</p></li></ul><p>That&#x27;s it for this release. Stay tuned for more updates coming soon!</p><p>As always, we love your feedback - join our <a href="https://slack.buildbuddy.io">Slack channel</a> or email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy v1.4.0 Release Notes]]></title>
        <id>buildbuddy-v1-4-0-release-notes</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-v1-4-0-release-notes"/>
        <updated>2020-11-12T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[We're excited to share that v1.4.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open-source via Github and Docker!]]></summary>
        <content type="html"><![CDATA[<p>We&#x27;re excited to share that v1.4.0 of BuildBuddy is live on both <a href="https://app.buildbuddy.io/">Cloud Hosted BuildBuddy</a> and open-source via <a href="https://github.com/buildbuddy-io/buildbuddy">Github</a> and <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image">Docker</a>!</p><p>Thanks to everyone using open source, cloud-hosted, and enterprise BuildBuddy. We&#x27;ve made lots of improvements in this release based on your feedback.</p><p>A special thank you to our new contributors who we&#x27;ll soon be sending BuildBuddy t-shirts and holographic BuildBuddy stickers:</p><ul><li><p><a href="https://github.com/purkhusid"><strong>Daniel Purkhús</strong></a> who enabled environment variable expansion in BuildBuddy config files &amp; more</p></li><li><p><a href="https://github.com/gravypod"><strong>Joshua Katz</strong></a> who added support for auto-populating build metadata from GitLab CI invocations</p></li></ul><p>Our focus for this release was on giving users new tools to share, compare, analyze, and manage BuildBuddy invocations - as well as major performance and reliability improvements to our remote build execution service.</p><p>We&#x27;re also excited to share that over the coming weeks and months, we&#x27;ll be open sourcing much more of BuildBuddy - including our remote build execution platform. At BuildBuddy we&#x27;re firmly committed to open source and believe that a transparent and open model is the only way to build truly great developer infrastructure for all.</p><h2>New to Open Source BuildBuddy</h2><ul><li><strong>Invocation sharing &amp; visibility controls</strong> - while you&#x27;ve always been able to share BuildBuddy links with members of your organization, it&#x27;s been difficult to share invocations more broadly (in GitHub issues or on StackOverflow). Now that working from home is the new norm, sharing links to your build logs or invocations details and artifacts has become more important than ever. To support this, we&#x27;ve added a <strong>Share</strong> button on the invocation page that allows you to control visibility of your invocations (this can be disabled at the organization level). We&#x27;ve also disabled the expiration of invocations and build logs for everyone on BuildBuddy Cloud - so you can share BuildBuddy links with confidence.</li></ul><p><img src="../static/img/blog/share.png"/></p><ul><li><strong>Invocation diffing</strong> - we&#x27;ve all run into the problem where a build works on your machine, but not on your coworker&#x27;s machine. To support debugging these kinds of issues, we&#x27;ve added the ability to diff builds straight from the invocations page. This allows you to quickly find any flags or invocation details that may have changed between builds. Stay tuned for more diffing features here, including cache hit debugging and more.</li></ul><p><img src="../static/img/blog/compare.png"/></p><ul><li><strong>Suggested fixes</strong> - as software engineers, we often find ourselves bumping into errors and issues that many others have bumped into before. A tool like BuildBuddy provides the perfect way to quickly surface these suggested fixes to developers quickly, without even so much as a Google search. We&#x27;ve started by adding suggestions for common issues that BuildBuddy users run into, but stay tuned for the ability to add your own custom fix suggestions and share them with your organization and beyond!</li></ul><p><img src="../static/img/blog/suggested-fixes.png"/></p><ul><li><strong>Easy invocation deletion</strong> - you can now delete your BuildBuddy invocations directly from the invocation page &quot;three dot&quot; menu in case you want to share an invocation and delete it when you&#x27;re done.</li></ul><p><img src="../static/img/blog/deletion.png"/></p><h2>New to Cloud &amp; Enterprise BuildBuddy</h2><ul><li><strong>Cache stats &amp; filters</strong> - our trends page now allows you to see trends in caching performance broken down by the Action Cache (AC) and the Content Addressable Store (CAS). The trends page is now also filterable by CI vs non-CI builds, and by user, repo, commit, or host.</li></ul><p><img src="../static/img/blog/filtered-trends.png"/></p><ul><li><strong>Simplified API key header auth</strong> - previously if you wanted to authenticate your BuildBuddy invocations using an API key (instead of using certificated based mTLS), you had to place your API key in each BuildBuddy flag that connected to BuildBuddy with <code>YOUR_API_KEY@cloud.buildbuddy.io</code>. This has been greatly simplified in this release with the support for the <code>--remote_header</code> flag, which allows you to more easily separate auth credentials into a separate <code>.bazelrc</code> file.</li></ul><p><img src="../static/img/blog/api-header.png"/></p><ul><li><strong>Organization creation and invitations</strong> - you can now create organizations and send invitation links to others.</li></ul><p><img src="../static/img/blog/org-invites.png"/></p><ul><li><strong>Remote build execution performance and reliability improvements</strong> - we&#x27;ve made a whole host of changes to our remote build execution executors and schedulers to make them more fault tolerant, easier to scale, and faster. We&#x27;ve also exposed support for executor pools on BuildBuddy Enterprise which allow you to route remote execution traffic based on OS, CPU architecture, GPU requirements, CPU/memory requirements, and more. Routing can be configured at both the platform and individual target level. Finally, we&#x27;ve added improved documentation to help get up and running with RBE more quickly.</li></ul><p>That&#x27;s it for this release. Stay tuned for more updates coming soon!</p><p>As always, we love your feedback - join our <a href="https://slack.buildbuddy.io">Slack channel</a> or email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcoming George Li, Head of Sales]]></title>
        <id>welcoming-george-li-head-of-sales</id>
        <link href="https://www.buildbuddy.io/blog/welcoming-george-li-head-of-sales"/>
        <updated>2020-11-12T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[To fulfill our mission of bringing the world's best developer tools to every company, we're building a team that's ready to work with the world's best enterprises. That's why we're excited to share today that George Li is joining BuildBuddy to lead our enterprise sales efforts as our Head of Sales.]]></summary>
        <content type="html"><![CDATA[<p>To fulfill our mission of bringing the world&#x27;s best developer tools to every company, we&#x27;re building a team that&#x27;s ready to work with the world&#x27;s best enterprises. That&#x27;s why we&#x27;re excited to share today that <a href="https://www.linkedin.com/in/gli/"><strong>George Li</strong></a> is joining BuildBuddy to lead our enterprise sales efforts as our Head of Sales.</p><p>George joins us from Looker where he served as Head of APAC Sales Engineering. He joined Google Cloud through their <a href="https://techcrunch.com/2020/02/13/google-closes-2-6b-looker-acquisition/">acquisition</a> of Looker in February, having helped the company grow to a $2.6B valuation.</p><p><img src="../static/img/blog/welcome-george.png"/></p><p>We look forward to working alongside George to build the future of developer tools.</p><p>Welcome to BuildBuddy, George!</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy v1.3.0 Release Notes]]></title>
        <id>buildbuddy-v1-3-0-release-notes</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-v1-3-0-release-notes"/>
        <updated>2020-09-30T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[We're excited to share that v1.3.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open-source via Github and Docker!]]></summary>
        <content type="html"><![CDATA[<p>We&#x27;re excited to share that v1.3.0 of BuildBuddy is live on both<a href="https://app.buildbuddy.io/"> Cloud Hosted BuildBuddy</a> and open-source via<a href="https://github.com/buildbuddy-io/buildbuddy"> Github</a> and<a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image"> Docker</a>!</p><p>Thanks to everyone using open source and cloud-hosted BuildBuddy. We’ve made lots of improvements in this release based on your feedback.</p><p>Our focus for this release was on giving users new tools to improve build performance, debug cache hits, and a completely redesigned Cloud &amp; Enterprise experience.</p><h2>New to Open Source BuildBuddy</h2><ul><li><strong>Timing profile explorer </strong>- Bazel&#x27;s timing profile is the best way to get detailed insights into where to spend your time optimizing your build. Unfortunately, extracting useful information out of the thousands of events can be challenging without using something like Chrome&#x27;s profiling tools. Now we&#x27;ve built these tools right into the BuildBuddy timing tab so you can explore this info for any build. See which actions dominate your build&#x27;s critical path or find out how much time is spent downloading outputs - now with a single click.</li></ul><p><img src="../static/img/blog/timing-profile.png"/></p><p>Dive into the timing for every action, critical path information, and more.</p><ul><li><strong>Cache stats </strong>- one of the feature requests we get most frequently is for more information on cache hits and misses. This data can be tricky to get a hold of because it&#x27;s not made easily available by Bazel&#x27;s build event protocol. That&#x27;s why we&#x27;ve introduced BuildBuddy&#x27;s new cache tab. It gives you a view into cache hits, misses, and writes for every invocation that uses BuildBuddy&#x27;s gRPC cache. It breaks these numbers down by action cache (AC) and content addressable store (CAS). BuildBuddy also tracks the volume and throughput of cache requests so you can see how much data is moving in and out of the cache - and at what speed.</li></ul><p><img src="../static/img/blog/cache-stats.png"/></p><p>Get a view into cache performance for every invocation.</p><ul><li><strong>Environment variable redaction controls</strong> - when debugging cache hits, it can be useful to get a full picture of the inputs that are affecting a particular build - like the PATH environment variable. By default, BuildBuddy redacts nearly all environment variables passed into Bazel. We&#x27;ve added controls per invocation that allow you to optionally allow environment variables of your choice to skip redaction. Information on configuring this can be found in our<a href="https://www.buildbuddy.io/docs/guide-metadata#environment-variable-redacting"> build metadata docs</a>.</li></ul><h2>New to Cloud &amp; Enterprise BuildBuddy</h2><ul><li><strong>Redesigned navigation </strong>- as BuildBuddy has grown from a debugging tool to a fully-featured platform to debug, analyze, monitor, and share builds across your organization, we&#x27;ve outgrown the minimal navigation setup that has gotten us this far. In Cloud and Enterprise BuildBuddy, we&#x27;ve replaced the top menu bar with a more fully-featured left-nav. This gives us room to add new features like Trends and provides easier access to critical pages like Setup &amp; Docs.</li></ul><p><img src="../static/img/blog/navigation.png"/></p><p>The new navigation makes room for new features.</p><ul><li><strong>Trends </strong>- BuildBuddy has lots of information about every invocation that it collects. Now with Trends, you can follow how your builds are changing over time. Have all of the cache improvements you&#x27;ve been working on decreased average build time over the last month? Has the addition of a new external dependency significantly increased the length of your slowest builds? Answering these questions is easy with BuildBuddy Trends.</li></ul><p><img src="../static/img/blog/trends-v0.png"/></p><ul><li><strong>Redis Pub/Sub support </strong>- we&#x27;ve added support for Redis Pub/Sub to significantly improve remote build execution performance. It&#x27;s completely optional for on-prem deployments, but in our testing it&#x27;s improved performance for builds with lots of small actions by a factor of 2x. No change is required for Cloud users - just enjoy the faster builds!</li></ul><p>That’s it for this release. Stay tuned for more updates coming soon!</p><p>As always, we love your feedback - join our<a href="https://slack.buildbuddy.io"> Slack channel</a> or email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy v1.2.1 Release Notes]]></title>
        <id>buildbuddy-v1-2-1-release-notes</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-v1-2-1-release-notes"/>
        <updated>2020-09-03T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[Excited to share that v1.2.1 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open source via Github and Docker!]]></summary>
        <content type="html"><![CDATA[<p>Excited to share that v1.2.1 of BuildBuddy is live on both <a href="https://app.buildbuddy.io/">Cloud Hosted BuildBuddy</a> and open source via <a href="https://github.com/buildbuddy-io/buildbuddy">Github</a> and <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/docs/on-prem.md#docker-image">Docker</a>!</p><p>Thanks to everyone that has tested open source and cloud-hosted BuildBuddy. We&#x27;ve made lots of improvements in this release based on your feedback.</p><p>A special welcome to our newest contributor and <strong>team member</strong>:</p><ul><li><a href="https://github.com/bduffany">Brandon Duffany</a> - Brandon is an ex-Googler and Cornell alumn who&#x27;s worked as a software engineer on Google Assistant and Google Ads. He&#x27;ll start off focused on surfacing better profiling and timing information to help users track down and fix slow builds!</li></ul><p>Our focus for this release was on expanding access to BuildBuddy as well as improving scalability and performance.</p><p>We&#x27;re also excited to announce that we&#x27;re expanding the BuildBuddy Cloud free tier. BuildBuddy Cloud is now <strong>free for teams of up to 3 engineers</strong> in addition to being free for individuals open source projects of any size.</p><h2>New to Open Source BuildBuddy</h2><ul><li><strong>Official BuildBuddy Helm charts</strong> - thanks to a <a href="https://github.com/buildbuddy-io/buildbuddy/issues/35">request</a> from <a href="https://github.com/nathanhleung">Nathan Leung</a> we&#x27;ve created official <a href="https://github.com/buildbuddy-io/buildbuddy-helm">BuildBuddy Helm Charts</a> that are available for both <a href="https://github.com/buildbuddy-io/buildbuddy-helm/tree/master/charts/buildbuddy">Open Source</a> and <a href="https://github.com/buildbuddy-io/buildbuddy-helm/tree/master/charts/buildbuddy-enterprise">Enterprise</a> deployments. <a href="https://helm.sh/">Helm</a> enables you to deploy BuildBuddy to a Kubernetes cluster with a single command, and makes configuration a breeze. The charts can optionally take care of provisioning a MySQL instance, an Nginx ingress, and even Memcached.</li></ul><p><img src="../static/img/blog/helm.png"/></p><ul><li><p><strong>Build metadata</strong> - a frequent request from users is the ability to associate a BuildBuddy invocation with a particular git commit and repo. To support this, we&#x27;ve added optional build metadata including repo URL, commit SHA, and CI role that can be passed up with your build. This metadata can be passed up using the <code>--build_metadata</code> flag, using a <code>--workspace_status_command</code> script, or using environment variables commonly set by CI providers like CircleCI, BuildKite, GitHub Actions, and others. More information on how to configure your metadata can be found in our <a href="https://www.buildbuddy.io/docs/guide-metadata">build metadata guide.</a></p></li><li><p><strong>GitHub commit status publishing</strong> - now that you can configure build metadata to associate invocations with a GitHub repo and commit, we&#x27;ve added the ability to publish commit statuses straight to GitHub when you&#x27;ve set your metadata role to <strong>CI</strong>. To enable this feature, simply click <strong>Link GitHub Account</strong> in your BuildBuddy profile dropdown (if you&#x27;re using self hosted BuildBuddy, you&#x27;ll need to <a href="https://www.buildbuddy.io/docs/config-github">create a Github OAuth app</a> and add it to your config.yaml file).</p></li></ul><p><img src="../static/img/blog/commit-status.png"/></p><p>BuildBuddy links directly on GitHub</p><ul><li><p><strong>Improved cache hit rate</strong> - we&#x27;ve made improvement to our Action Cache validation logic that should result in higher cache hit rates.</p></li><li><p><strong>New guides</strong> - we&#x27;ve added new guides to our documentation, including our <a href="https://www.buildbuddy.io/docs/guide-auth">Authentication Guide</a>, <a href="https://www.buildbuddy.io/docs/guide-metadata">Build Metadata Guide</a>, <a href="https://www.buildbuddy.io/docs/rbe-github-actions">Remote Build Execution with Github Actions Guide</a>, with more coming soon. We&#x27;ve also started collecting troubleshooting documentation for common errors including <a href="https://www.buildbuddy.io/docs/troubleshooting-rbe">RBE Failures</a>, and <a href="https://www.buildbuddy.io/docs/troubleshooting-slow-upload">Slow Uploads</a>. Contributions <a href="https://github.com/buildbuddy-io/buildbuddy/tree/master/docs">welcome</a>!</p></li><li><p><strong>Target information in timing tab</strong> - in Bazel 3.4.0, the experimental <a href="https://docs.bazel.build/versions/master/command-line-reference.html#flag--experimental_profile_include_target_label">flag</a> <code>--experimental_profile_include_target_label</code> was introduced which adds target information to profiling events. When this flag is enabled, this target information is now displayed in the BuildBuddy Timing tab.</p></li></ul><h2>New to Cloud &amp; Enterprise BuildBuddy</h2><ul><li><strong>BuildBuddy Cloud is now free for teams of up to 3</strong> - we want to make BuildBuddy available to every team - regardless of size. BuildBuddy has always been free for individuals and open source projects and today we&#x27;re expanding this to teams of up to 3 engineers. As your team continues to grow, we have reasonably priced plans that scale from startups to the largest enterprises.</li></ul><p><img src="../static/img/blog/pricing.png"/></p><ul><li><p><strong>Distributed scheduler</strong> - the scheduler is a core component of any remote execution platform. In many cases, it is a single point of failure that turns an otherwise robust system into a fragile, stateful service that&#x27;s hard to scale. In BuildBuddy 1.2.1, we rewrote our <strong>distributed</strong> Remote Build Execution scheduler from the ground up based on many learnings and best practices from state-of-the-art systems like Apache Spark. This enables BuildBuddy to scale to handle the largest workloads with no single point of failure, single digit millisecond queue wait times, and fault tolerance that enables execution on preemptible nodes. This allows for more cost effective high availability configurations, and allows you to deploy new BuildBuddy releases without a blip in ongoing executions.</p></li><li><p><strong>Remote asset API</strong> - in Bazel 3.0.0 the Remote Asset API was introduced along with the <code>--experimental_remote_downloader</code> <a href="https://docs.bazel.build/versions/master/command-line-reference.html#flag--experimental_remote_downloader">flag</a>. In this release, we&#x27;ve added basic support for this experimental API.</p></li><li><p><strong>Organization configuration</strong> - we&#x27;ve added configuration options for on-prem installs that allow you to configure an organization&#x27;s name and limit signups to emails from a specific domain. More information in the <a href="https://www.buildbuddy.io/docs/config-org">org config documentation</a>.</p></li><li><p><strong>Configurable anonymous access</strong> - we&#x27;ve added a configuration option that allows organizations with authentication configured to choose whether or not anonymous access should be enabled. Anonymous access is off by default when auth is configured. More information in the <a href="https://www.buildbuddy.io/docs/config-auth">auth config documentation</a>.</p></li><li><p><strong>S3 cache support</strong> - BuildBuddy <a href="https://github.com/buildbuddy-io/buildbuddy/pull/12">previously</a> had support for using Amazon S3 as a backing store for build events. In this release, we&#x27;ve added Amazon S3 support for as a backing store for caching as well, with support for streaming, ContainsMulti, and more.</p></li></ul><p>That&#x27;s it for this release. Stay tuned for more updates coming soon!</p><p>As always, we love your feedback - join our <a href="https://slack.buildbuddy.io">Slack channel</a> or email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy v1.1.0 Release Notes]]></title>
        <id>buildbuddy-v1-1-0-release-notes</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-v1-1-0-release-notes"/>
        <updated>2020-07-15T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[Excited to share that v1.1.0 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open source via Github and Docker!]]></summary>
        <content type="html"><![CDATA[<p>Excited to share that v1.1.0 of BuildBuddy is live on both <a href="https://app.buildbuddy.io/">Cloud Hosted BuildBuddy</a> and open source via <a href="https://github.com/buildbuddy-io/buildbuddy">Github</a> and <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/SETUP.md#docker-image">Docker</a>!</p><p>Thanks to everyone that has tested open source and cloud-hosted BuildBuddy. We&#x27;ve made lots of improvements in this release based on your feedback.</p><p>A special thank you to our new contributors:</p><ul><li><a href="https://github.com/SrodriguezO">Sergio Rodriguez Orellana</a> who contributed support for making dense mode the default view mode.</li><li><a href="https://twitter.com/timgl?lang=en">Tim Glaser</a> who made some major improvements to our documentation.</li></ul><p>Our focus for this release was on our new Remote Build Execution platform. This release marks a huge step in fulfilling our mission of making developers more productive by supporting the Bazel ecosystem.</p><p>BuildBuddy&#x27;s Remote Build Execution platform supports executing your Bazel build and tests in parallel across thousands of machines with automatic scaling, support for custom Docker images, and more. We&#x27;ve been iterating on and testing BuildBuddy RBE for months with companies of different sizes, and are excited to now make it available to everyone.</p><p>While BuildBuddy RBE is not yet fully open source, we&#x27;re offering Cloud RBE for free to individuals and open source projects to show our appreciation to the open source community.</p><p>We&#x27;ll be adding more documentation on getting started with BuildBuddy RBE in the coming weeks, but in the meantime feel free to email us at <a href="mailto:rbe@buildbuddy.io">rbe@buildbuddy.io</a> or ping us in the <a href="https://join.slack.com/t/buildbuddy/shared_invite/zt-e0cugoo1-GiHaFuzzOYBPQzl9rkUR_g">BuildBuddy Slack</a> and we&#x27;ll be happy to help you get started.</p><h2><strong>New to Open Source BuildBuddy</strong></h2><ul><li><strong>Cache &amp; remote execution badges - </strong>BuildBuddy invocations pages now show badges that indicate whether or not caching and remote execution are enabled. Clicking on these badges takes you to instructions on how to configure these if they&#x27;re enabled for your BuildBuddy instance.</li></ul><p><img src="../static/img/blog/cache-badge.png"/></p><ul><li><strong>Remote build execution configuration options</strong> - the BuildBuddy configuration widget has now been updated to enable configuring of remote build execution if it&#x27;s enabled for your BuildBuddy instance.</li></ul><p><img src="../static/img/blog/config-options.png"/></p><ul><li><strong>Better build status support</strong> - BuildBuddy now better distinguishes between in-progress, failed, passed, and cancelled builds with new colorful status indicators, favicons, and more.</li></ul><p><img src="../static/img/blog/favicon.png"/></p><ul><li><strong>Improved documentation and new website</strong> - we&#x27;ve completely revamped the BuildBuddy documentation, and it&#x27;s now sync&#x27;d between GitHub and <a href="https://buildbuddy.io/docs/">buildbuddy.io/docs/</a>, so your docs will be fresh regardless of where you&#x27;re reading them. We&#x27;ll be adding new sections on configuring RBE in the coming weeks. We&#x27;ve also completely revamped the BuildBuddy website to make it easier to navigate and perform actions like requesting a quote, or subscribing to our <a href="#wf-form-Newsletter-Form">newsletter</a>.</li></ul><p><img src="../static/img/blog/docs.png"/></p><ul><li><strong>Test run grid</strong> - BuildBuddy will now automatically display test runs as a grid when a single test target is run more than 10 times. This supports the use case of finding and fixing flaky tests by running them with <strong>--runs_per_test=100</strong>.</li></ul><p><img src="../static/img/blog/test-runs.png"/></p><ul><li><strong>Performance and reliability improvements</strong> - we put a lot of work into improving performance and reliability in this release. This includes changes like better event flushing (no more getting stuck on 15 build events), better shutdown behavior, speed improvements and optimizations in build artifact uploading and downloading, and more.</li></ul><h2>New to Cloud &amp; Enterprise BuildBuddy</h2><ul><li><strong>Remote Build Execution</strong> - BuildBuddy Cloud and enterprise on-prem now support Remote Build Execution. Features include custom Docker image support, automatic scaling, multiple caching layers, and more. Additional features like Mac support, viewing of remote build actions in BuildBuddy, and more are coming soon.</li></ul><p><img src="../static/img/blog/rbe.png"/></p><ul><li><strong>Invocation grouping</strong> - BuildBuddy invocations can now be grouped by commit and by repo. These can be populated in one of three ways:</li></ul><ol><li>automatically by common CI environments like CircleCI and GitHub actions</li><li>manually by using build flags <strong>--build_metadata=REPO_URL=</strong> and <strong>--build_metadata=COMMIT_SHA=</strong>‍</li><li>by using a <strong>--workspace_status_command</strong> script like <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/workspace_status.sh">this one</a></li></ol><p><img src="../static/img/blog/commits.png"/></p><ul><li><p><strong>New cloud endpoint</strong> - BuildBuddy now exposes a L7 load balanced gRPCS cloud endpoint at <strong>cloud.buildbuddy.io</strong> which can be used for BES, cache, and remote execution (see our <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/.bazelrc#L25">.bazelrc</a> for an example). We&#x27;ll gradually be migrating users to this from the old events.buildbuddy.io, and cache.buildbuddy.io endpoints with port numbers.</p></li><li><p><strong>Easier enterprise deployment</strong> - deploying enterprise BuildBuddy is now just as easy as deploying open source BuildBuddy, with a one line install script that deploys to your Kubernetes cluster. It takes your <a href="https://www.buildbuddy.io/docs/config">BuildBuddy configuration file</a> as a parameter so you can easily configure things to your needs.</p></li></ul><p>That&#x27;s it for this release. Stay tuned for more updates coming soon!</p><p>As always, we love your feedback - email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy v1.0.6 Release Notes]]></title>
        <id>buildbuddy-v1-0-6-release-notes</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-v1-0-6-release-notes"/>
        <updated>2020-05-20T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[Excited to share that v1.0.6 of BuildBuddy is live on both Cloud Hosted BuildBuddy and open source via Github and Docker!]]></summary>
        <content type="html"><![CDATA[<p>Excited to share that v1.0.6 of BuildBuddy is live on both <a href="https://app.buildbuddy.io/">Cloud Hosted BuildBuddy</a> and open source via <a href="https://github.com/buildbuddy-io/buildbuddy">Github</a> and <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/SETUP.md#docker-image">Docker</a>!</p><p>Thanks to all of you that have been using open source and cloud-hosted BuildBuddy. We&#x27;ve made lots of improvements in this release based on your feedback.</p><p>A special thank you to our new contributors:</p><ul><li><a href="https://github.com/rogerhu">Roger Hu</a> who contributed <a href="https://github.com/buildbuddy-io/buildbuddy/commit/8ba12398e448b457cdbd1e0c8913e9aba46323cb">Amazon S3 storage support</a>.</li><li><a href="https://github.com/achew22">Andrew Allen</a> who <a href="https://github.com/buildbuddy-io/buildbuddy/commit/59bee5228c7c3da9d0cdaba934fce2118e7e9adc">updated BuildBuddy&#x27;s open source repo</a> to conform to open source golang expectations.</li></ul><p>Our three major focuses for this release were on a better test results view, certificate based authentication, and our new results-store API.</p><p>We also laid a lot of groundwork for remote build execution in this release, which will be available in the coming weeks.</p><h2>New to Open Source BuildBuddy</h2><ul><li><p><strong>Test results view</strong> - we&#x27;ve added support for parsing test.xml files that are uploaded to a BuildBuddy remote cache. This allows us to show information about individual test cases and quickly surface information on which test cases failed and why.</p></li><li><p><strong>Large log file support</strong> - we&#x27;ve improved BuildBuddy&#x27;s log viewer to enable the rendering of 100MB+ log files with full ANSI color support in milliseconds using incremental rendering.</p></li><li><p><strong>Timing controls</strong> - BuildBuddy&#x27;s timing tab now has improved controls that enable users to choose grouping and page size options. This allows you to easily see the slowest build phases across threads.</p></li><li><p><strong>gRPCS support</strong> - BuildBuddy now supports and defaults to encrypted gRPCS connections to Bazel using TLS. Support includes automatic obtaining of server-side TLS certificates using <a href="https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment">ACME</a> and <a href="https://letsencrypt.org/">Let&#x27;s Encrypt</a>. This also includes the ability to connect to remote caches over gRPCS via the bytestream API.</p></li><li><p><strong>URL secret redaction</strong> - we&#x27;ve updated our log scrubbing logic to redact any URLs that might contain secrets from uploaded build events.</p></li></ul><p>Our open source BuildBuddy distribution is targeted at individuals viewing and debugging their Bazel builds. For teams and organizations, we provide an enterprise version of BuildBuddy that adds support for team-specific features.</p><p>Many of these Enterprise features are also available for free to individuals via <a href="https://app.buildbuddy.io/">Cloud Hosted BuildBuddy</a>.</p><h2>New to Cloud &amp; Enterprise BuildBuddy</h2><ul><li><p><strong>Certificate based auth</strong> - authentication between Bazel and BuildBuddy can now be authenticated and encrypted using certificate-based <a href="https://en.wikipedia.org/wiki/Mutual_authentication">mTLS</a>.</p></li><li><p><strong>Auth configuration widget</strong> - using BuildBuddy&#x27;s new configuration widget, it&#x27;s easy to setup an auth configuration that makes sense for your team. This includes options to pull credentials into user-specific <code>.bazelrc</code> files and download generated auth certificates.</p></li><li><p><strong>Build Results API</strong> - many teams want to do more with their build results. With BuildBuddy&#x27;s <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/proto/api/v1/service.proto">Build Results API</a> - users have programmatic access to an invocation&#x27;s targets, actions, and build artifacts. This allows teams to build out custom integrations with their existing tooling. If you&#x27;d like access to the API, or have more information you&#x27;d like exposed, email <a href="https://buildbuddy.io/blog/buildbuddy-v1-0-6-release-notes/developers@buildbuddy.io">developers@buildbuddy.io</a>.</p></li></ul><p>That&#x27;s it for this release. Stay tuned for more updates coming soon!</p><p>As always, we love your feedback - email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing BuildBuddy Version 1.0]]></title>
        <id>introducing-buildbuddy-v1</id>
        <link href="https://www.buildbuddy.io/blog/introducing-buildbuddy-v1"/>
        <updated>2020-04-24T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[We released our initial open source version of BuildBuddy to the Bazel community last month and have received a ton of interest, support, and feedback. We really appreciate everyone who's taken the time to kick the tires and try it out!]]></summary>
        <content type="html"><![CDATA[<p>We released our initial open source version of BuildBuddy to the Bazel community last month and have received a ton of interest, support, and feedback. We really appreciate everyone who&#x27;s taken the time to kick the tires and try it out!</p><p>We&#x27;re excited to share that BuildBuddy has been run on-prem at over 20 companies, and hundreds more developers have tried our cloud-hosted version.</p><p>People have found the shareable invocation links particularly useful when debugging builds remotely with co-workers while working from home. No more pasting console outputs into Pastebin!</p><p>We&#x27;ve taken all of the feedback we&#x27;ve gotten and made lots of improvements to both the open source and enterprise versions of BuildBuddy.</p><p>Our three major focuses for this release were on better build artifact handling, better test support, and enterprise authentication. We hope these changes help you continue to build and debug software faster. Keep the feedback coming!</p><h2>New to Open Source BuildBuddy</h2><ul><li><p><strong>Remote cache support</strong> - we&#x27;ve added a built-in Bazel remote cache to BuildBuddy, implementing the gRPC remote caching APIs. This allows BuildBuddy to optionally collect build artifacts, timing profile information, test logs, and more.</p></li><li><p><strong>Clickable build artifacts</strong> - this was our most requested feature. Clicking on build artifacts in the BuildBuddy UI now downloads the artifact when using either the built-in BuildBuddy cache, or a third-party cache running in gRPC mode that supports the Byte Stream API - like <a href="https://github.com/buchgr/bazel-remote">bazel-remote</a>.</p></li><li><p><strong>Detailed timing information</strong> - getting detailed timing information on your Bazel builds can be a hassle. Now BuildBuddy invocations include a new &quot;Timing&quot; tab - which pulls the Bazel profile logs from your build cache and displays them in a human-readable format. Stay tuned for flame charts!</p></li><li><p><strong>Viewable test logs</strong> - digging into test logs for your Bazel runs can be a pain. Now BuildBuddy surfaces test logs directly in the UI when you click on a test target (gRPC remote cache required).</p></li><li><p><strong>Multiple test-run support</strong> - one of our favorite features of Bazel is that it will rerun flaky tests for you. BuildBuddy now supports viewing information about multiple attempts of a single test run.</p></li><li><p><strong>Client environment variable redaction</strong> - client environment variables are now redacted from BuildBuddy&#x27;s invocation details to avoid over-sharing.</p></li><li><p><strong>Dense UI mode</strong> - based on feedback on information density of the default BuildBuddy UI, we added a &quot;Dense mode&quot; that packs more information into every square inch.</p></li><li><p><strong>BES backend multiplexing</strong> - we heard from some of you that you&#x27;d like to try BuildBuddy, but were already pointing your bes_backend flag at another service. We&#x27;ve added the build_event_proxy configuration option that allows you to specify other backends that your build events should be forwarded to. See the <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/CONFIG.md#buildeventproxy">configuration docs</a> for more information.</p></li><li><p><strong>Slack webhook support</strong> - we&#x27;ve added a configuration option that allows you to message a Slack channel when builds finish. This is a nice way of getting a quick notification when a long running build completes, or a CI build fails. See the <a href="https://github.com/buildbuddy-io/buildbuddy/blob/master/CONFIG.md#integrations">configuration docs</a> for more information.</p></li></ul><p>Our open source BuildBuddy distribution is targeted at individuals viewing and debugging their Bazel builds. For teams and organizations, we provide an enterprise version of BuildBuddy that adds support for team-specific features.</p><h2>New to Enterprise BuildBuddy</h2><ul><li><p><strong>OpenID Connect auth support</strong> - organizations can now specify an OpenID Connect provider to handle authentication for their BuildBuddy instance. This allows for the flexibility to use Google login if you use GSuite, auth services like Okta, or an in-house solution that supports OpenID Connect.</p></li><li><p><strong>Authenticated build log &amp; cache uploads</strong> - BuildBuddy now supports generating authenticated upload URLs for both the build event and remote cache backends. Events uploaded with authentication will be associated with your organization and will not be viewable by unauthorized clients.</p></li><li><p><strong>Organization support</strong> - BuildBuddy now supports creating organizations that allow builds to be viewed and aggregated across your team/company.</p></li><li><p><strong>Organization build history</strong> - with organization support comes a new view that allows you to see recent builds across your organization.</p></li><li><p><strong>User &amp; host overviews</strong> - you can now see all of the users and hosts that have uploaded builds to your organization. This allows you to drill into all of the builds uploaded from a CI machine for example.</p></li><li><p><strong>Build grid</strong> - the new build grid gives you a visual overview of the build history for an organization, host, or user. This allows you to quickly find and fix failing builds.</p></li></ul><p>That&#x27;s it for this release. Stay tuned for more updates coming soon!</p><p>As always, we love your feedback - email us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> with any questions, comments, or thoughts.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[BuildBuddy joins Y Combinator]]></title>
        <id>buildbuddy-joins-y-combinator</id>
        <link href="https://www.buildbuddy.io/blog/buildbuddy-joins-y-combinator"/>
        <updated>2020-03-16T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[If you've hung out around developers for any extended period --- you've probably heard "my code is compiling" as an excuse from them when they're slacking off and browsing Hacker News.]]></summary>
        <content type="html"><![CDATA[<p>If you&#x27;ve hung out around developers for any extended period --- you&#x27;ve probably heard &quot;my code is compiling&quot; as an excuse from them when they&#x27;re slacking off and browsing Hacker News.</p><figure class="image"><img src="/img/xkcd.png"/><figcaption>&quot;Compiling&quot; via <a href="https://xkcd.com/303/">XKCD</a></figcaption></figure><p>Slow, flaky builds waste hours of developer time --- leading to slow dev refresh cycles and unhappy, unproductive engineers. This is the problem we&#x27;re solving at BuildBuddy.</p><p><a href="http://buildbuddy.io/">BuildBuddy</a> is a managed <a href="https://bazel.build/">Bazel</a> build system. It brings a Google-style development environment and 10x faster builds to any company.</p><p>We&#x27;re excited to share that we&#x27;ve been accepted into <a href="https://www.ycombinator.com/">Y Combinator</a> and have been participating in their Winter 2020 batch. Here&#x27;s a photo from our first batch dinner where the founders of Airbnb (YC Winter 2009) told us stories about their YC experience:</p><figure class="image"><img src="/img/yc-dinner.jpg"/><figcaption>Airbnb founders speak at our first batch dinner via <a href="https://twitter.com/gustaf/status/1215039947356270594">Gustaf Alstromer</a></figcaption></figure><p>We&#x27;re excited to share more about BuildBuddy in the coming months. If you intrigued and want to learn more - feel free to shoot us an email at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a>.</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Meet BuildBuddy]]></title>
        <id>meet-buildbuddy</id>
        <link href="https://www.buildbuddy.io/blog/meet-buildbuddy"/>
        <updated>2020-03-04T12:00:00.000Z</updated>
        <summary type="html"><![CDATA[BuildBuddy is a managed Bazel build system --- it brings a Google-style development environment to any company in minutes.]]></summary>
        <content type="html"><![CDATA[<p>BuildBuddy is a managed <a href="https://bazel.build/">Bazel</a> build system --- it brings a Google-style development environment to any company in minutes.</p><p>The first product we&#x27;ve built is an <a href="https://en.wikipedia.org/wiki/Open-core_model">open-core</a> Bazel build log viewer. It consumes the Bazel <a href="https://docs.bazel.build/versions/master/build-event-protocol.html">build event protocol</a> and makes logs accessible through a user-friendly web UI. If you&#x27;re familiar with <a href="https://mike-bland.com/2012/10/01/tools.html#tap-and-sponge">Google&#x27;s Sponge tool</a> - it&#x27;s basically an open source version of that. It&#x27;s available in 3 forms:</p><ul><li><strong>Open source</strong> - You can find the core product open source and free to use with an MIT license on <a href="https://github.com/buildbuddy-io/buildbuddy">GitHub</a>.</li><li><strong>Cloud hosted</strong> - We also offer a cloud hosted version of the product at <a href="https://buildbuddy.io/">buildbuddy.io</a>. Plans range from a free version for personal use to an enterprise version suited for companies with complex needs.</li><li><strong>On-prem</strong> - We offer an enterprise version of the product that you can run on-premises or in your own cloud. This version comes with all the bells and whistles - like dashboards, user accounts, and dedicated support.</li></ul><p>The Bazel build log viewer is just the start. We&#x27;re working on a <a href="https://docs.bazel.build/versions/master/remote-caching.html">shared build cache</a>, <a href="https://docs.bazel.build/versions/master/remote-execution.html">remote build execution</a>, and more.</p><p>Our end goal is to take the pain out of managing Bazel, so you can focus on building your product.</p><p>Reach out to us at <a href="mailto:hello@buildbuddy.io">hello@buildbuddy.io</a> if you&#x27;re interested, we&#x27;d love to chat!</p>]]></content>
        <author>
            <name>Siggi Simonarson</name>
            <uri>https://www.linkedin.com/in/siggisim/</uri>
        </author>
    </entry>
</feed>