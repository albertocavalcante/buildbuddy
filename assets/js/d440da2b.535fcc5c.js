"use strict";(self.webpackChunkbuildbuddy_docs_website=self.webpackChunkbuildbuddy_docs_website||[]).push([[6609],{67646:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=o(85893),t=o(11151);const s={id:"rbe-platforms",title:"RBE Platforms",sidebar_label:"RBE Platforms"},i=void 0,a={id:"rbe-platforms",title:"RBE Platforms",description:"BuildBuddy default",source:"@site/../docs/rbe-platforms.md",sourceDirName:".",slug:"/rbe-platforms",permalink:"/docs/rbe-platforms",draft:!1,unlisted:!1,editUrl:"https://github.com/buildbuddy-io/buildbuddy/edit/master/docs/../docs/rbe-platforms.md",tags:[],version:"current",lastUpdatedBy:"Brandon Duffany",lastUpdatedAt:1701714189,formattedLastUpdatedAt:"Dec 4, 2023",frontMatter:{id:"rbe-platforms",title:"RBE Platforms",sidebar_label:"RBE Platforms"},sidebar:"someSidebar",previous:{title:"Remote Build Execution Setup",permalink:"/docs/rbe-setup"},next:{title:"RBE Secrets",permalink:"/docs/secrets"}},d={},l=[{value:"BuildBuddy default",id:"buildbuddy-default",level:2},{value:"Using a custom Docker image",id:"using-a-custom-docker-image",level:2},{value:"ENTRYPOINT and CMD",id:"entrypoint-and-cmd",level:3},{value:"Passing credentials for Docker images",id:"passing-credentials-for-docker-images",level:3},{value:"Specifying a custom executor pool",id:"specifying-a-custom-executor-pool",level:2},{value:"Target level execution properties",id:"target-level-execution-properties",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"buildbuddy-default",children:"BuildBuddy default"}),"\n",(0,r.jsxs)(n.p,{children:["BuildBuddy's default platform is Ubuntu 16.04 with Java 8 installed. Building on our basic command can specify this platform with the ",(0,r.jsx)(n.code,{children:"--host_platform"})," flag:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"--host_platform=@buildbuddy_toolchain//:platform\n"})}),"\n",(0,r.jsx)(n.h2,{id:"using-a-custom-docker-image",children:"Using a custom Docker image"}),"\n",(0,r.jsx)(n.p,{children:"You can configure BuildBuddy RBE to use a custom docker image, by adding the following rule to a BUILD file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'platform(\n    name = "docker_image_platform",\n    constraint_values = [\n        "@bazel_tools//platforms:x86_64",\n        "@bazel_tools//platforms:linux",\n        "@bazel_tools//tools/cpp:clang",\n    ],\n    exec_properties = {\n        "OSFamily": "Linux",\n        "container-image": "docker://gcr.io/YOUR:IMAGE",\n    },\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Make sure to replace ",(0,r.jsx)(n.code,{children:"gcr.io/YOUR:IMAGE"})," with your docker image url."]}),"\n",(0,r.jsx)(n.p,{children:"You can then pass this configuration to BuildBuddy RBE with the following flag:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"--host_platform=//:docker_image_platform\n"})}),"\n",(0,r.jsx)(n.p,{children:"This assumes you've placed this rule in your root BUILD file. If you place it elsewhere, make sure to update the path accordingly."}),"\n",(0,r.jsx)(n.h3,{id:"entrypoint-and-cmd",children:"ENTRYPOINT and CMD"}),"\n",(0,r.jsxs)(n.p,{children:["Remote build actions will be run in your container via ",(0,r.jsx)(n.code,{children:"CMD"}),", so note that any ",(0,r.jsx)(n.code,{children:"CMD"})," instructions in your Dockerfile will be ignored.\n",(0,r.jsx)(n.code,{children:"ENTRYPOINT"}),", on the other hand, is not ignored, so make sure that the container image's ",(0,r.jsx)(n.code,{children:"ENTRYPOINT"})," is either unset,\nor is a wrapper that is compatible with your build actions' commands."]}),"\n",(0,r.jsxs)(n.p,{children:["For more information, see ",(0,r.jsx)(n.a,{href:"https://docs.docker.com/engine/reference/builder/#understand-how-cmd-and-entrypoint-interact",children:"Understand how CMD and ENTRYPOINT interact"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"passing-credentials-for-docker-images",children:"Passing credentials for Docker images"}),"\n",(0,r.jsxs)(n.p,{children:["You can use images from private container registries by adding the following\nflags to your ",(0,r.jsx)(n.code,{children:"bazel"})," command (replace ",(0,r.jsx)(n.code,{children:"USERNAME"})," and ",(0,r.jsx)(n.code,{children:"ACCESS_TOKEN"})," with\nthe appropriate credentials for the container registry):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"--remote_exec_header=x-buildbuddy-platform.container-registry-username=USERNAME\n--remote_exec_header=x-buildbuddy-platform.container-registry-password=ACCESS_TOKEN\n"})}),"\n",(0,r.jsxs)(n.p,{children:["For the value of ",(0,r.jsx)(n.code,{children:"ACCESS_TOKEN"}),", we recommend generating a short-lived\ntoken using the command-line tool for your cloud provider."]}),"\n",(0,r.jsxs)(n.p,{children:["To generate a short-lived token for GCR (Google Container Registry),\nthe username must be ",(0,r.jsx)(n.code,{children:"_dcgcloud_token"})," and the token can be generated with\n",(0,r.jsx)(n.code,{children:"gcloud auth print-access-token"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'--remote_exec_header=x-buildbuddy-platform.container-registry-username=_dcgcloud_token\n--remote_exec_header=x-buildbuddy-platform.container-registry-password="$(gcloud auth print-access-token)"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["For Amazon ECR (Elastic Container Registry), the username must be ",(0,r.jsx)(n.code,{children:"AWS"}),"\nand a short-lived token can be generated with ",(0,r.jsx)(n.code,{children:"aws ecr get-login-password --region REGION"}),"\n(replace ",(0,r.jsx)(n.code,{children:"REGION"})," with the region matching the ECR image URL):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'--remote_exec_header=x-buildbuddy-platform.container-registry-username=AWS\n--remote_exec_header=x-buildbuddy-platform.container-registry-password="$(aws ecr get-login-password --region REGION)"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Some cloud providers may also allow the use of long-lived tokens, which\ncan also be used in remote headers. For example, GCR allows setting a\nusername of ",(0,r.jsx)(n.code,{children:"_json_key"})," and then using a service account's\n",(0,r.jsx)(n.a,{href:"https://cloud.google.com/iam/docs/creating-managing-service-account-keys",children:"JSON-format private key"}),"\nas the password. Note that remote headers cannot have newlines;\nthe command ",(0,r.jsx)(n.code,{children:"tr '\\n' ' '"})," is used in this example to remove them:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"--remote_exec_header=x-buildbuddy-platform.container-registry-username=_json_key\n--remote_exec_header=x-buildbuddy-platform.container-registry-password=\"$(cat service-account-keyfile.json | tr '\\n' ' ')\"\n"})}),"\n",(0,r.jsx)(n.h2,{id:"specifying-a-custom-executor-pool",children:"Specifying a custom executor pool"}),"\n",(0,r.jsx)(n.p,{children:"You can configure BuildBuddy RBE to use a custom executor pool, by adding the following rule to a BUILD file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'platform(\n    name = "gpu_platform",\n    constraint_values = [\n        "@bazel_tools//platforms:x86_64",\n        "@bazel_tools//platforms:linux",\n        "@bazel_tools//tools/cpp:clang",\n    ],\n    exec_properties = {\n        "OSFamily": "Linux",\n        "Pool": "my-gpu-pool",\n    },\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Make sure to replace ",(0,r.jsx)(n.code,{children:"my-gpu-pool"})," with your pool name."]}),"\n",(0,r.jsx)(n.p,{children:"You can then pass this configuration to BuildBuddy RBE with the following flag:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"--host_platform=//:gpu_platform\n"})}),"\n",(0,r.jsx)(n.p,{children:"This assumes you've placed this rule in your root BUILD file. If you place it elsewhere, make sure to update the path accordingly."}),"\n",(0,r.jsxs)(n.p,{children:["For instructions on how to deploy custom executor pools, we the ",(0,r.jsx)(n.a,{href:"/docs/rbe-pools",children:"RBE Executor Pools docs"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"target-level-execution-properties",children:"Target level execution properties"}),"\n",(0,r.jsxs)(n.p,{children:["If you want different targets to run in different RBE environments, you can specify ",(0,r.jsx)(n.code,{children:"exec_properties"})," at the target level. For example if you want to run one set of tests in a high-memory pool, or another set of targets on executors with GPUs."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'go_test(\n    name = "memory_hogging_test",\n    srcs = ["memory_hogging_test.go"],\n    embed = [":go_default_library"],\n    exec_properties = {\n        "Pool": "high-memory-pool",\n    },\n)\n'})})]})}function u(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},11151:(e,n,o)=>{o.d(n,{Z:()=>a,a:()=>i});var r=o(67294);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);