"use strict";(self.webpackChunkbuildbuddy_docs_website=self.webpackChunkbuildbuddy_docs_website||[]).push([[2470],{4137:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=u(n),p=o,g=h["".concat(l,".").concat(p)]||h[p]||d[p]||r;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9883:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return d}});var a=n(7462),o=n(3366),r=(n(7294),n(4137)),i=["components"],s={slug:"bazel-remote-cache-debugging",title:"Bazel Remote Cache Debugging",description:"All about the new cache requests card and how to use it.",author:"Brandon Duffany",author_title:"Engineer @ BuildBuddy",date:"2022-06-07:12:00:00",author_url:"https://github.com/bduffany",author_image_url:"https://avatars.githubusercontent.com/u/2414826?v=4",image:"/img/blog/remote-cache-debugging.png",tags:["product","engineering"]},l=void 0,u={permalink:"/blog/bazel-remote-cache-debugging",editUrl:"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/bazel-remote-cache-debugging.md",source:"@site/blog/bazel-remote-cache-debugging.md",title:"Bazel Remote Cache Debugging",description:"All about the new cache requests card and how to use it.",date:"2022-06-07T12:00:00.000Z",formattedDate:"June 7, 2022",tags:[{label:"product",permalink:"/blog/tags/product"},{label:"engineering",permalink:"/blog/tags/engineering"}],readingTime:4.705,truncated:!0,authors:[{name:"Brandon Duffany",title:"Engineer @ BuildBuddy",url:"https://github.com/bduffany",imageURL:"https://avatars.githubusercontent.com/u/2414826?v=4"}],prevItem:{title:"Welcoming Maggie Lou",permalink:"/blog/welcoming-maggie-lou"},nextItem:{title:"Distributed Scheduling for Faster Builds",permalink:"/blog/distributed-scheduling-for-faster-builds"}},c={authorsImageUrls:[void 0]},d=[{value:"New insights",id:"new-insights",children:[],level:2},{value:"How it works",id:"how-it-works",children:[],level:2},{value:"What&#39;s next",id:"whats-next",children:[],level:2}],h={toc:d};function p(e){var t=e.components,s=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},h,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Using a remote cache is a great way to speed up your Bazel builds! But by\ndefault, Bazel uploads almost everything to the remote cache."),(0,r.kt)("p",null,"If your network is slow and your build artifacts are very large (like a\ndocker image) this can lead to poor performance."),(0,r.kt)("p",null,"To address this, and make it easier to fix, we built the new cache\nrequests card."),(0,r.kt)("p",null,"In this post we'll explore what insights this card can give you into your\nbuilds, as well as some fun details about how the card works under the\nhood."),(0,r.kt)("h2",{id:"new-insights"},"New insights"),(0,r.kt)("p",null,"The cache requests card lets you answer some interesting questions about\nyour build which were not easily answerable before. Here are a few:"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"My build seems to have uploaded a lot of data ","\u2014"," which targets\nuploaded the largest artifacts?"))),(0,r.kt)("p",null,'To answer this question, select "Sort by ',(0,r.kt)("strong",{parentName:"p"},"Size"),'" and "Show ',(0,r.kt)("strong",{parentName:"p"},"All"),'".\nThen, select "Group by ',(0,r.kt)("strong",{parentName:"p"},"None"),'". This will show the largest artifacts\nfirst, with target names displayed in the leftmost column.'),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(7546).Z})),(0,r.kt)("p",null,"We can see in this screenshot that the largest cache transfer was a\ndownload of an artifact from the external repository\n",(0,r.kt)("inlineCode",{parentName:"p"},"com_github_tuist_xcodeproj"),". To see the full target and action name,\nhover over the row."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"I see some file references in the build event stream which aren't\nassociated with an action. What are these files?"))),(0,r.kt)("p",null,'To answer this question, select "Show ',(0,r.kt)("strong",{parentName:"p"},"All"),'" and search for\n',(0,r.kt)("strong",{parentName:"p"},"bes-upload"),". You'll see all the files which were uploaded by Bazel\nand not associated with an action, including the timing profile."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(3613).Z})),(0,r.kt)("p",null,"The build in this screenshot shows that a large artifact (285.9 MB) was\nuploaded at the very end of the build, so it most likely was blocking the\nbuild's completion. We can see the full artifact path by hovering over the\nrow."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"I expected my build to be fully-cached, but it was not. Was there a\nsingle action whose inputs or environment variables changed unexpectedly,\nthus triggering all its dependent targets to be rebuilt?"))),(0,r.kt)("p",null,"To answer this question, make sure you are sorted by ",(0,r.kt)("strong",{parentName:"p"},"start time")," in\nascending order, and take a look at the actions with the earliest\ntimestamps. The earliest action is most likely the root cause of the\nchange from the previous build."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(4132).Z})),(0,r.kt)("p",null,"Before the build in this screenshot, a file in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"priority_task_scheduler")," target was edited, which we can see triggered a\ncascade of action executions that transitively depended on\n",(0,r.kt)("inlineCode",{parentName:"p"},"priority_task_scheduler"),"."),(0,r.kt)("h2",{id:"how-it-works"},"How it works"),(0,r.kt)("p",null,"Implementing the cache requests card required solving a few interesting\nproblems."),(0,r.kt)("p",null,"The total size of the request metadata stored for each build is not\nextremely large ","\u2014"," just tens of megabytes for builds with hundreds of\nthousands of cache requests ","\u2014"," but we serve a high volume of\nrequests, and we don't want to negatively impact cache performance just to\nstore this metadata for each request."),(0,r.kt)("p",null,"The simplest solution to implement would be to do a blocking write to a\nMySQL table for each cache request. This would also be pretty convenient\nfor querying the data however we like. However, this would place far too\nmuch load on the database and add way too much latency to each cache\nrequest."),(0,r.kt)("p",null,"So, instead of using MySQL, we used Redis as an intermediate storage\nmedium while the invocation is in progress. Redis can handle a much higher\nvolume of writes than MySQL because it only stores values in memory and it\nhas a much simpler key-value storage model."),(0,r.kt)("p",null,"We can't just store this data in Redis and call it a day, though. Firstly,\nRedis does not give us long-term persistence, and it would be nice to be\nable to keep this data around even for older invocations. To get long-term\npersistence, we read all of the data from Redis and then serialize it into\na ",(0,r.kt)("a",{parentName:"p",href:"https://developers.google.com/protocol-buffers"},"proto"),'. We store this\nproto into a "blobstore," which is just a generic storage interface backed\nby a local disk, Google Cloud Storage, Amazon S3, etc.'),(0,r.kt)("p",null,"Secondly, even with the amazing performance of Redis, we can't just issue\na single write request for every cache request. Doing a separate Redis\nwrite for every request places a large amount of CPU load on Redis, since\nit needs to do a ",(0,r.kt)("inlineCode",{parentName:"p"},"read()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"write()")," system call for each write.\n(We learned this the hard way.)"),(0,r.kt)("p",null,"To address this, we used Redis\n",(0,r.kt)("a",{parentName:"p",href:"https://redis.io/docs/manual/pipelining/"},(0,r.kt)("strong",{parentName:"a"},"pipelining")),". Instead of\nissuing Redis commands directly, we add each command to a pipeline, and\nhave a separate background job that periodically flushes the pipeline.\nAdding the command to the pipeline is just a matter of appending to an\nin-memory buffer, which takes just nanoseconds, so it doesn't impact cache\nperformance to a significant degree."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(7764).Z})),(0,r.kt)("p",null,"Once an invocation is complete, we kick off a job to read all of the\nrequests from Redis and then store it as a single blob in blobstore."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(3305).Z})),(0,r.kt)("p",null,"To read back this data for the UI, all we have to do is load this whole\nblob into memory and then apply any client-side sorting and filtering.\nThese blobs are small enough that we easily load the full blob into memory\non the server ","\u2014"," the blob is too big to be loaded in a browser,\nthough, so we do use a relatively small page size."),(0,r.kt)("p",null,(0,r.kt)("img",{src:n(18).Z})),(0,r.kt)("h2",{id:"whats-next"},"What's next"),(0,r.kt)("p",null,"We hope that you find the new cache requests card useful and that you\nenjoyed reading about how it works! We would love to hear your feedback,\nwhich will help inform how we design the next iteration of our cache\ndebugging tools to help make your builds even faster and more scalable.\nJoin our ",(0,r.kt)("a",{parentName:"p",href:"https://slack.buildbuddy.io"},"Slack channel")," or email us at\n",(0,r.kt)("a",{parentName:"p",href:"mailto:hello@buildbuddy.io"},"hello@buildbuddy.io")," with any questions, comments, or thoughts."))}p.isMDXComponent=!0},3613:function(e,t,n){t.Z=n.p+"assets/images/cache-requests-card-bes-upload-7e293efaf52bed7ebcb56232c8d5b0ba.png"},4132:function(e,t,n){t.Z=n.p+"assets/images/cache-requests-card-incremental-rebuild-c02480aa14d8761c7a51df2ca2c2257a.png"},7546:function(e,t,n){t.Z=n.p+"assets/images/cache-requests-card-135fa673793b16090aafac8f4ded32cc.png"},7764:function(e,t,n){t.Z=n.p+"assets/images/cache-requests-design-1-bb9607923185df1a8ec1ac72b31f8c1a.png"},3305:function(e,t,n){t.Z=n.p+"assets/images/cache-requests-design-2-0ffff643976481b7c66e88f3caa70c4f.png"},18:function(e,t,n){t.Z=n.p+"assets/images/cache-requests-design-3-b2207697c8c431ab47b9653255dd12ed.png"}}]);