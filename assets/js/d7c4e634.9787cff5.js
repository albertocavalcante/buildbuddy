"use strict";(self.webpackChunkbuildbuddy_docs_website=self.webpackChunkbuildbuddy_docs_website||[]).push([[7365],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),h=r,m=p["".concat(s,".").concat(h)]||p[h]||d[h]||i;return n?o.createElement(m,a(a({ref:t},c),{},{components:n})):o.createElement(m,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},83069:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var o=n(83117),r=n(80102),i=(n(67294),n(3905)),a=["components"],l={slug:"multiple-xcode-configurations-with-rules_xcodeproj-1-3",title:"Multiple Xcode Configurations with rules_xcodeproj 1.3",description:"The one where we added a much requested, but surprisingly difficult to implement, feature.",author:"Brentley Jones",author_title:"Developer Evangelist @ BuildBuddy",date:"2023-03-17:12:00:00",author_url:"https://brentleyjones.com",author_image_url:"https://avatars.githubusercontent.com/u/158658?v=4",image:"/img/rules_xcodeproj_1_3.png",tags:["rules_xcodeproj"]},s=void 0,u={permalink:"/blog/multiple-xcode-configurations-with-rules_xcodeproj-1-3",editUrl:"https://github.com/buildbuddy-io/buildbuddy/edit/master/website/blog/multiple-xcode-configurations-with-rules_xcodeproj-1-3.md",source:"@site/blog/multiple-xcode-configurations-with-rules_xcodeproj-1-3.md",title:"Multiple Xcode Configurations with rules_xcodeproj 1.3",description:"The one where we added a much requested, but surprisingly difficult to implement, feature.",date:"2023-03-17T12:00:00.000Z",formattedDate:"March 17, 2023",tags:[{label:"rules_xcodeproj",permalink:"/blog/tags/rules-xcodeproj"}],readingTime:3.32,hasTruncateMarker:!0,authors:[{name:"Brentley Jones",title:"Developer Evangelist @ BuildBuddy",url:"https://brentleyjones.com",imageURL:"https://avatars.githubusercontent.com/u/158658?v=4"}],frontMatter:{slug:"multiple-xcode-configurations-with-rules_xcodeproj-1-3",title:"Multiple Xcode Configurations with rules_xcodeproj 1.3",description:"The one where we added a much requested, but surprisingly difficult to implement, feature.",author:"Brentley Jones",author_title:"Developer Evangelist @ BuildBuddy",date:"2023-03-17:12:00:00",author_url:"https://brentleyjones.com",author_image_url:"https://avatars.githubusercontent.com/u/158658?v=4",image:"/img/rules_xcodeproj_1_3.png",tags:["rules_xcodeproj"]},prevItem:{title:"Donating rules_xcodeproj to the Mobile Native Foundation",permalink:"/blog/donating-rules_xcodeproj-to-the-mobile-native-foundation"},nextItem:{title:"Introducing rules_xcodeproj 1.0",permalink:"/blog/introducing-rules_xcodeproj-1-0"}},c={authorsImageUrls:[void 0]},p=[],d={toc:p},h="wrapper";function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)(h,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Today we released ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/buildbuddy-io/rules_xcodeproj/releases/tag/1.3.2"},"version 1.3.2")," of rules_xcodeproj!"),(0,i.kt)("p",null,"This is a pretty exciting release, as it adds support for multiple Xcode\nconfigurations (e.g. Debug and Release). Since early in rules_xcodeproj\u2019s\ndevelopment, being able to have more than the default Debug configuration has\nbeen highly requested. We would have implemented support much sooner, but\nbecause rules_xcodeproj accounts for every file path and compiler/linker flag,\nin order to have rock solid indexing and debugging support, it wasn\u2019t an easy\ntask."),(0,i.kt)("h1",{id:"the-challenge"},"The challenge"),(0,i.kt)("p",null,"rules_xcodeproj uses a Bazel aspect to collect all of the information about your\nbuild graph. It also uses Bazel split transitions in order to apply variations\nof certain flags in order to support simulator and device builds in a single\nproject. It seems that it should have been pretty easy to extend this method to\napply to Xcode configurations as well, right? There were two problems to being\nable to do that nicely, and we only really solved one of them at this time."),(0,i.kt)("p",null,"The common way that Bazel developers express various configurations is by\ndefining various configs in ",(0,i.kt)("inlineCode",{parentName:"p"},".bazelrc")," files, and then using the ",(0,i.kt)("inlineCode",{parentName:"p"},"--config"),"\nstanza to select them. So, that brings us to our first problem: Bazel\ntransitions can\u2019t transition on ",(0,i.kt)("inlineCode",{parentName:"p"},"--config"),". Because of our nested invocation\narchitecture, we are able to apply a single ",(0,i.kt)("inlineCode",{parentName:"p"},"--config")," to the inner invocation,\nand we\u2019ve had support for this for a while. Being able to transition on\n",(0,i.kt)("inlineCode",{parentName:"p"},"--config")," would have allowed us to support multiple Xcode configurations a lot\nsooner. Of note, in the solution we\u2019ve implemented, you still can\u2019t use\n",(0,i.kt)("inlineCode",{parentName:"p"},"--config"),", and need to list out all the flags you want for each configuration.\nThis is because of this limitation of transitions."),(0,i.kt)("p",null,"For now we\u2019ve decided to continue to use transitions, and wanted to extend our\napproach to cover multiple configurations as well. That brought us to our second\nproblem: transitions are specified as part of a rule definition, and Bazel\nmacros can\u2019t create anonymous rule. The easy approach to this would have been to\nrequire users to define transitions in ",(0,i.kt)("inlineCode",{parentName:"p"},".bzl")," files (with the help of some\nmacros), and then reference them in their ",(0,i.kt)("inlineCode",{parentName:"p"},"xcodeproj")," targets (which are\nactually macros, not rules). This would go against one of our driving principles\nof only needing a single ",(0,i.kt)("inlineCode",{parentName:"p"},"xcodeproj")," target for all but the most complicated\nsetups, as we believe Xcode configurations are a fundamental aspect of projects\nthat everyone should be able to easily specify."),(0,i.kt)("h1",{id:"the-solution"},"The solution"),(0,i.kt)("p",null,"The solution we implemented allows you to specify a dictionary of transition\nsettings in the ",(0,i.kt)("inlineCode",{parentName:"p"},"xcodeproj.xcode_configurations")," attribute. Given the\npreviously mentioned limitations, you may be wondering how we were able to\naccomplish this. Earlier I mentioned our nested invocation architecture, which\ncalls ",(0,i.kt)("inlineCode",{parentName:"p"},"bazel run")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"runner.sh")," (the script that is invoked when you call\n",(0,i.kt)("inlineCode",{parentName:"p"},"bazel run //:xcodeproj"),"). We leverage this architecture to generate a Bazel\npackage in an external repository. This package contains a ",(0,i.kt)("inlineCode",{parentName:"p"},"BUILD")," file with a\ntarget using the actual ",(0,i.kt)("inlineCode",{parentName:"p"},"xcodeproj")," rule, along with a ",(0,i.kt)("inlineCode",{parentName:"p"},".bzl")," file that defines\na custom transition containing information from\n",(0,i.kt)("inlineCode",{parentName:"p"},"xcodeproj.xcode_configurations"),". And just like how a solution for a previous\nfeature was built upon to enable another feature (i.e. nested invocations which\nenabled isolated build configurations, was built on for generated packages to\nenable multiple Xcode configurations), we should be able to build on this\nsolution the same way (e.g. to enable automatic target discovery)."),(0,i.kt)("p",null,"Here is an example of how you could specify Debug and Release configurations:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'xcodeproj(\n    ...\n    xcode_configurations = {\n        "Debug": {\n            "//command_line_option:compilation_mode": "dbg",\n        },\n        "Release": {\n            "//command_line_option:compilation_mode": "opt",\n        },\n    },\n    ...\n)\n')),(0,i.kt)("p",null,"We think the end result is a good starting point, but can be refined futher in\nfuture releases. Please give it a try, and if you run into any problems\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/buildbuddy-io/rules_xcodeproj/issues/new/choose"},"file an issue"),"! You can also join us in the ",(0,i.kt)("inlineCode",{parentName:"p"},"#rules_xcodeproj"),"\nchannel in the ",(0,i.kt)("a",{parentName:"p",href:"https://slack.bazel.build/"},"Bazel Slack workspace"),", and you can email us at\n",(0,i.kt)("a",{parentName:"p",href:"mailto:hello@buildbuddy.io"},"hello@buildbuddy.io")," with any questions, comments, or thoughts."))}m.isMDXComponent=!0}}]);