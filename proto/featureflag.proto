syntax = "proto3";

import "proto/context.proto";
import "google/api/annotations.proto";

package featureflag;

message FeatureFlag {
  string name = 1;
  bool enabled = 2;
  string description = 3;
  // If Enabled=true and this is set, the list of groups the feature flag applies to
  // If Enabled=true and this is not set, the feature flag is enabled for all groups
  // If Enabled=false and this is set, the feature flag will still be disabled for all groups.
  repeated string experiment_group_ids = 4;
}

message CreateFeatureFlagRequest {
  // The request context.
  context.RequestContext request_context = 1;

  string name = 2;
  string description = 3;
}

message CreateFeatureFlagResponse {
  // The response context.
  context.ResponseContext response_context = 1;
}

message UpdateFeatureFlagRequest {
  // The request context.
  context.RequestContext request_context = 1;

  string name = 2;
  string description = 3;
  bool enabled = 4;
}

message UpdateFeatureFlagResponse {
  // The response context.
  context.ResponseContext response_context = 1;
}

message UpdateExperimentAssignmentsRequest {
  // The request context.
  context.RequestContext request_context = 1;

  string name = 2;
  repeated string configured_group_ids = 3;
}

message UpdateExperimentAssignmentsResponse {
  // The response context.
  context.ResponseContext response_context = 1;
}

message GetFlagRequest {
  // The request context.
  context.RequestContext request_context = 1;

  string name = 2;
}

message GetFlagResponse {
  // The response context.
  context.ResponseContext response_context = 1;

  bool enabled = 2;
}

message GetAllFeatureFlagsRequest {
  // The request context.
  context.RequestContext request_context = 1;
}

message GetAllFeatureFlagsResponse {
  // The response context.
  context.ResponseContext response_context = 1;

  repeated FeatureFlag flags = 2;
}

message Group {
  string name = 1;
  string group_id = 2;
}

message GetGroupsRequest {
  context.ResponseContext response_context = 1;
}

message GetGroupsResponse {
  context.ResponseContext response_context = 1;
  repeated Group groups = 2;
}

message CreateGroupsRequest {
  context.ResponseContext response_context = 1;
}

message CreateGroupsResponse {
  context.ResponseContext response_context = 1;
}

message GetFeatureFlagRequest {
  string name = 1;
}

message GetFeatureFlagResult {
  bool enabled = 1;
  repeated string configured_group_ids = 2;
}

service FeatureFlagService {
  rpc GetFeatureFlag(GetFeatureFlagRequest) returns (GetFeatureFlagResult){
    option (google.api.http) = { get: "/v2/featureflag/{featureflag.name}" };
  }
}